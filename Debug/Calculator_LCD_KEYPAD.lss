
Calculator_LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000485c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  0000485c  000048f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000ca  008000ca  0000495a  2**0
                  ALLOC
  3 .stab         00004050  00000000  00000000  0000495c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002096  00000000  00000000  000089ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000aa42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000aba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ad31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000cd76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000de77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000edfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ef7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000facc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <main>
      8a:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 21 	jmp	0x426c	; 0x426c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e8       	ldi	r22, 0x8C	; 140
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3e 21 	jmp	0x427c	; 0x427c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_pinInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinInit(const pin_obj_t * pin_obj)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <GPIO_pinInit+0x28>
	{
		error_status = E_NOT_OK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
     cc4:	ea c0       	rjmp	.+468    	; 0xe9a <GPIO_pinInit+0x1fc>
	}
	else
	{
		/* check the required pin direction */
		switch (pin_obj->direction)
     cc6:	ea 81       	ldd	r30, Y+2	; 0x02
     cc8:	fb 81       	ldd	r31, Y+3	; 0x03
     cca:	80 81       	ld	r24, Z
     ccc:	82 95       	swap	r24
     cce:	86 95       	lsr	r24
     cd0:	87 70       	andi	r24, 0x07	; 7
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	3f 83       	std	Y+7, r19	; 0x07
     cda:	2e 83       	std	Y+6, r18	; 0x06
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	9f 81       	ldd	r25, Y+7	; 0x07
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <GPIO_pinInit+0x52>
     ce4:	2e 81       	ldd	r18, Y+6	; 0x06
     ce6:	3f 81       	ldd	r19, Y+7	; 0x07
     ce8:	21 30       	cpi	r18, 0x01	; 1
     cea:	31 05       	cpc	r19, r1
     cec:	91 f1       	breq	.+100    	; 0xd52 <GPIO_pinInit+0xb4>
     cee:	5f c0       	rjmp	.+190    	; 0xdae <GPIO_pinInit+0x110>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     cf0:	ea 81       	ldd	r30, Y+2	; 0x02
     cf2:	fb 81       	ldd	r31, Y+3	; 0x03
     cf4:	80 81       	ld	r24, Z
     cf6:	83 70       	andi	r24, 0x03	; 3
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	fc 01       	movw	r30, r24
     d02:	ec 56       	subi	r30, 0x6C	; 108
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	a0 81       	ld	r26, Z
     d08:	b1 81       	ldd	r27, Z+1	; 0x01
     d0a:	ea 81       	ldd	r30, Y+2	; 0x02
     d0c:	fb 81       	ldd	r31, Y+3	; 0x03
     d0e:	80 81       	ld	r24, Z
     d10:	83 70       	andi	r24, 0x03	; 3
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	fc 01       	movw	r30, r24
     d1c:	ec 56       	subi	r30, 0x6C	; 108
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	01 90       	ld	r0, Z+
     d22:	f0 81       	ld	r31, Z
     d24:	e0 2d       	mov	r30, r0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	ea 81       	ldd	r30, Y+2	; 0x02
     d2c:	fb 81       	ldd	r31, Y+3	; 0x03
     d2e:	80 81       	ld	r24, Z
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <GPIO_pinInit+0xa8>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <GPIO_pinInit+0xa4>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	2e c0       	rjmp	.+92     	; 0xdae <GPIO_pinInit+0x110>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     d52:	ea 81       	ldd	r30, Y+2	; 0x02
     d54:	fb 81       	ldd	r31, Y+3	; 0x03
     d56:	80 81       	ld	r24, Z
     d58:	83 70       	andi	r24, 0x03	; 3
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	fc 01       	movw	r30, r24
     d64:	ec 56       	subi	r30, 0x6C	; 108
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	a0 81       	ld	r26, Z
     d6a:	b1 81       	ldd	r27, Z+1	; 0x01
     d6c:	ea 81       	ldd	r30, Y+2	; 0x02
     d6e:	fb 81       	ldd	r31, Y+3	; 0x03
     d70:	80 81       	ld	r24, Z
     d72:	83 70       	andi	r24, 0x03	; 3
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	fc 01       	movw	r30, r24
     d7e:	ec 56       	subi	r30, 0x6C	; 108
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	01 90       	ld	r0, Z+
     d84:	f0 81       	ld	r31, Z
     d86:	e0 2d       	mov	r30, r0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	ea 81       	ldd	r30, Y+2	; 0x02
     d8e:	fb 81       	ldd	r31, Y+3	; 0x03
     d90:	80 81       	ld	r24, Z
     d92:	86 95       	lsr	r24
     d94:	86 95       	lsr	r24
     d96:	87 70       	andi	r24, 0x07	; 7
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <GPIO_pinInit+0x108>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <GPIO_pinInit+0x104>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}

		/* check the required pin logic */
		switch(pin_obj->logic)
     dae:	ea 81       	ldd	r30, Y+2	; 0x02
     db0:	fb 81       	ldd	r31, Y+3	; 0x03
     db2:	80 81       	ld	r24, Z
     db4:	82 95       	swap	r24
     db6:	86 95       	lsr	r24
     db8:	86 95       	lsr	r24
     dba:	83 70       	andi	r24, 0x03	; 3
     dbc:	81 70       	andi	r24, 0x01	; 1
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	31 f0       	breq	.+12     	; 0xdda <GPIO_pinInit+0x13c>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	21 30       	cpi	r18, 0x01	; 1
     dd4:	31 05       	cpc	r19, r1
     dd6:	91 f1       	breq	.+100    	; 0xe3c <GPIO_pinInit+0x19e>
     dd8:	60 c0       	rjmp	.+192    	; 0xe9a <GPIO_pinInit+0x1fc>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
     dda:	ea 81       	ldd	r30, Y+2	; 0x02
     ddc:	fb 81       	ldd	r31, Y+3	; 0x03
     dde:	80 81       	ld	r24, Z
     de0:	83 70       	andi	r24, 0x03	; 3
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	fc 01       	movw	r30, r24
     dec:	e4 56       	subi	r30, 0x64	; 100
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	a0 81       	ld	r26, Z
     df2:	b1 81       	ldd	r27, Z+1	; 0x01
     df4:	ea 81       	ldd	r30, Y+2	; 0x02
     df6:	fb 81       	ldd	r31, Y+3	; 0x03
     df8:	80 81       	ld	r24, Z
     dfa:	83 70       	andi	r24, 0x03	; 3
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	fc 01       	movw	r30, r24
     e06:	e4 56       	subi	r30, 0x64	; 100
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	01 90       	ld	r0, Z+
     e0c:	f0 81       	ld	r31, Z
     e0e:	e0 2d       	mov	r30, r0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	ea 81       	ldd	r30, Y+2	; 0x02
     e16:	fb 81       	ldd	r31, Y+3	; 0x03
     e18:	80 81       	ld	r24, Z
     e1a:	86 95       	lsr	r24
     e1c:	86 95       	lsr	r24
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <GPIO_pinInit+0x192>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <GPIO_pinInit+0x18e>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	2f c0       	rjmp	.+94     	; 0xe9a <GPIO_pinInit+0x1fc>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
     e3c:	ea 81       	ldd	r30, Y+2	; 0x02
     e3e:	fb 81       	ldd	r31, Y+3	; 0x03
     e40:	80 81       	ld	r24, Z
     e42:	83 70       	andi	r24, 0x03	; 3
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	fc 01       	movw	r30, r24
     e4e:	e4 56       	subi	r30, 0x64	; 100
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	a0 81       	ld	r26, Z
     e54:	b1 81       	ldd	r27, Z+1	; 0x01
     e56:	ea 81       	ldd	r30, Y+2	; 0x02
     e58:	fb 81       	ldd	r31, Y+3	; 0x03
     e5a:	80 81       	ld	r24, Z
     e5c:	83 70       	andi	r24, 0x03	; 3
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	fc 01       	movw	r30, r24
     e68:	e4 56       	subi	r30, 0x64	; 100
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	01 90       	ld	r0, Z+
     e6e:	f0 81       	ld	r31, Z
     e70:	e0 2d       	mov	r30, r0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	ea 81       	ldd	r30, Y+2	; 0x02
     e78:	fb 81       	ldd	r31, Y+3	; 0x03
     e7a:	80 81       	ld	r24, Z
     e7c:	86 95       	lsr	r24
     e7e:	86 95       	lsr	r24
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_pinInit+0x1f4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_pinInit+0x1f0>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
			/* default:
					error_status = E_NOT_OK;*/
		}
	}

	return error_status;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e9c:	27 96       	adiw	r28, 0x07	; 7
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <GPIO_pinDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinDirectionInit(const pin_obj_t * pin_obj, GPIO_direction_t direction)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <GPIO_pinDirectionInit+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <GPIO_pinDirectionInit+0x8>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_pinDirectionInit+0xa>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9b 83       	std	Y+3, r25	; 0x03
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	11 f4       	brne	.+4      	; 0xed2 <GPIO_pinDirectionInit+0x24>
	{
		error_status = E_NOT_OK;
     ece:	19 82       	std	Y+1, r1	; 0x01
     ed0:	6f c0       	rjmp	.+222    	; 0xfb0 <GPIO_pinDirectionInit+0x102>
	}
	else
	{
		/* check the required pin direction */
		switch (direction)
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3e 83       	std	Y+6, r19	; 0x06
     eda:	2d 83       	std	Y+5, r18	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	31 f0       	breq	.+12     	; 0xef0 <GPIO_pinDirectionInit+0x42>
     ee4:	2d 81       	ldd	r18, Y+5	; 0x05
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	21 30       	cpi	r18, 0x01	; 1
     eea:	31 05       	cpc	r19, r1
     eec:	91 f1       	breq	.+100    	; 0xf52 <GPIO_pinDirectionInit+0xa4>
     eee:	60 c0       	rjmp	.+192    	; 0xfb0 <GPIO_pinDirectionInit+0x102>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     ef0:	ea 81       	ldd	r30, Y+2	; 0x02
     ef2:	fb 81       	ldd	r31, Y+3	; 0x03
     ef4:	80 81       	ld	r24, Z
     ef6:	83 70       	andi	r24, 0x03	; 3
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	fc 01       	movw	r30, r24
     f02:	ec 56       	subi	r30, 0x6C	; 108
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	a0 81       	ld	r26, Z
     f08:	b1 81       	ldd	r27, Z+1	; 0x01
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	80 81       	ld	r24, Z
     f10:	83 70       	andi	r24, 0x03	; 3
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	ec 56       	subi	r30, 0x6C	; 108
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	01 90       	ld	r0, Z+
     f22:	f0 81       	ld	r31, Z
     f24:	e0 2d       	mov	r30, r0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	ea 81       	ldd	r30, Y+2	; 0x02
     f2c:	fb 81       	ldd	r31, Y+3	; 0x03
     f2e:	80 81       	ld	r24, Z
     f30:	86 95       	lsr	r24
     f32:	86 95       	lsr	r24
     f34:	87 70       	andi	r24, 0x07	; 7
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_pinDirectionInit+0x98>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_pinDirectionInit+0x94>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	2f c0       	rjmp	.+94     	; 0xfb0 <GPIO_pinDirectionInit+0x102>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	80 81       	ld	r24, Z
     f58:	83 70       	andi	r24, 0x03	; 3
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	fc 01       	movw	r30, r24
     f64:	ec 56       	subi	r30, 0x6C	; 108
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	a0 81       	ld	r26, Z
     f6a:	b1 81       	ldd	r27, Z+1	; 0x01
     f6c:	ea 81       	ldd	r30, Y+2	; 0x02
     f6e:	fb 81       	ldd	r31, Y+3	; 0x03
     f70:	80 81       	ld	r24, Z
     f72:	83 70       	andi	r24, 0x03	; 3
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	fc 01       	movw	r30, r24
     f7e:	ec 56       	subi	r30, 0x6C	; 108
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	01 90       	ld	r0, Z+
     f84:	f0 81       	ld	r31, Z
     f86:	e0 2d       	mov	r30, r0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	ea 81       	ldd	r30, Y+2	; 0x02
     f8e:	fb 81       	ldd	r31, Y+3	; 0x03
     f90:	80 81       	ld	r24, Z
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	87 70       	andi	r24, 0x07	; 7
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_pinDirectionInit+0xfa>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_pinDirectionInit+0xf6>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
			 * so, there is no need for default case in here */
			/* default:
					error_status = E_NOT_OK;*/
		}
	}
	return error_status;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb2:	26 96       	adiw	r28, 0x06	; 6
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <GPIO_pinGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinGetDirection(const pin_obj_t * pin_obj, GPIO_direction_t * direction)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <GPIO_pinGetDirection+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <GPIO_pinGetDirection+0x8>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	7d 83       	std	Y+5, r23	; 0x05
     fd8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	11 f4       	brne	.+4      	; 0xfea <GPIO_pinGetDirection+0x26>
	{
		error_status = E_NOT_OK;
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	24 c0       	rjmp	.+72     	; 0x1032 <GPIO_pinGetDirection+0x6e>
	}
	else
	{
		/* update the passed argument with the current pin state */
		*direction = READ_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     fea:	ea 81       	ldd	r30, Y+2	; 0x02
     fec:	fb 81       	ldd	r31, Y+3	; 0x03
     fee:	80 81       	ld	r24, Z
     ff0:	83 70       	andi	r24, 0x03	; 3
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	fc 01       	movw	r30, r24
     ffc:	ec 56       	subi	r30, 0x6C	; 108
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	01 90       	ld	r0, Z+
    1002:	f0 81       	ld	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	80 81       	ld	r24, Z
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	ea 81       	ldd	r30, Y+2	; 0x02
    100e:	fb 81       	ldd	r31, Y+3	; 0x03
    1010:	80 81       	ld	r24, Z
    1012:	86 95       	lsr	r24
    1014:	86 95       	lsr	r24
    1016:	87 70       	andi	r24, 0x07	; 7
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a9 01       	movw	r20, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_pinGetDirection+0x60>
    1020:	55 95       	asr	r21
    1022:	47 95       	ror	r20
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_pinGetDirection+0x5c>
    1028:	ca 01       	movw	r24, r20
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	ec 81       	ldd	r30, Y+4	; 0x04
    102e:	fd 81       	ldd	r31, Y+5	; 0x05
    1030:	80 83       	st	Z, r24
	}

	return error_status;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <GPIO_pinWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinWrite(const pin_obj_t * pin_obj, GPIO_logic_t logic)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_pinWrite+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_pinWrite+0x8>
    104c:	00 d0       	rcall	.+0      	; 0x104e <GPIO_pinWrite+0xa>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	9b 81       	ldd	r25, Y+3	; 0x03
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	11 f4       	brne	.+4      	; 0x1068 <GPIO_pinWrite+0x24>
	{
		error_status = E_NOT_OK;
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	6f c0       	rjmp	.+222    	; 0x1146 <GPIO_pinWrite+0x102>
	}
	else
	{
		/* check the required pin logic */
		switch(logic)
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3e 83       	std	Y+6, r19	; 0x06
    1070:	2d 83       	std	Y+5, r18	; 0x05
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	31 f0       	breq	.+12     	; 0x1086 <GPIO_pinWrite+0x42>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	21 30       	cpi	r18, 0x01	; 1
    1080:	31 05       	cpc	r19, r1
    1082:	91 f1       	breq	.+100    	; 0x10e8 <GPIO_pinWrite+0xa4>
    1084:	60 c0       	rjmp	.+192    	; 0x1146 <GPIO_pinWrite+0x102>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1086:	ea 81       	ldd	r30, Y+2	; 0x02
    1088:	fb 81       	ldd	r31, Y+3	; 0x03
    108a:	80 81       	ld	r24, Z
    108c:	83 70       	andi	r24, 0x03	; 3
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	fc 01       	movw	r30, r24
    1098:	e4 56       	subi	r30, 0x64	; 100
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	a0 81       	ld	r26, Z
    109e:	b1 81       	ldd	r27, Z+1	; 0x01
    10a0:	ea 81       	ldd	r30, Y+2	; 0x02
    10a2:	fb 81       	ldd	r31, Y+3	; 0x03
    10a4:	80 81       	ld	r24, Z
    10a6:	83 70       	andi	r24, 0x03	; 3
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e4 56       	subi	r30, 0x64	; 100
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	ea 81       	ldd	r30, Y+2	; 0x02
    10c2:	fb 81       	ldd	r31, Y+3	; 0x03
    10c4:	80 81       	ld	r24, Z
    10c6:	86 95       	lsr	r24
    10c8:	86 95       	lsr	r24
    10ca:	87 70       	andi	r24, 0x07	; 7
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <GPIO_pinWrite+0x98>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <GPIO_pinWrite+0x94>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	2f c0       	rjmp	.+94     	; 0x1146 <GPIO_pinWrite+0x102>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    10e8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ea:	fb 81       	ldd	r31, Y+3	; 0x03
    10ec:	80 81       	ld	r24, Z
    10ee:	83 70       	andi	r24, 0x03	; 3
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	fc 01       	movw	r30, r24
    10fa:	e4 56       	subi	r30, 0x64	; 100
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	a0 81       	ld	r26, Z
    1100:	b1 81       	ldd	r27, Z+1	; 0x01
    1102:	ea 81       	ldd	r30, Y+2	; 0x02
    1104:	fb 81       	ldd	r31, Y+3	; 0x03
    1106:	80 81       	ld	r24, Z
    1108:	83 70       	andi	r24, 0x03	; 3
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	fc 01       	movw	r30, r24
    1114:	e4 56       	subi	r30, 0x64	; 100
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	01 90       	ld	r0, Z+
    111a:	f0 81       	ld	r31, Z
    111c:	e0 2d       	mov	r30, r0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	ea 81       	ldd	r30, Y+2	; 0x02
    1124:	fb 81       	ldd	r31, Y+3	; 0x03
    1126:	80 81       	ld	r24, Z
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	87 70       	andi	r24, 0x07	; 7
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_pinWrite+0xfa>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_pinWrite+0xf6>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	26 96       	adiw	r28, 0x06	; 6
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <GPIO_pinRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinRead(const pin_obj_t * pin_obj, GPIO_logic_t * logic)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_pinRead+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_pinRead+0x8>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9b 83       	std	Y+3, r25	; 0x03
    116a:	8a 83       	std	Y+2, r24	; 0x02
    116c:	7d 83       	std	Y+5, r23	; 0x05
    116e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	11 f4       	brne	.+4      	; 0x1180 <GPIO_pinRead+0x26>
	{
		error_status = E_NOT_OK;
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	24 c0       	rjmp	.+72     	; 0x11c8 <GPIO_pinRead+0x6e>
	}
	else
	{
		*logic = READ_BIT(*(PIN_registers[pin_obj->port_id]), pin_obj->pin_id);
    1180:	ea 81       	ldd	r30, Y+2	; 0x02
    1182:	fb 81       	ldd	r31, Y+3	; 0x03
    1184:	80 81       	ld	r24, Z
    1186:	83 70       	andi	r24, 0x03	; 3
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	fc 01       	movw	r30, r24
    1192:	ec 55       	subi	r30, 0x5C	; 92
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	01 90       	ld	r0, Z+
    1198:	f0 81       	ld	r31, Z
    119a:	e0 2d       	mov	r30, r0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	ea 81       	ldd	r30, Y+2	; 0x02
    11a4:	fb 81       	ldd	r31, Y+3	; 0x03
    11a6:	80 81       	ld	r24, Z
    11a8:	86 95       	lsr	r24
    11aa:	86 95       	lsr	r24
    11ac:	87 70       	andi	r24, 0x07	; 7
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_pinRead+0x60>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_pinRead+0x5c>
    11be:	ca 01       	movw	r24, r20
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	ec 81       	ldd	r30, Y+4	; 0x04
    11c4:	fd 81       	ldd	r31, Y+5	; 0x05
    11c6:	80 83       	st	Z, r24
	}

	return error_status;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_pinToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinToggle(const pin_obj_t * pin_obj)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_pinToggle+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9b 83       	std	Y+3, r25	; 0x03
    11e8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	11 f4       	brne	.+4      	; 0x11fa <GPIO_pinToggle+0x20>
	{
		error_status = E_NOT_OK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	2f c0       	rjmp	.+94     	; 0x1258 <GPIO_pinToggle+0x7e>
	}
	else
	{
		TOGGLE_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    11fa:	ea 81       	ldd	r30, Y+2	; 0x02
    11fc:	fb 81       	ldd	r31, Y+3	; 0x03
    11fe:	80 81       	ld	r24, Z
    1200:	83 70       	andi	r24, 0x03	; 3
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	e4 56       	subi	r30, 0x64	; 100
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	a0 81       	ld	r26, Z
    1212:	b1 81       	ldd	r27, Z+1	; 0x01
    1214:	ea 81       	ldd	r30, Y+2	; 0x02
    1216:	fb 81       	ldd	r31, Y+3	; 0x03
    1218:	80 81       	ld	r24, Z
    121a:	83 70       	andi	r24, 0x03	; 3
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	fc 01       	movw	r30, r24
    1226:	e4 56       	subi	r30, 0x64	; 100
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	01 90       	ld	r0, Z+
    122c:	f0 81       	ld	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	ea 81       	ldd	r30, Y+2	; 0x02
    1236:	fb 81       	ldd	r31, Y+3	; 0x03
    1238:	80 81       	ld	r24, Z
    123a:	86 95       	lsr	r24
    123c:	86 95       	lsr	r24
    123e:	87 70       	andi	r24, 0x07	; 7
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_pinToggle+0x76>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_pinToggle+0x72>
    1254:	84 27       	eor	r24, r20
    1256:	8c 93       	st	X, r24
	}

	return error_status;
    1258:	89 81       	ldd	r24, Y+1	; 0x01

}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <GPIO_portDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portDirectionInit(const port_id_t port, uint8 direction)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <GPIO_portDirectionInit+0x6>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	10 f0       	brcs	.+4      	; 0x1284 <GPIO_portDirectionInit+0x1e>
	{
		error_status = E_NOT_OK;
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	0d c0       	rjmp	.+26     	; 0x129e <GPIO_portDirectionInit+0x38>
	}
	else
	{
		*(DDR_registers[port]) = direction;
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	fc 01       	movw	r30, r24
    1290:	ec 56       	subi	r30, 0x6C	; 108
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	01 90       	ld	r0, Z+
    1296:	f0 81       	ld	r31, Z
    1298:	e0 2d       	mov	r30, r0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	80 83       	st	Z, r24
	}
	return error_status;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <GPIO_portGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portGetDirection(const port_id_t port, uint8 * direction)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_portGetDirection+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_portGetDirection+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	7c 83       	std	Y+4, r23	; 0x04
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	10 f0       	brcs	.+4      	; 0x12cc <GPIO_portGetDirection+0x20>
	{
		error_status = E_NOT_OK;
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <GPIO_portGetDirection+0x3e>
	}
	else
	{
		*direction = *(DDR_registers[port]);
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	fc 01       	movw	r30, r24
    12d8:	ec 56       	subi	r30, 0x6C	; 108
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	01 90       	ld	r0, Z+
    12de:	f0 81       	ld	r31, Z
    12e0:	e0 2d       	mov	r30, r0
    12e2:	80 81       	ld	r24, Z
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	80 83       	st	Z, r24
	}
	return error_status;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <GPIO_portWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portWrite(const port_id_t port, uint8 logic)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <GPIO_portWrite+0x6>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	/* check if port id is valid */

	if (port > PORT_MAX_NUMBER-1)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	84 30       	cpi	r24, 0x04	; 4
    1312:	10 f0       	brcs	.+4      	; 0x1318 <GPIO_portWrite+0x1e>
	{
		error_status = E_NOT_OK;
    1314:	19 82       	std	Y+1, r1	; 0x01
    1316:	0d c0       	rjmp	.+26     	; 0x1332 <GPIO_portWrite+0x38>
	}
	else
	{
		*(PORT_registers[port]) = logic;
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	fc 01       	movw	r30, r24
    1324:	e4 56       	subi	r30, 0x64	; 100
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	80 83       	st	Z, r24
	}
	return error_status;
    1332:	89 81       	ldd	r24, Y+1	; 0x01

}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <GPIO_portRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portRead(const port_id_t port, uint8 * logic)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <GPIO_portRead+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <GPIO_portRead+0x8>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	7c 83       	std	Y+4, r23	; 0x04
    1350:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	10 f0       	brcs	.+4      	; 0x1360 <GPIO_portRead+0x20>
	{
		error_status = E_NOT_OK;
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	0f c0       	rjmp	.+30     	; 0x137e <GPIO_portRead+0x3e>
	}
	else
	{
		*logic = *(PORT_registers[port]);
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	fc 01       	movw	r30, r24
    136c:	e4 56       	subi	r30, 0x64	; 100
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	01 90       	ld	r0, Z+
    1372:	f0 81       	ld	r31, Z
    1374:	e0 2d       	mov	r30, r0
    1376:	80 81       	ld	r24, Z
    1378:	eb 81       	ldd	r30, Y+3	; 0x03
    137a:	fc 81       	ldd	r31, Y+4	; 0x04
    137c:	80 83       	st	Z, r24
	}
	return error_status;
    137e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <GPIO_portToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portToggle(const port_id_t port)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_portToggle+0x6>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	10 f0       	brcs	.+4      	; 0x13a8 <GPIO_portToggle+0x1a>
	{
		error_status = E_NOT_OK;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	18 c0       	rjmp	.+48     	; 0x13d8 <GPIO_portToggle+0x4a>
	}

	else
	{
		/*toggle all port pins*/
		*(PORT_registers[port]) ^= 0xFF;
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	fc 01       	movw	r30, r24
    13b4:	e4 56       	subi	r30, 0x64	; 100
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	a0 81       	ld	r26, Z
    13ba:	b1 81       	ldd	r27, Z+1	; 0x01
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	fc 01       	movw	r30, r24
    13c8:	e4 56       	subi	r30, 0x64	; 100
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	01 90       	ld	r0, Z+
    13ce:	f0 81       	ld	r31, Z
    13d0:	e0 2d       	mov	r30, r0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 95       	com	r24
    13d6:	8c 93       	st	X, r24
	}
	return error_status;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <LCD_4bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_init(const lcd_4bit_t *lcd)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	e8 97       	sbiw	r28, 0x38	; 56
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	98 af       	std	Y+56, r25	; 0x38
    13fa:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    1400:	8f a9       	ldd	r24, Y+55	; 0x37
    1402:	98 ad       	ldd	r25, Y+56	; 0x38
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	11 f4       	brne	.+4      	; 0x140c <LCD_4bit_init+0x28>
	{
		error_status = E_NOT_OK;
    1408:	1e aa       	std	Y+54, r1	; 0x36
    140a:	13 c2       	rjmp	.+1062   	; 0x1832 <LCD_4bit_init+0x44e>
	}
	else
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
    140c:	1d aa       	std	Y+53, r1	; 0x35
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    140e:	8f a9       	ldd	r24, Y+55	; 0x37
    1410:	98 ad       	ldd	r25, Y+56	; 0x38
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    1418:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    141a:	8f a9       	ldd	r24, Y+55	; 0x37
    141c:	98 ad       	ldd	r25, Y+56	; 0x38
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    1426:	98 2f       	mov	r25, r24
    1428:	8e a9       	ldd	r24, Y+54	; 0x36
    142a:	89 23       	and	r24, r25
    142c:	8e ab       	std	Y+54, r24	; 0x36
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <LCD_4bit_init+0x74>

		for(; data_pin_counter < 4; data_pin_counter++)
		{
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    1430:	8f a9       	ldd	r24, Y+55	; 0x37
    1432:	98 ad       	ldd	r25, Y+56	; 0x38
    1434:	9c 01       	movw	r18, r24
    1436:	2e 5f       	subi	r18, 0xFE	; 254
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	8d a9       	ldd	r24, Y+53	; 0x35
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    144a:	98 2f       	mov	r25, r24
    144c:	8e a9       	ldd	r24, Y+54	; 0x36
    144e:	89 23       	and	r24, r25
    1450:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(; data_pin_counter < 4; data_pin_counter++)
    1452:	8d a9       	ldd	r24, Y+53	; 0x35
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	8d ab       	std	Y+53, r24	; 0x35
    1458:	8d a9       	ldd	r24, Y+53	; 0x35
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	48 f3       	brcs	.-46     	; 0x1430 <LCD_4bit_init+0x4c>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 ea       	ldi	r26, 0xA0	; 160
    1464:	b1 e4       	ldi	r27, 0x41	; 65
    1466:	89 ab       	std	Y+49, r24	; 0x31
    1468:	9a ab       	std	Y+50, r25	; 0x32
    146a:	ab ab       	std	Y+51, r26	; 0x33
    146c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146e:	69 a9       	ldd	r22, Y+49	; 0x31
    1470:	7a a9       	ldd	r23, Y+50	; 0x32
    1472:	8b a9       	ldd	r24, Y+51	; 0x33
    1474:	9c a9       	ldd	r25, Y+52	; 0x34
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a e7       	ldi	r20, 0x7A	; 122
    147c:	55 e4       	ldi	r21, 0x45	; 69
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	8d a7       	std	Y+45, r24	; 0x2d
    1488:	9e a7       	std	Y+46, r25	; 0x2e
    148a:	af a7       	std	Y+47, r26	; 0x2f
    148c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    148e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1490:	7e a5       	ldd	r23, Y+46	; 0x2e
    1492:	8f a5       	ldd	r24, Y+47	; 0x2f
    1494:	98 a9       	ldd	r25, Y+48	; 0x30
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <LCD_4bit_init+0xcc>
		__ticks = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c a7       	std	Y+44, r25	; 0x2c
    14ac:	8b a7       	std	Y+43, r24	; 0x2b
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <LCD_4bit_init+0x14a>
	else if (__tmp > 65535)
    14b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    14b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    14b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b6:	98 a9       	ldd	r25, Y+48	; 0x30
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	4c f5       	brge	.+82     	; 0x151a <LCD_4bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ca:	7a a9       	ldd	r23, Y+50	; 0x32
    14cc:	8b a9       	ldd	r24, Y+51	; 0x33
    14ce:	9c a9       	ldd	r25, Y+52	; 0x34
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	51 e4       	ldi	r21, 0x41	; 65
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9c a7       	std	Y+44, r25	; 0x2c
    14ee:	8b a7       	std	Y+43, r24	; 0x2b
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <LCD_4bit_init+0x12c>
    14f2:	80 e9       	ldi	r24, 0x90	; 144
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	9a a7       	std	Y+42, r25	; 0x2a
    14f8:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14fa:	89 a5       	ldd	r24, Y+41	; 0x29
    14fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_4bit_init+0x11a>
    1502:	9a a7       	std	Y+42, r25	; 0x2a
    1504:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1506:	8b a5       	ldd	r24, Y+43	; 0x2b
    1508:	9c a5       	ldd	r25, Y+44	; 0x2c
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	9c a7       	std	Y+44, r25	; 0x2c
    150e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	8b a5       	ldd	r24, Y+43	; 0x2b
    1512:	9c a5       	ldd	r25, Y+44	; 0x2c
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f7       	brne	.-38     	; 0x14f2 <LCD_4bit_init+0x10e>
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <LCD_4bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	6d a5       	ldd	r22, Y+45	; 0x2d
    151c:	7e a5       	ldd	r23, Y+46	; 0x2e
    151e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9c a7       	std	Y+44, r25	; 0x2c
    152c:	8b a7       	std	Y+43, r24	; 0x2b
    152e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1530:	9c a5       	ldd	r25, Y+44	; 0x2c
    1532:	98 a7       	std	Y+40, r25	; 0x28
    1534:	8f a3       	std	Y+39, r24	; 0x27
    1536:	8f a1       	ldd	r24, Y+39	; 0x27
    1538:	98 a5       	ldd	r25, Y+40	; 0x28
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_4bit_init+0x156>
    153e:	98 a7       	std	Y+40, r25	; 0x28
    1540:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_4bit_sendCommand(lcd, 0x33);	/* required 4-bit mode initialization command */
    1542:	8f a9       	ldd	r24, Y+55	; 0x37
    1544:	98 ad       	ldd	r25, Y+56	; 0x38
    1546:	63 e3       	ldi	r22, 0x33	; 51
    1548:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    154c:	98 2f       	mov	r25, r24
    154e:	8e a9       	ldd	r24, Y+54	; 0x36
    1550:	89 23       	and	r24, r25
    1552:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, 0x32);	/* required 4-bit mode initialization command */
    1554:	8f a9       	ldd	r24, Y+55	; 0x37
    1556:	98 ad       	ldd	r25, Y+56	; 0x38
    1558:	62 e3       	ldi	r22, 0x32	; 50
    155a:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    155e:	98 2f       	mov	r25, r24
    1560:	8e a9       	ldd	r24, Y+54	; 0x36
    1562:	89 23       	and	r24, r25
    1564:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE); /* set 4 bit mode 2 line */
    1566:	8f a9       	ldd	r24, Y+55	; 0x37
    1568:	98 ad       	ldd	r25, Y+56	; 0x38
    156a:	68 e2       	ldi	r22, 0x28	; 40
    156c:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    1570:	98 2f       	mov	r25, r24
    1572:	8e a9       	ldd	r24, Y+54	; 0x36
    1574:	89 23       	and	r24, r25
    1576:	8e ab       	std	Y+54, r24	; 0x36
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 ea       	ldi	r26, 0xA0	; 160
    157e:	b0 e4       	ldi	r27, 0x40	; 64
    1580:	8b a3       	std	Y+35, r24	; 0x23
    1582:	9c a3       	std	Y+36, r25	; 0x24
    1584:	ad a3       	std	Y+37, r26	; 0x25
    1586:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1588:	6b a1       	ldd	r22, Y+35	; 0x23
    158a:	7c a1       	ldd	r23, Y+36	; 0x24
    158c:	8d a1       	ldd	r24, Y+37	; 0x25
    158e:	9e a1       	ldd	r25, Y+38	; 0x26
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	4a e7       	ldi	r20, 0x7A	; 122
    1596:	55 e4       	ldi	r21, 0x45	; 69
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8f 8f       	std	Y+31, r24	; 0x1f
    15a2:	98 a3       	std	Y+32, r25	; 0x20
    15a4:	a9 a3       	std	Y+33, r26	; 0x21
    15a6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15a8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15aa:	78 a1       	ldd	r23, Y+32	; 0x20
    15ac:	89 a1       	ldd	r24, Y+33	; 0x21
    15ae:	9a a1       	ldd	r25, Y+34	; 0x22
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e8       	ldi	r20, 0x80	; 128
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15bc:	88 23       	and	r24, r24
    15be:	2c f4       	brge	.+10     	; 0x15ca <LCD_4bit_init+0x1e6>
		__ticks = 1;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9e 8f       	std	Y+30, r25	; 0x1e
    15c6:	8d 8f       	std	Y+29, r24	; 0x1d
    15c8:	3f c0       	rjmp	.+126    	; 0x1648 <LCD_4bit_init+0x264>
	else if (__tmp > 65535)
    15ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15cc:	78 a1       	ldd	r23, Y+32	; 0x20
    15ce:	89 a1       	ldd	r24, Y+33	; 0x21
    15d0:	9a a1       	ldd	r25, Y+34	; 0x22
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	3f ef       	ldi	r19, 0xFF	; 255
    15d6:	4f e7       	ldi	r20, 0x7F	; 127
    15d8:	57 e4       	ldi	r21, 0x47	; 71
    15da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15de:	18 16       	cp	r1, r24
    15e0:	4c f5       	brge	.+82     	; 0x1634 <LCD_4bit_init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e2:	6b a1       	ldd	r22, Y+35	; 0x23
    15e4:	7c a1       	ldd	r23, Y+36	; 0x24
    15e6:	8d a1       	ldd	r24, Y+37	; 0x25
    15e8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e2       	ldi	r20, 0x20	; 32
    15f0:	51 e4       	ldi	r21, 0x41	; 65
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e 8f       	std	Y+30, r25	; 0x1e
    1608:	8d 8f       	std	Y+29, r24	; 0x1d
    160a:	0f c0       	rjmp	.+30     	; 0x162a <LCD_4bit_init+0x246>
    160c:	80 e9       	ldi	r24, 0x90	; 144
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	9c 8f       	std	Y+28, r25	; 0x1c
    1612:	8b 8f       	std	Y+27, r24	; 0x1b
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <LCD_4bit_init+0x234>
    161c:	9c 8f       	std	Y+28, r25	; 0x1c
    161e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1622:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9e 8f       	std	Y+30, r25	; 0x1e
    1628:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	69 f7       	brne	.-38     	; 0x160c <LCD_4bit_init+0x228>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <LCD_4bit_init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1636:	78 a1       	ldd	r23, Y+32	; 0x20
    1638:	89 a1       	ldd	r24, Y+33	; 0x21
    163a:	9a a1       	ldd	r25, Y+34	; 0x22
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d
    1648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164c:	9a 8f       	std	Y+26, r25	; 0x1a
    164e:	89 8f       	std	Y+25, r24	; 0x19
    1650:	89 8d       	ldd	r24, Y+25	; 0x19
    1652:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_4bit_init+0x270>
    1658:	9a 8f       	std	Y+26, r25	; 0x1a
    165a:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    165c:	8f a9       	ldd	r24, Y+55	; 0x37
    165e:	98 ad       	ldd	r25, Y+56	; 0x38
    1660:	68 e2       	ldi	r22, 0x28	; 40
    1662:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    1666:	98 2f       	mov	r25, r24
    1668:	8e a9       	ldd	r24, Y+54	; 0x36
    166a:	89 23       	and	r24, r25
    166c:	8e ab       	std	Y+54, r24	; 0x36
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a6 e1       	ldi	r26, 0x16	; 22
    1674:	b3 e4       	ldi	r27, 0x43	; 67
    1676:	8d 8b       	std	Y+21, r24	; 0x15
    1678:	9e 8b       	std	Y+22, r25	; 0x16
    167a:	af 8b       	std	Y+23, r26	; 0x17
    167c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	2b ea       	ldi	r18, 0xAB	; 171
    1688:	3a ea       	ldi	r19, 0xAA	; 170
    168a:	4a ea       	ldi	r20, 0xAA	; 170
    168c:	50 e4       	ldi	r21, 0x40	; 64
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	89 8b       	std	Y+17, r24	; 0x11
    1698:	9a 8b       	std	Y+18, r25	; 0x12
    169a:	ab 8b       	std	Y+19, r26	; 0x13
    169c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    169e:	69 89       	ldd	r22, Y+17	; 0x11
    16a0:	7a 89       	ldd	r23, Y+18	; 0x12
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	1c f4       	brge	.+6      	; 0x16bc <LCD_4bit_init+0x2d8>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	88 8b       	std	Y+16, r24	; 0x10
    16ba:	91 c0       	rjmp	.+290    	; 0x17de <LCD_4bit_init+0x3fa>
	else if (__tmp > 255)
    16bc:	69 89       	ldd	r22, Y+17	; 0x11
    16be:	7a 89       	ldd	r23, Y+18	; 0x12
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <LCD_4bit_init+0x2f2>
    16d4:	7b c0       	rjmp	.+246    	; 0x17cc <LCD_4bit_init+0x3e8>
	{
		_delay_ms(__us / 1000.0);
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	54 e4       	ldi	r21, 0x44	; 68
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8c 87       	std	Y+12, r24	; 0x0c
    16f0:	9d 87       	std	Y+13, r25	; 0x0d
    16f2:	ae 87       	std	Y+14, r26	; 0x0e
    16f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    16f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    16fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a e7       	ldi	r20, 0x7A	; 122
    1704:	55 e4       	ldi	r21, 0x45	; 69
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	88 87       	std	Y+8, r24	; 0x08
    1710:	99 87       	std	Y+9, r25	; 0x09
    1712:	aa 87       	std	Y+10, r26	; 0x0a
    1714:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1716:	68 85       	ldd	r22, Y+8	; 0x08
    1718:	79 85       	ldd	r23, Y+9	; 0x09
    171a:	8a 85       	ldd	r24, Y+10	; 0x0a
    171c:	9b 85       	ldd	r25, Y+11	; 0x0b
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <LCD_4bit_init+0x354>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9f 83       	std	Y+7, r25	; 0x07
    1734:	8e 83       	std	Y+6, r24	; 0x06
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <LCD_4bit_init+0x3d2>
	else if (__tmp > 65535)
    1738:	68 85       	ldd	r22, Y+8	; 0x08
    173a:	79 85       	ldd	r23, Y+9	; 0x09
    173c:	8a 85       	ldd	r24, Y+10	; 0x0a
    173e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <LCD_4bit_init+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6c 85       	ldd	r22, Y+12	; 0x0c
    1752:	7d 85       	ldd	r23, Y+13	; 0x0d
    1754:	8e 85       	ldd	r24, Y+14	; 0x0e
    1756:	9f 85       	ldd	r25, Y+15	; 0x0f
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9f 83       	std	Y+7, r25	; 0x07
    1776:	8e 83       	std	Y+6, r24	; 0x06
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <LCD_4bit_init+0x3b4>
    177a:	80 e9       	ldi	r24, 0x90	; 144
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	9d 83       	std	Y+5, r25	; 0x05
    1780:	8c 83       	std	Y+4, r24	; 0x04
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_4bit_init+0x3a2>
    178a:	9d 83       	std	Y+5, r25	; 0x05
    178c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9f 83       	std	Y+7, r25	; 0x07
    1796:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <LCD_4bit_init+0x396>
    17a0:	24 c0       	rjmp	.+72     	; 0x17ea <LCD_4bit_init+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	68 85       	ldd	r22, Y+8	; 0x08
    17a4:	79 85       	ldd	r23, Y+9	; 0x09
    17a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9f 83       	std	Y+7, r25	; 0x07
    17b4:	8e 83       	std	Y+6, r24	; 0x06
    17b6:	8e 81       	ldd	r24, Y+6	; 0x06
    17b8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ba:	9b 83       	std	Y+3, r25	; 0x03
    17bc:	8a 83       	std	Y+2, r24	; 0x02
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	9b 81       	ldd	r25, Y+3	; 0x03
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_4bit_init+0x3de>
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <LCD_4bit_init+0x406>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17cc:	69 89       	ldd	r22, Y+17	; 0x11
    17ce:	7a 89       	ldd	r23, Y+18	; 0x12
    17d0:	8b 89       	ldd	r24, Y+19	; 0x13
    17d2:	9c 89       	ldd	r25, Y+20	; 0x14
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	88 8b       	std	Y+16, r24	; 0x10
    17de:	88 89       	ldd	r24, Y+16	; 0x10
    17e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	8a 95       	dec	r24
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_4bit_init+0x400>
    17e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    17ea:	8f a9       	ldd	r24, Y+55	; 0x37
    17ec:	98 ad       	ldd	r25, Y+56	; 0x38
    17ee:	68 e2       	ldi	r22, 0x28	; 40
    17f0:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    17f4:	98 2f       	mov	r25, r24
    17f6:	8e a9       	ldd	r24, Y+54	; 0x36
    17f8:	89 23       	and	r24, r25
    17fa:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    17fc:	8f a9       	ldd	r24, Y+55	; 0x37
    17fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1800:	6c e0       	ldi	r22, 0x0C	; 12
    1802:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    1806:	98 2f       	mov	r25, r24
    1808:	8e a9       	ldd	r24, Y+54	; 0x36
    180a:	89 23       	and	r24, r25
    180c:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_ENTRY_MODE);
    180e:	8f a9       	ldd	r24, Y+55	; 0x37
    1810:	98 ad       	ldd	r25, Y+56	; 0x38
    1812:	66 e0       	ldi	r22, 0x06	; 6
    1814:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    1818:	98 2f       	mov	r25, r24
    181a:	8e a9       	ldd	r24, Y+54	; 0x36
    181c:	89 23       	and	r24, r25
    181e:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CLEAR);
    1820:	8f a9       	ldd	r24, Y+55	; 0x37
    1822:	98 ad       	ldd	r25, Y+56	; 0x38
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    182a:	98 2f       	mov	r25, r24
    182c:	8e a9       	ldd	r24, Y+54	; 0x36
    182e:	89 23       	and	r24, r25
    1830:	8e ab       	std	Y+54, r24	; 0x36

	}
	return error_status;
    1832:	8e a9       	ldd	r24, Y+54	; 0x36
}
    1834:	e8 96       	adiw	r28, 0x38	; 56
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_4bit_clear>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_clear(const lcd_4bit_t *lcd)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_4bit_clear+0x6>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	9b 83       	std	Y+3, r25	; 0x03
    1854:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	11 f4       	brne	.+4      	; 0x1866 <LCD_4bit_clear+0x20>
	{
		error_status = E_NOT_OK;
    1862:	19 82       	std	Y+1, r1	; 0x01
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <LCD_4bit_clear+0x2a>
	}
	else
	{
		LCD_4bit_sendCommand(lcd, _LCD_CLEAR);
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
	}
	return error_status;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_4bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCommand(const lcd_4bit_t *lcd, uint8 command)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	62 97       	sbiw	r28, 0x12	; 18
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	99 8b       	std	Y+17, r25	; 0x11
    1894:	88 8b       	std	Y+16, r24	; 0x10
    1896:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    189c:	88 89       	ldd	r24, Y+16	; 0x10
    189e:	99 89       	ldd	r25, Y+17	; 0x11
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	11 f4       	brne	.+4      	; 0x18a8 <LCD_4bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    18a4:	1f 86       	std	Y+15, r1	; 0x0f
    18a6:	a1 c0       	rjmp	.+322    	; 0x19ea <LCD_4bit_sendCommand+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    18a8:	88 89       	ldd	r24, Y+16	; 0x10
    18aa:	99 89       	ldd	r25, Y+17	; 0x11
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    18b2:	98 2f       	mov	r25, r24
    18b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b6:	89 23       	and	r24, r25
    18b8:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (command >> 4));	/* Send the higher command nibble first */
    18ba:	8a 89       	ldd	r24, Y+18	; 0x12
    18bc:	28 2f       	mov	r18, r24
    18be:	22 95       	swap	r18
    18c0:	2f 70       	andi	r18, 0x0F	; 15
    18c2:	88 89       	ldd	r24, Y+16	; 0x10
    18c4:	99 89       	ldd	r25, Y+17	; 0x11
    18c6:	62 2f       	mov	r22, r18
    18c8:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    18cc:	98 2f       	mov	r25, r24
    18ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d0:	89 23       	and	r24, r25
    18d2:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    18d4:	88 89       	ldd	r24, Y+16	; 0x10
    18d6:	99 89       	ldd	r25, Y+17	; 0x11
    18d8:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    18dc:	98 2f       	mov	r25, r24
    18de:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e0:	89 23       	and	r24, r25
    18e2:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, command);			/* Send the lower command nibble */
    18e4:	88 89       	ldd	r24, Y+16	; 0x10
    18e6:	99 89       	ldd	r25, Y+17	; 0x11
    18e8:	6a 89       	ldd	r22, Y+18	; 0x12
    18ea:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    18ee:	98 2f       	mov	r25, r24
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	89 23       	and	r24, r25
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    18f6:	88 89       	ldd	r24, Y+16	; 0x10
    18f8:	99 89       	ldd	r25, Y+17	; 0x11
    18fa:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    18fe:	98 2f       	mov	r25, r24
    1900:	8f 85       	ldd	r24, Y+15	; 0x0f
    1902:	89 23       	and	r24, r25
    1904:	8f 87       	std	Y+15, r24	; 0x0f
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e4       	ldi	r27, 0x40	; 64
    190e:	8b 87       	std	Y+11, r24	; 0x0b
    1910:	9c 87       	std	Y+12, r25	; 0x0c
    1912:	ad 87       	std	Y+13, r26	; 0x0d
    1914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a e7       	ldi	r20, 0x7A	; 122
    1924:	55 e4       	ldi	r21, 0x45	; 69
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	98 87       	std	Y+8, r25	; 0x08
    1932:	a9 87       	std	Y+9, r26	; 0x09
    1934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <LCD_4bit_sendCommand+0xda>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <LCD_4bit_sendCommand+0x158>
	else if (__tmp > 65535)
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <LCD_4bit_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6b 85       	ldd	r22, Y+11	; 0x0b
    1972:	7c 85       	ldd	r23, Y+12	; 0x0c
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_4bit_sendCommand+0x13a>
    199a:	80 e9       	ldi	r24, 0x90	; 144
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_4bit_sendCommand+0x128>
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_4bit_sendCommand+0x11c>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <LCD_4bit_sendCommand+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_4bit_sendCommand+0x164>
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}
	return error_status;
    19ea:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    19ec:	62 96       	adiw	r28, 0x12	; 18
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <LCD_4bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendChar(const lcd_4bit_t *lcd, uint8 _char)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	62 97       	sbiw	r28, 0x12	; 18
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	99 8b       	std	Y+17, r25	; 0x11
    1a14:	88 8b       	std	Y+16, r24	; 0x10
    1a16:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    1a1c:	88 89       	ldd	r24, Y+16	; 0x10
    1a1e:	99 89       	ldd	r25, Y+17	; 0x11
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <LCD_4bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    1a24:	1f 86       	std	Y+15, r1	; 0x0f
    1a26:	a1 c0       	rjmp	.+322    	; 0x1b6a <LCD_4bit_sendChar+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    1a28:	88 89       	ldd	r24, Y+16	; 0x10
    1a2a:	99 89       	ldd	r25, Y+17	; 0x11
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    1a32:	98 2f       	mov	r25, r24
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	89 23       	and	r24, r25
    1a38:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    1a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	22 95       	swap	r18
    1a40:	2f 70       	andi	r18, 0x0F	; 15
    1a42:	88 89       	ldd	r24, Y+16	; 0x10
    1a44:	99 89       	ldd	r25, Y+17	; 0x11
    1a46:	62 2f       	mov	r22, r18
    1a48:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a50:	89 23       	and	r24, r25
    1a52:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1a54:	88 89       	ldd	r24, Y+16	; 0x10
    1a56:	99 89       	ldd	r25, Y+17	; 0x11
    1a58:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a60:	89 23       	and	r24, r25
    1a62:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    1a64:	88 89       	ldd	r24, Y+16	; 0x10
    1a66:	99 89       	ldd	r25, Y+17	; 0x11
    1a68:	6a 89       	ldd	r22, Y+18	; 0x12
    1a6a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    1a6e:	98 2f       	mov	r25, r24
    1a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a72:	89 23       	and	r24, r25
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1a76:	88 89       	ldd	r24, Y+16	; 0x10
    1a78:	99 89       	ldd	r25, Y+17	; 0x11
    1a7a:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    1a7e:	98 2f       	mov	r25, r24
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	89 23       	and	r24, r25
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e4       	ldi	r27, 0x40	; 64
    1a8e:	8b 87       	std	Y+11, r24	; 0x0b
    1a90:	9c 87       	std	Y+12, r25	; 0x0c
    1a92:	ad 87       	std	Y+13, r26	; 0x0d
    1a94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a e7       	ldi	r20, 0x7A	; 122
    1aa4:	55 e4       	ldi	r21, 0x45	; 69
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8f 83       	std	Y+7, r24	; 0x07
    1ab0:	98 87       	std	Y+8, r25	; 0x08
    1ab2:	a9 87       	std	Y+9, r26	; 0x09
    1ab4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <LCD_4bit_sendChar+0xda>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <LCD_4bit_sendChar+0x158>
	else if (__tmp > 65535)
    1ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ada:	78 85       	ldd	r23, Y+8	; 0x08
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <LCD_4bit_sendChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <LCD_4bit_sendChar+0x13a>
    1b1a:	80 e9       	ldi	r24, 0x90	; 144
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_4bit_sendChar+0x128>
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <LCD_4bit_sendChar+0x11c>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <LCD_4bit_sendChar+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	9a 81       	ldd	r25, Y+2	; 0x02
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_4bit_sendChar+0x164>
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b6c:	62 96       	adiw	r28, 0x12	; 18
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <LCD_4bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCharAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	64 97       	sbiw	r28, 0x14	; 20
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	99 8b       	std	Y+17, r25	; 0x11
    1b94:	88 8b       	std	Y+16, r24	; 0x10
    1b96:	6a 8b       	std	Y+18, r22	; 0x12
    1b98:	4b 8b       	std	Y+19, r20	; 0x13
    1b9a:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    1ba0:	88 89       	ldd	r24, Y+16	; 0x10
    1ba2:	99 89       	ldd	r25, Y+17	; 0x11
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <LCD_4bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    1ba8:	1f 86       	std	Y+15, r1	; 0x0f
    1baa:	a7 c0       	rjmp	.+334    	; 0x1cfa <LCD_4bit_sendCharAtPosition+0x17c>
	}
	else
	{

		/* set cursor to the required position */
		LCD_4bit_setCursorLocation(lcd, row, col);
    1bac:	88 89       	ldd	r24, Y+16	; 0x10
    1bae:	99 89       	ldd	r25, Y+17	; 0x11
    1bb0:	6a 89       	ldd	r22, Y+18	; 0x12
    1bb2:	4b 89       	ldd	r20, Y+19	; 0x13
    1bb4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <LCD_4bit_setCursorLocation>

		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    1bb8:	88 89       	ldd	r24, Y+16	; 0x10
    1bba:	99 89       	ldd	r25, Y+17	; 0x11
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc6:	89 23       	and	r24, r25
    1bc8:	8f 87       	std	Y+15, r24	; 0x0f


		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    1bca:	8c 89       	ldd	r24, Y+20	; 0x14
    1bcc:	28 2f       	mov	r18, r24
    1bce:	22 95       	swap	r18
    1bd0:	2f 70       	andi	r18, 0x0F	; 15
    1bd2:	88 89       	ldd	r24, Y+16	; 0x10
    1bd4:	99 89       	ldd	r25, Y+17	; 0x11
    1bd6:	62 2f       	mov	r22, r18
    1bd8:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    1bdc:	98 2f       	mov	r25, r24
    1bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be0:	89 23       	and	r24, r25
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1be4:	88 89       	ldd	r24, Y+16	; 0x10
    1be6:	99 89       	ldd	r25, Y+17	; 0x11
    1be8:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    1bec:	98 2f       	mov	r25, r24
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	89 23       	and	r24, r25
    1bf2:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    1bf4:	88 89       	ldd	r24, Y+16	; 0x10
    1bf6:	99 89       	ldd	r25, Y+17	; 0x11
    1bf8:	6c 89       	ldd	r22, Y+20	; 0x14
    1bfa:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_send4Bits>
    1bfe:	98 2f       	mov	r25, r24
    1c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c02:	89 23       	and	r24, r25
    1c04:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1c06:	88 89       	ldd	r24, Y+16	; 0x10
    1c08:	99 89       	ldd	r25, Y+17	; 0x11
    1c0a:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_4bit_genEnablePulse>
    1c0e:	98 2f       	mov	r25, r24
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	89 23       	and	r24, r25
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e4       	ldi	r27, 0x40	; 64
    1c1e:	8b 87       	std	Y+11, r24	; 0x0b
    1c20:	9c 87       	std	Y+12, r25	; 0x0c
    1c22:	ad 87       	std	Y+13, r26	; 0x0d
    1c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a e7       	ldi	r20, 0x7A	; 122
    1c34:	55 e4       	ldi	r21, 0x45	; 69
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8f 83       	std	Y+7, r24	; 0x07
    1c40:	98 87       	std	Y+8, r25	; 0x08
    1c42:	a9 87       	std	Y+9, r26	; 0x09
    1c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <LCD_4bit_sendCharAtPosition+0xea>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <LCD_4bit_sendCharAtPosition+0x168>
	else if (__tmp > 65535)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	4c f5       	brge	.+82     	; 0x1cd2 <LCD_4bit_sendCharAtPosition+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <LCD_4bit_sendCharAtPosition+0x14a>
    1caa:	80 e9       	ldi	r24, 0x90	; 144
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_4bit_sendCharAtPosition+0x138>
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f7       	brne	.-38     	; 0x1caa <LCD_4bit_sendCharAtPosition+0x12c>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <LCD_4bit_sendCharAtPosition+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_4bit_sendCharAtPosition+0x174>
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    1cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1cfc:	64 96       	adiw	r28, 0x14	; 20
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <LCD_4bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendString(const lcd_4bit_t *lcd, uint8 * str)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <LCD_4bit_sendString+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <LCD_4bit_sendString+0x8>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9b 83       	std	Y+3, r25	; 0x03
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	7d 83       	std	Y+5, r23	; 0x05
    1d22:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <LCD_4bit_sendString+0x2a>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	79 f4       	brne	.+30     	; 0x1d56 <LCD_4bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    1d38:	19 82       	std	Y+1, r1	; 0x01
    1d3a:	12 c0       	rjmp	.+36     	; 0x1d60 <LCD_4bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    1d3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d40:	20 81       	ld	r18, Z
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	9d 83       	std	Y+5, r25	; 0x05
    1d4a:	8c 83       	std	Y+4, r24	; 0x04
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	62 2f       	mov	r22, r18
    1d52:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_4bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    1d56:	ec 81       	ldd	r30, Y+4	; 0x04
    1d58:	fd 81       	ldd	r31, Y+5	; 0x05
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 23       	and	r24, r24
    1d5e:	71 f7       	brne	.-36     	; 0x1d3c <LCD_4bit_sendString+0x2e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <LCD_4bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendStringAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	27 97       	sbiw	r28, 0x07	; 7
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	9b 83       	std	Y+3, r25	; 0x03
    1d88:	8a 83       	std	Y+2, r24	; 0x02
    1d8a:	6c 83       	std	Y+4, r22	; 0x04
    1d8c:	4d 83       	std	Y+5, r20	; 0x05
    1d8e:	3f 83       	std	Y+7, r19	; 0x07
    1d90:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	21 f0       	breq	.+8      	; 0x1da6 <LCD_4bit_sendStringAtPosition+0x34>
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	9f 81       	ldd	r25, Y+7	; 0x07
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	11 f4       	brne	.+4      	; 0x1daa <LCD_4bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    1da6:	19 82       	std	Y+1, r1	; 0x01
    1da8:	1d c0       	rjmp	.+58     	; 0x1de4 <LCD_4bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	6c 81       	ldd	r22, Y+4	; 0x04
    1db0:	4d 81       	ldd	r20, Y+5	; 0x05
    1db2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <LCD_4bit_setCursorLocation>
    1db6:	98 2f       	mov	r25, r24
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	89 23       	and	r24, r25
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	0d c0       	rjmp	.+26     	; 0x1dda <LCD_4bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    1dc0:	ee 81       	ldd	r30, Y+6	; 0x06
    1dc2:	ff 81       	ldd	r31, Y+7	; 0x07
    1dc4:	20 81       	ld	r18, Z
    1dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	9f 83       	std	Y+7, r25	; 0x07
    1dce:	8e 83       	std	Y+6, r24	; 0x06
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd4:	62 2f       	mov	r22, r18
    1dd6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_4bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
		while(*str)
    1dda:	ee 81       	ldd	r30, Y+6	; 0x06
    1ddc:	ff 81       	ldd	r31, Y+7	; 0x07
    1dde:	80 81       	ld	r24, Z
    1de0:	88 23       	and	r24, r24
    1de2:	71 f7       	brne	.-36     	; 0x1dc0 <LCD_4bit_sendStringAtPosition+0x4e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de6:	27 96       	adiw	r28, 0x07	; 7
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <LCD_4bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCustomCharAtPosition(const lcd_4bit_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    1df8:	0f 93       	push	r16
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	29 97       	sbiw	r28, 0x09	; 9
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	7e 83       	std	Y+6, r23	; 0x06
    1e14:	6d 83       	std	Y+5, r22	; 0x05
    1e16:	4f 83       	std	Y+7, r20	; 0x07
    1e18:	28 87       	std	Y+8, r18	; 0x08
    1e1a:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <LCD_4bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    1e28:	1a 82       	std	Y+2, r1	; 0x02
    1e2a:	36 c0       	rjmp	.+108    	; 0x1e98 <LCD_4bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	08 96       	adiw	r24, 0x08	; 8
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	28 2f       	mov	r18, r24
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	62 2f       	mov	r22, r18
    1e48:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    1e4c:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	15 c0       	rjmp	.+42     	; 0x1e7c <LCD_4bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	20 81       	ld	r18, Z
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	62 2f       	mov	r22, r18
    1e6a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_4bit_sendChar>
    1e6e:	98 2f       	mov	r25, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	89 23       	and	r24, r25
    1e74:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	88 30       	cpi	r24, 0x08	; 8
    1e80:	40 f3       	brcs	.-48     	; 0x1e52 <LCD_4bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_4bit_sendCharAtPosition(lcd, row, col, mem_position);
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	48 85       	ldd	r20, Y+8	; 0x08
    1e8a:	29 85       	ldd	r18, Y+9	; 0x09
    1e8c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_4bit_sendCharAtPosition>
    1e90:	98 2f       	mov	r25, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	89 23       	and	r24, r25
    1e96:	8a 83       	std	Y+2, r24	; 0x02
	}

	return error_status;
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e9a:	29 96       	adiw	r28, 0x09	; 9
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <LCD_4bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendNum(const lcd_4bit_t *lcd, uint32 num)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	63 97       	sbiw	r28, 0x13	; 19
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	9f 87       	std	Y+15, r25	; 0x0f
    1ec4:	8e 87       	std	Y+14, r24	; 0x0e
    1ec6:	48 8b       	std	Y+16, r20	; 0x10
    1ec8:	59 8b       	std	Y+17, r21	; 0x11
    1eca:	6a 8b       	std	Y+18, r22	; 0x12
    1ecc:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    1ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <LCD_4bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	19 c0       	rjmp	.+50     	; 0x1f10 <LCD_4bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    1ede:	88 89       	ldd	r24, Y+16	; 0x10
    1ee0:	99 89       	ldd	r25, Y+17	; 0x11
    1ee2:	aa 89       	ldd	r26, Y+18	; 0x12
    1ee4:	bb 89       	ldd	r27, Y+19	; 0x13
    1ee6:	9e 01       	movw	r18, r28
    1ee8:	2e 5f       	subi	r18, 0xFE	; 254
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	a9 01       	movw	r20, r18
    1ef2:	0e 94 2a 18 	call	0x3054	; 0x3054 <numToStr>
    1ef6:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_4bit_sendString(lcd, str);			/* send the string to the LCD */
    1ef8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efc:	9e 01       	movw	r18, r28
    1efe:	2e 5f       	subi	r18, 0xFE	; 254
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	b9 01       	movw	r22, r18
    1f04:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_4bit_sendString>
    1f08:	98 2f       	mov	r25, r24
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	89 23       	and	r24, r25
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f12:	63 96       	adiw	r28, 0x13	; 19
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <LCD_8bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_init(const lcd_8bit_t *lcd)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	e8 97       	sbiw	r28, 0x38	; 56
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	98 af       	std	Y+56, r25	; 0x38
    1f3a:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    1f40:	8f a9       	ldd	r24, Y+55	; 0x37
    1f42:	98 ad       	ldd	r25, Y+56	; 0x38
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <LCD_8bit_init+0x28>
	{
		error_status = E_NOT_OK;
    1f48:	1e aa       	std	Y+54, r1	; 0x36
    1f4a:	01 c2       	rjmp	.+1026   	; 0x234e <LCD_8bit_init+0x42a>
	}
	else
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    1f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    1f56:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    1f58:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    1f64:	98 2f       	mov	r25, r24
    1f66:	8e a9       	ldd	r24, Y+54	; 0x36
    1f68:	89 23       	and	r24, r25
    1f6a:	8e ab       	std	Y+54, r24	; 0x36

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    1f6c:	1d aa       	std	Y+53, r1	; 0x35
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <LCD_8bit_init+0x74>
		{
			/* make all 8 data pins output pins */
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	9c 01       	movw	r18, r24
    1f76:	2e 5f       	subi	r18, 0xFE	; 254
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	8d a9       	ldd	r24, Y+53	; 0x35
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	82 0f       	add	r24, r18
    1f82:	93 1f       	adc	r25, r19
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	8e a9       	ldd	r24, Y+54	; 0x36
    1f8e:	89 23       	and	r24, r25
    1f90:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    1f92:	8d a9       	ldd	r24, Y+53	; 0x35
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	8d ab       	std	Y+53, r24	; 0x35
    1f98:	8d a9       	ldd	r24, Y+53	; 0x35
    1f9a:	88 30       	cpi	r24, 0x08	; 8
    1f9c:	48 f3       	brcs	.-46     	; 0x1f70 <LCD_8bit_init+0x4c>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fa4:	b1 e4       	ldi	r27, 0x41	; 65
    1fa6:	89 ab       	std	Y+49, r24	; 0x31
    1fa8:	9a ab       	std	Y+50, r25	; 0x32
    1faa:	ab ab       	std	Y+51, r26	; 0x33
    1fac:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	55 e4       	ldi	r21, 0x45	; 69
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8d a7       	std	Y+45, r24	; 0x2d
    1fc8:	9e a7       	std	Y+46, r25	; 0x2e
    1fca:	af a7       	std	Y+47, r26	; 0x2f
    1fcc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1fce:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fd0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_8bit_init+0xcc>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9c a7       	std	Y+44, r25	; 0x2c
    1fec:	8b a7       	std	Y+43, r24	; 0x2b
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <LCD_8bit_init+0x14a>
	else if (__tmp > 65535)
    1ff0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ff2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <LCD_8bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	69 a9       	ldd	r22, Y+49	; 0x31
    200a:	7a a9       	ldd	r23, Y+50	; 0x32
    200c:	8b a9       	ldd	r24, Y+51	; 0x33
    200e:	9c a9       	ldd	r25, Y+52	; 0x34
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <LCD_8bit_init+0x12c>
    2032:	80 e9       	ldi	r24, 0x90	; 144
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	9a a7       	std	Y+42, r25	; 0x2a
    2038:	89 a7       	std	Y+41, r24	; 0x29
    203a:	89 a5       	ldd	r24, Y+41	; 0x29
    203c:	9a a5       	ldd	r25, Y+42	; 0x2a
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_8bit_init+0x11a>
    2042:	9a a7       	std	Y+42, r25	; 0x2a
    2044:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8b a5       	ldd	r24, Y+43	; 0x2b
    2048:	9c a5       	ldd	r25, Y+44	; 0x2c
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9c a7       	std	Y+44, r25	; 0x2c
    204e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8b a5       	ldd	r24, Y+43	; 0x2b
    2052:	9c a5       	ldd	r25, Y+44	; 0x2c
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <LCD_8bit_init+0x10e>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <LCD_8bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6d a5       	ldd	r22, Y+45	; 0x2d
    205c:	7e a5       	ldd	r23, Y+46	; 0x2e
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9c a7       	std	Y+44, r25	; 0x2c
    206c:	8b a7       	std	Y+43, r24	; 0x2b
    206e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2070:	9c a5       	ldd	r25, Y+44	; 0x2c
    2072:	98 a7       	std	Y+40, r25	; 0x28
    2074:	8f a3       	std	Y+39, r24	; 0x27
    2076:	8f a1       	ldd	r24, Y+39	; 0x27
    2078:	98 a5       	ldd	r25, Y+40	; 0x28
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_8bit_init+0x156>
    207e:	98 a7       	std	Y+40, r25	; 0x28
    2080:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE); /* set 8 bit mode 2 line */
    2082:	8f a9       	ldd	r24, Y+55	; 0x37
    2084:	98 ad       	ldd	r25, Y+56	; 0x38
    2086:	68 e3       	ldi	r22, 0x38	; 56
    2088:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    208c:	98 2f       	mov	r25, r24
    208e:	8e a9       	ldd	r24, Y+54	; 0x36
    2090:	89 23       	and	r24, r25
    2092:	8e ab       	std	Y+54, r24	; 0x36
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 ea       	ldi	r26, 0xA0	; 160
    209a:	b0 e4       	ldi	r27, 0x40	; 64
    209c:	8b a3       	std	Y+35, r24	; 0x23
    209e:	9c a3       	std	Y+36, r25	; 0x24
    20a0:	ad a3       	std	Y+37, r26	; 0x25
    20a2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8f 8f       	std	Y+31, r24	; 0x1f
    20be:	98 a3       	std	Y+32, r25	; 0x20
    20c0:	a9 a3       	std	Y+33, r26	; 0x21
    20c2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    20c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20c6:	78 a1       	ldd	r23, Y+32	; 0x20
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LCD_8bit_init+0x1c2>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9e 8f       	std	Y+30, r25	; 0x1e
    20e2:	8d 8f       	std	Y+29, r24	; 0x1d
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LCD_8bit_init+0x240>
	else if (__tmp > 65535)
    20e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20e8:	78 a1       	ldd	r23, Y+32	; 0x20
    20ea:	89 a1       	ldd	r24, Y+33	; 0x21
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LCD_8bit_init+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2100:	7c a1       	ldd	r23, Y+36	; 0x24
    2102:	8d a1       	ldd	r24, Y+37	; 0x25
    2104:	9e a1       	ldd	r25, Y+38	; 0x26
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_8bit_init+0x222>
    2128:	80 e9       	ldi	r24, 0x90	; 144
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	9c 8f       	std	Y+28, r25	; 0x1c
    212e:	8b 8f       	std	Y+27, r24	; 0x1b
    2130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_8bit_init+0x210>
    2138:	9c 8f       	std	Y+28, r25	; 0x1c
    213a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LCD_8bit_init+0x204>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LCD_8bit_init+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2152:	78 a1       	ldd	r23, Y+32	; 0x20
    2154:	89 a1       	ldd	r24, Y+33	; 0x21
    2156:	9a a1       	ldd	r25, Y+34	; 0x22
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 8f       	std	Y+30, r25	; 0x1e
    2162:	8d 8f       	std	Y+29, r24	; 0x1d
    2164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2166:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2168:	9a 8f       	std	Y+26, r25	; 0x1a
    216a:	89 8f       	std	Y+25, r24	; 0x19
    216c:	89 8d       	ldd	r24, Y+25	; 0x19
    216e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_8bit_init+0x24c>
    2174:	9a 8f       	std	Y+26, r25	; 0x1a
    2176:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2178:	8f a9       	ldd	r24, Y+55	; 0x37
    217a:	98 ad       	ldd	r25, Y+56	; 0x38
    217c:	68 e3       	ldi	r22, 0x38	; 56
    217e:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2182:	98 2f       	mov	r25, r24
    2184:	8e a9       	ldd	r24, Y+54	; 0x36
    2186:	89 23       	and	r24, r25
    2188:	8e ab       	std	Y+54, r24	; 0x36
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a6 e1       	ldi	r26, 0x16	; 22
    2190:	b3 e4       	ldi	r27, 0x43	; 67
    2192:	8d 8b       	std	Y+21, r24	; 0x15
    2194:	9e 8b       	std	Y+22, r25	; 0x16
    2196:	af 8b       	std	Y+23, r26	; 0x17
    2198:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    219a:	6d 89       	ldd	r22, Y+21	; 0x15
    219c:	7e 89       	ldd	r23, Y+22	; 0x16
    219e:	8f 89       	ldd	r24, Y+23	; 0x17
    21a0:	98 8d       	ldd	r25, Y+24	; 0x18
    21a2:	2b ea       	ldi	r18, 0xAB	; 171
    21a4:	3a ea       	ldi	r19, 0xAA	; 170
    21a6:	4a ea       	ldi	r20, 0xAA	; 170
    21a8:	50 e4       	ldi	r21, 0x40	; 64
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	9a 8b       	std	Y+18, r25	; 0x12
    21b6:	ab 8b       	std	Y+19, r26	; 0x13
    21b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ba:	69 89       	ldd	r22, Y+17	; 0x11
    21bc:	7a 89       	ldd	r23, Y+18	; 0x12
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	1c f4       	brge	.+6      	; 0x21d8 <LCD_8bit_init+0x2b4>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	88 8b       	std	Y+16, r24	; 0x10
    21d6:	91 c0       	rjmp	.+290    	; 0x22fa <LCD_8bit_init+0x3d6>
	else if (__tmp > 255)
    21d8:	69 89       	ldd	r22, Y+17	; 0x11
    21da:	7a 89       	ldd	r23, Y+18	; 0x12
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <LCD_8bit_init+0x2ce>
    21f0:	7b c0       	rjmp	.+246    	; 0x22e8 <LCD_8bit_init+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    21f2:	6d 89       	ldd	r22, Y+21	; 0x15
    21f4:	7e 89       	ldd	r23, Y+22	; 0x16
    21f6:	8f 89       	ldd	r24, Y+23	; 0x17
    21f8:	98 8d       	ldd	r25, Y+24	; 0x18
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a e7       	ldi	r20, 0x7A	; 122
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8c 87       	std	Y+12, r24	; 0x0c
    220c:	9d 87       	std	Y+13, r25	; 0x0d
    220e:	ae 87       	std	Y+14, r26	; 0x0e
    2210:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	6c 85       	ldd	r22, Y+12	; 0x0c
    2214:	7d 85       	ldd	r23, Y+13	; 0x0d
    2216:	8e 85       	ldd	r24, Y+14	; 0x0e
    2218:	9f 85       	ldd	r25, Y+15	; 0x0f
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a e7       	ldi	r20, 0x7A	; 122
    2220:	55 e4       	ldi	r21, 0x45	; 69
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	88 87       	std	Y+8, r24	; 0x08
    222c:	99 87       	std	Y+9, r25	; 0x09
    222e:	aa 87       	std	Y+10, r26	; 0x0a
    2230:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2232:	68 85       	ldd	r22, Y+8	; 0x08
    2234:	79 85       	ldd	r23, Y+9	; 0x09
    2236:	8a 85       	ldd	r24, Y+10	; 0x0a
    2238:	9b 85       	ldd	r25, Y+11	; 0x0b
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <LCD_8bit_init+0x330>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9f 83       	std	Y+7, r25	; 0x07
    2250:	8e 83       	std	Y+6, r24	; 0x06
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <LCD_8bit_init+0x3ae>
	else if (__tmp > 65535)
    2254:	68 85       	ldd	r22, Y+8	; 0x08
    2256:	79 85       	ldd	r23, Y+9	; 0x09
    2258:	8a 85       	ldd	r24, Y+10	; 0x0a
    225a:	9b 85       	ldd	r25, Y+11	; 0x0b
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <LCD_8bit_init+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	6c 85       	ldd	r22, Y+12	; 0x0c
    226e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2270:	8e 85       	ldd	r24, Y+14	; 0x0e
    2272:	9f 85       	ldd	r25, Y+15	; 0x0f
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9f 83       	std	Y+7, r25	; 0x07
    2292:	8e 83       	std	Y+6, r24	; 0x06
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <LCD_8bit_init+0x390>
    2296:	80 e9       	ldi	r24, 0x90	; 144
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	9d 83       	std	Y+5, r25	; 0x05
    229c:	8c 83       	std	Y+4, r24	; 0x04
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_8bit_init+0x37e>
    22a6:	9d 83       	std	Y+5, r25	; 0x05
    22a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8e 81       	ldd	r24, Y+6	; 0x06
    22ac:	9f 81       	ldd	r25, Y+7	; 0x07
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9f 83       	std	Y+7, r25	; 0x07
    22b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <LCD_8bit_init+0x372>
    22bc:	24 c0       	rjmp	.+72     	; 0x2306 <LCD_8bit_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	68 85       	ldd	r22, Y+8	; 0x08
    22c0:	79 85       	ldd	r23, Y+9	; 0x09
    22c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9f 83       	std	Y+7, r25	; 0x07
    22d0:	8e 83       	std	Y+6, r24	; 0x06
    22d2:	8e 81       	ldd	r24, Y+6	; 0x06
    22d4:	9f 81       	ldd	r25, Y+7	; 0x07
    22d6:	9b 83       	std	Y+3, r25	; 0x03
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_8bit_init+0x3ba>
    22e2:	9b 83       	std	Y+3, r25	; 0x03
    22e4:	8a 83       	std	Y+2, r24	; 0x02
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <LCD_8bit_init+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22e8:	69 89       	ldd	r22, Y+17	; 0x11
    22ea:	7a 89       	ldd	r23, Y+18	; 0x12
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	88 8b       	std	Y+16, r24	; 0x10
    22fa:	88 89       	ldd	r24, Y+16	; 0x10
    22fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	8a 95       	dec	r24
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_8bit_init+0x3dc>
    2304:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2306:	8f a9       	ldd	r24, Y+55	; 0x37
    2308:	98 ad       	ldd	r25, Y+56	; 0x38
    230a:	68 e3       	ldi	r22, 0x38	; 56
    230c:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2310:	98 2f       	mov	r25, r24
    2312:	8e a9       	ldd	r24, Y+54	; 0x36
    2314:	89 23       	and	r24, r25
    2316:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CLEAR);			  /* clear LCD */
    2318:	8f a9       	ldd	r24, Y+55	; 0x37
    231a:	98 ad       	ldd	r25, Y+56	; 0x38
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2322:	98 2f       	mov	r25, r24
    2324:	8e a9       	ldd	r24, Y+54	; 0x36
    2326:	89 23       	and	r24, r25
    2328:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_ENTRY_MODE);		  /* increment cursor mode */
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	66 e0       	ldi	r22, 0x06	; 6
    2330:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2334:	98 2f       	mov	r25, r24
    2336:	8e a9       	ldd	r24, Y+54	; 0x36
    2338:	89 23       	and	r24, r25
    233a:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    233c:	8f a9       	ldd	r24, Y+55	; 0x37
    233e:	98 ad       	ldd	r25, Y+56	; 0x38
    2340:	6c e0       	ldi	r22, 0x0C	; 12
    2342:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2346:	98 2f       	mov	r25, r24
    2348:	8e a9       	ldd	r24, Y+54	; 0x36
    234a:	89 23       	and	r24, r25
    234c:	8e ab       	std	Y+54, r24	; 0x36
	}

	return error_status;
    234e:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2350:	e8 96       	adiw	r28, 0x38	; 56
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <LCD_8bit_clear>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_clear(const lcd_8bit_t *lcd)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <LCD_8bit_clear+0x6>
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	9b 83       	std	Y+3, r25	; 0x03
    2370:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	9b 81       	ldd	r25, Y+3	; 0x03
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	11 f4       	brne	.+4      	; 0x2382 <LCD_8bit_clear+0x20>
	{
		error_status = E_NOT_OK;
    237e:	19 82       	std	Y+1, r1	; 0x01
    2380:	05 c0       	rjmp	.+10     	; 0x238c <LCD_8bit_clear+0x2a>
	}
	else
	{
		LCD_8bit_sendCommand(lcd, _LCD_CLEAR);
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
	}
	return error_status;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_8bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCommand(const lcd_8bit_t *lcd, uint8 command)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	63 97       	sbiw	r28, 0x13	; 19
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	9a 8b       	std	Y+18, r25	; 0x12
    23b0:	89 8b       	std	Y+17, r24	; 0x11
    23b2:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    23b8:	89 89       	ldd	r24, Y+17	; 0x11
    23ba:	9a 89       	ldd	r25, Y+18	; 0x12
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	11 f4       	brne	.+4      	; 0x23c4 <LCD_8bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    23c0:	18 8a       	std	Y+16, r1	; 0x10
    23c2:	a9 c0       	rjmp	.+338    	; 0x2516 <LCD_8bit_sendCommand+0x17c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    23c4:	89 89       	ldd	r24, Y+17	; 0x11
    23c6:	9a 89       	ldd	r25, Y+18	; 0x12
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    23ce:	98 2f       	mov	r25, r24
    23d0:	88 89       	ldd	r24, Y+16	; 0x10
    23d2:	89 23       	and	r24, r25
    23d4:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    23d6:	1f 86       	std	Y+15, r1	; 0x0f
    23d8:	25 c0       	rjmp	.+74     	; 0x2424 <LCD_8bit_sendCommand+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
    23da:	89 89       	ldd	r24, Y+17	; 0x11
    23dc:	9a 89       	ldd	r25, Y+18	; 0x12
    23de:	9c 01       	movw	r18, r24
    23e0:	2e 5f       	subi	r18, 0xFE	; 254
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a9 01       	movw	r20, r18
    23ec:	48 0f       	add	r20, r24
    23ee:	59 1f       	adc	r21, r25
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	b9 01       	movw	r22, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <LCD_8bit_sendCommand+0x6a>
    2400:	75 95       	asr	r23
    2402:	67 95       	ror	r22
    2404:	8a 95       	dec	r24
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <LCD_8bit_sendCommand+0x66>
    2408:	cb 01       	movw	r24, r22
    240a:	28 2f       	mov	r18, r24
    240c:	21 70       	andi	r18, 0x01	; 1
    240e:	ca 01       	movw	r24, r20
    2410:	62 2f       	mov	r22, r18
    2412:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2416:	98 2f       	mov	r25, r24
    2418:	88 89       	ldd	r24, Y+16	; 0x10
    241a:	89 23       	and	r24, r25
    241c:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    241e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	8f 87       	std	Y+15, r24	; 0x0f
    2424:	8f 85       	ldd	r24, Y+15	; 0x0f
    2426:	88 30       	cpi	r24, 0x08	; 8
    2428:	c0 f2       	brcs	.-80     	; 0x23da <LCD_8bit_sendCommand+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_8bit_genEnablePulse>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e0       	ldi	r26, 0x00	; 0
    2438:	b0 e4       	ldi	r27, 0x40	; 64
    243a:	8b 87       	std	Y+11, r24	; 0x0b
    243c:	9c 87       	std	Y+12, r25	; 0x0c
    243e:	ad 87       	std	Y+13, r26	; 0x0d
    2440:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	55 e4       	ldi	r21, 0x45	; 69
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8f 83       	std	Y+7, r24	; 0x07
    245c:	98 87       	std	Y+8, r25	; 0x08
    245e:	a9 87       	std	Y+9, r26	; 0x09
    2460:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <LCD_8bit_sendCommand+0xea>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <LCD_8bit_sendCommand+0x168>
	else if (__tmp > 65535)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <LCD_8bit_sendCommand+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6b 85       	ldd	r22, Y+11	; 0x0b
    249e:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_8bit_sendCommand+0x14a>
    24c6:	80 e9       	ldi	r24, 0x90	; 144
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_8bit_sendCommand+0x138>
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <LCD_8bit_sendCommand+0x12c>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <LCD_8bit_sendCommand+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_8bit_sendCommand+0x174>
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    2516:	88 89       	ldd	r24, Y+16	; 0x10
}
    2518:	63 96       	adiw	r28, 0x13	; 19
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <LCD_8bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendChar(const lcd_8bit_t *lcd, uint8 _char)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	63 97       	sbiw	r28, 0x13	; 19
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	9a 8b       	std	Y+18, r25	; 0x12
    2540:	89 8b       	std	Y+17, r24	; 0x11
    2542:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    2548:	89 89       	ldd	r24, Y+17	; 0x11
    254a:	9a 89       	ldd	r25, Y+18	; 0x12
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	11 f4       	brne	.+4      	; 0x2554 <LCD_8bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    2550:	18 8a       	std	Y+16, r1	; 0x10
    2552:	a9 c0       	rjmp	.+338    	; 0x26a6 <LCD_8bit_sendChar+0x17c>
	}
	else
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    2554:	89 89       	ldd	r24, Y+17	; 0x11
    2556:	9a 89       	ldd	r25, Y+18	; 0x12
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    255e:	98 2f       	mov	r25, r24
    2560:	88 89       	ldd	r24, Y+16	; 0x10
    2562:	89 23       	and	r24, r25
    2564:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2566:	1f 86       	std	Y+15, r1	; 0x0f
    2568:	25 c0       	rjmp	.+74     	; 0x25b4 <LCD_8bit_sendChar+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
    256a:	89 89       	ldd	r24, Y+17	; 0x11
    256c:	9a 89       	ldd	r25, Y+18	; 0x12
    256e:	9c 01       	movw	r18, r24
    2570:	2e 5f       	subi	r18, 0xFE	; 254
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	8f 85       	ldd	r24, Y+15	; 0x0f
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a9 01       	movw	r20, r18
    257c:	48 0f       	add	r20, r24
    257e:	59 1f       	adc	r21, r25
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	8f 85       	ldd	r24, Y+15	; 0x0f
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	b9 01       	movw	r22, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <LCD_8bit_sendChar+0x6a>
    2590:	75 95       	asr	r23
    2592:	67 95       	ror	r22
    2594:	8a 95       	dec	r24
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <LCD_8bit_sendChar+0x66>
    2598:	cb 01       	movw	r24, r22
    259a:	28 2f       	mov	r18, r24
    259c:	21 70       	andi	r18, 0x01	; 1
    259e:	ca 01       	movw	r24, r20
    25a0:	62 2f       	mov	r22, r18
    25a2:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    25a6:	98 2f       	mov	r25, r24
    25a8:	88 89       	ldd	r24, Y+16	; 0x10
    25aa:	89 23       	and	r24, r25
    25ac:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    25ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
    25b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b6:	88 30       	cpi	r24, 0x08	; 8
    25b8:	c0 f2       	brcs	.-80     	; 0x256a <LCD_8bit_sendChar+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    25ba:	89 89       	ldd	r24, Y+17	; 0x11
    25bc:	9a 89       	ldd	r25, Y+18	; 0x12
    25be:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_8bit_genEnablePulse>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e4       	ldi	r27, 0x40	; 64
    25ca:	8b 87       	std	Y+11, r24	; 0x0b
    25cc:	9c 87       	std	Y+12, r25	; 0x0c
    25ce:	ad 87       	std	Y+13, r26	; 0x0d
    25d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a e7       	ldi	r20, 0x7A	; 122
    25e0:	55 e4       	ldi	r21, 0x45	; 69
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8f 83       	std	Y+7, r24	; 0x07
    25ec:	98 87       	std	Y+8, r25	; 0x08
    25ee:	a9 87       	std	Y+9, r26	; 0x09
    25f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	2c f4       	brge	.+10     	; 0x2614 <LCD_8bit_sendChar+0xea>
		__ticks = 1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <LCD_8bit_sendChar+0x168>
	else if (__tmp > 65535)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	4c f5       	brge	.+82     	; 0x267e <LCD_8bit_sendChar+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	6b 85       	ldd	r22, Y+11	; 0x0b
    262e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2630:	8d 85       	ldd	r24, Y+13	; 0x0d
    2632:	9e 85       	ldd	r25, Y+14	; 0x0e
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	51 e4       	ldi	r21, 0x41	; 65
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <LCD_8bit_sendChar+0x14a>
    2656:	80 e9       	ldi	r24, 0x90	; 144
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_8bit_sendChar+0x138>
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	69 f7       	brne	.-38     	; 0x2656 <LCD_8bit_sendChar+0x12c>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <LCD_8bit_sendChar+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9e 83       	std	Y+6, r25	; 0x06
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_8bit_sendChar+0x174>
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    26a6:	88 89       	ldd	r24, Y+16	; 0x10
}
    26a8:	63 96       	adiw	r28, 0x13	; 19
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <LCD_8bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCharAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	64 97       	sbiw	r28, 0x14	; 20
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	99 8b       	std	Y+17, r25	; 0x11
    26d0:	88 8b       	std	Y+16, r24	; 0x10
    26d2:	6a 8b       	std	Y+18, r22	; 0x12
    26d4:	4b 8b       	std	Y+19, r20	; 0x13
    26d6:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    26dc:	88 89       	ldd	r24, Y+16	; 0x10
    26de:	99 89       	ldd	r25, Y+17	; 0x11
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	11 f4       	brne	.+4      	; 0x26e8 <LCD_8bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    26e4:	1f 86       	std	Y+15, r1	; 0x0f
    26e6:	8a c0       	rjmp	.+276    	; 0x27fc <LCD_8bit_sendCharAtPosition+0x142>
	}
	else
	{
		/* set cursor to the required position */
		LCD_8bit_setCursorLocation(lcd, row, col);
    26e8:	88 89       	ldd	r24, Y+16	; 0x10
    26ea:	99 89       	ldd	r25, Y+17	; 0x11
    26ec:	6a 89       	ldd	r22, Y+18	; 0x12
    26ee:	4b 89       	ldd	r20, Y+19	; 0x13
    26f0:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <LCD_8bit_setCursorLocation>

		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    26f4:	88 89       	ldd	r24, Y+16	; 0x10
    26f6:	99 89       	ldd	r25, Y+17	; 0x11
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    26fe:	98 2f       	mov	r25, r24
    2700:	8f 85       	ldd	r24, Y+15	; 0x0f
    2702:	89 23       	and	r24, r25
    2704:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_8bit_sendChar(lcd, _char);
    2706:	88 89       	ldd	r24, Y+16	; 0x10
    2708:	99 89       	ldd	r25, Y+17	; 0x11
    270a:	6c 89       	ldd	r22, Y+20	; 0x14
    270c:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_8bit_sendChar>
    2710:	98 2f       	mov	r25, r24
    2712:	8f 85       	ldd	r24, Y+15	; 0x0f
    2714:	89 23       	and	r24, r25
    2716:	8f 87       	std	Y+15, r24	; 0x0f
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	b0 e4       	ldi	r27, 0x40	; 64
    2720:	8b 87       	std	Y+11, r24	; 0x0b
    2722:	9c 87       	std	Y+12, r25	; 0x0c
    2724:	ad 87       	std	Y+13, r26	; 0x0d
    2726:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6b 85       	ldd	r22, Y+11	; 0x0b
    272a:	7c 85       	ldd	r23, Y+12	; 0x0c
    272c:	8d 85       	ldd	r24, Y+13	; 0x0d
    272e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	55 e4       	ldi	r21, 0x45	; 69
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8f 83       	std	Y+7, r24	; 0x07
    2742:	98 87       	std	Y+8, r25	; 0x08
    2744:	a9 87       	std	Y+9, r26	; 0x09
    2746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <LCD_8bit_sendCharAtPosition+0xb0>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <LCD_8bit_sendCharAtPosition+0x12e>
	else if (__tmp > 65535)
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <LCD_8bit_sendCharAtPosition+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6b 85       	ldd	r22, Y+11	; 0x0b
    2784:	7c 85       	ldd	r23, Y+12	; 0x0c
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <LCD_8bit_sendCharAtPosition+0x110>
    27ac:	80 e9       	ldi	r24, 0x90	; 144
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_8bit_sendCharAtPosition+0xfe>
    27bc:	9c 83       	std	Y+4, r25	; 0x04
    27be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	9e 81       	ldd	r25, Y+6	; 0x06
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <LCD_8bit_sendCharAtPosition+0xf2>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <LCD_8bit_sendCharAtPosition+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	6f 81       	ldd	r22, Y+7	; 0x07
    27d6:	78 85       	ldd	r23, Y+8	; 0x08
    27d8:	89 85       	ldd	r24, Y+9	; 0x09
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_8bit_sendCharAtPosition+0x13a>
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}

	return error_status;
    27fc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    27fe:	64 96       	adiw	r28, 0x14	; 20
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_8bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendString(const lcd_8bit_t *lcd, uint8 * str)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <LCD_8bit_sendString+0x6>
    2816:	00 d0       	rcall	.+0      	; 0x2818 <LCD_8bit_sendString+0x8>
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9b 83       	std	Y+3, r25	; 0x03
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	7d 83       	std	Y+5, r23	; 0x05
    2824:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	9b 81       	ldd	r25, Y+3	; 0x03
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	21 f0       	breq	.+8      	; 0x283a <LCD_8bit_sendString+0x2a>
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	9d 81       	ldd	r25, Y+5	; 0x05
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	79 f4       	brne	.+30     	; 0x2858 <LCD_8bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    283a:	19 82       	std	Y+1, r1	; 0x01
    283c:	12 c0       	rjmp	.+36     	; 0x2862 <LCD_8bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    283e:	ec 81       	ldd	r30, Y+4	; 0x04
    2840:	fd 81       	ldd	r31, Y+5	; 0x05
    2842:	20 81       	ld	r18, Z
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	9d 83       	std	Y+5, r25	; 0x05
    284c:	8c 83       	std	Y+4, r24	; 0x04
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	62 2f       	mov	r22, r18
    2854:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_8bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    2858:	ec 81       	ldd	r30, Y+4	; 0x04
    285a:	fd 81       	ldd	r31, Y+5	; 0x05
    285c:	80 81       	ld	r24, Z
    285e:	88 23       	and	r24, r24
    2860:	71 f7       	brne	.-36     	; 0x283e <LCD_8bit_sendString+0x2e>
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}
	}

	return error_status;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <LCD_8bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendStringAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	27 97       	sbiw	r28, 0x07	; 7
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	9b 83       	std	Y+3, r25	; 0x03
    288a:	8a 83       	std	Y+2, r24	; 0x02
    288c:	6c 83       	std	Y+4, r22	; 0x04
    288e:	4d 83       	std	Y+5, r20	; 0x05
    2890:	3f 83       	std	Y+7, r19	; 0x07
    2892:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	21 f0       	breq	.+8      	; 0x28a8 <LCD_8bit_sendStringAtPosition+0x34>
    28a0:	8e 81       	ldd	r24, Y+6	; 0x06
    28a2:	9f 81       	ldd	r25, Y+7	; 0x07
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	11 f4       	brne	.+4      	; 0x28ac <LCD_8bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	1d c0       	rjmp	.+58     	; 0x28e6 <LCD_8bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	9b 81       	ldd	r25, Y+3	; 0x03
    28b0:	6c 81       	ldd	r22, Y+4	; 0x04
    28b2:	4d 81       	ldd	r20, Y+5	; 0x05
    28b4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <LCD_8bit_setCursorLocation>
    28b8:	98 2f       	mov	r25, r24
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	89 23       	and	r24, r25
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	0d c0       	rjmp	.+26     	; 0x28dc <LCD_8bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    28c2:	ee 81       	ldd	r30, Y+6	; 0x06
    28c4:	ff 81       	ldd	r31, Y+7	; 0x07
    28c6:	20 81       	ld	r18, Z
    28c8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ca:	9f 81       	ldd	r25, Y+7	; 0x07
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	9f 83       	std	Y+7, r25	; 0x07
    28d0:	8e 83       	std	Y+6, r24	; 0x06
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	9b 81       	ldd	r25, Y+3	; 0x03
    28d6:	62 2f       	mov	r22, r18
    28d8:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_8bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
		while(*str)
    28dc:	ee 81       	ldd	r30, Y+6	; 0x06
    28de:	ff 81       	ldd	r31, Y+7	; 0x07
    28e0:	80 81       	ld	r24, Z
    28e2:	88 23       	and	r24, r24
    28e4:	71 f7       	brne	.-36     	; 0x28c2 <LCD_8bit_sendStringAtPosition+0x4e>
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e8:	27 96       	adiw	r28, 0x07	; 7
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <LCD_8bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCustomCharAtPosition(const lcd_8bit_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    28fa:	0f 93       	push	r16
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	29 97       	sbiw	r28, 0x09	; 9
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	7e 83       	std	Y+6, r23	; 0x06
    2916:	6d 83       	std	Y+5, r22	; 0x05
    2918:	4f 83       	std	Y+7, r20	; 0x07
    291a:	28 87       	std	Y+8, r18	; 0x08
    291c:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	11 f4       	brne	.+4      	; 0x292e <LCD_8bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    292a:	1a 82       	std	Y+2, r1	; 0x02
    292c:	36 c0       	rjmp	.+108    	; 0x299a <LCD_8bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	08 96       	adiw	r24, 0x08	; 8
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	28 2f       	mov	r18, r24
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	62 2f       	mov	r22, r18
    294a:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    294e:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2950:	19 82       	std	Y+1, r1	; 0x01
    2952:	15 c0       	rjmp	.+42     	; 0x297e <LCD_8bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	fc 01       	movw	r30, r24
    2960:	e2 0f       	add	r30, r18
    2962:	f3 1f       	adc	r31, r19
    2964:	20 81       	ld	r18, Z
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	62 2f       	mov	r22, r18
    296c:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_8bit_sendChar>
    2970:	98 2f       	mov	r25, r24
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	89 23       	and	r24, r25
    2976:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	8f 5f       	subi	r24, 0xFF	; 255
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	88 30       	cpi	r24, 0x08	; 8
    2982:	40 f3       	brcs	.-48     	; 0x2954 <LCD_8bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_8bit_sendCharAtPosition(lcd, row, col, mem_position);
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	48 85       	ldd	r20, Y+8	; 0x08
    298c:	29 85       	ldd	r18, Y+9	; 0x09
    298e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_8bit_sendCharAtPosition>
    2992:	98 2f       	mov	r25, r24
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	89 23       	and	r24, r25
    2998:	8a 83       	std	Y+2, r24	; 0x02

	}

	return error_status;
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    299c:	29 96       	adiw	r28, 0x09	; 9
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <LCD_8bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendNum(const lcd_8bit_t *lcd, uint32 num)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	63 97       	sbiw	r28, 0x13	; 19
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	9f 87       	std	Y+15, r25	; 0x0f
    29c6:	8e 87       	std	Y+14, r24	; 0x0e
    29c8:	48 8b       	std	Y+16, r20	; 0x10
    29ca:	59 8b       	std	Y+17, r21	; 0x11
    29cc:	6a 8b       	std	Y+18, r22	; 0x12
    29ce:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    29d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    29d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	11 f4       	brne	.+4      	; 0x29e0 <LCD_8bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    29dc:	19 82       	std	Y+1, r1	; 0x01
    29de:	19 c0       	rjmp	.+50     	; 0x2a12 <LCD_8bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    29e0:	88 89       	ldd	r24, Y+16	; 0x10
    29e2:	99 89       	ldd	r25, Y+17	; 0x11
    29e4:	aa 89       	ldd	r26, Y+18	; 0x12
    29e6:	bb 89       	ldd	r27, Y+19	; 0x13
    29e8:	9e 01       	movw	r18, r28
    29ea:	2e 5f       	subi	r18, 0xFE	; 254
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	a9 01       	movw	r20, r18
    29f4:	0e 94 2a 18 	call	0x3054	; 0x3054 <numToStr>
    29f8:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_8bit_sendString(lcd, str);			/* send the string to the LCD */
    29fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    29fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    29fe:	9e 01       	movw	r18, r28
    2a00:	2e 5f       	subi	r18, 0xFE	; 254
    2a02:	3f 4f       	sbci	r19, 0xFF	; 255
    2a04:	b9 01       	movw	r22, r18
    2a06:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_8bit_sendString>
    2a0a:	98 2f       	mov	r25, r24
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	89 23       	and	r24, r25
    2a10:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a14:	63 96       	adiw	r28, 0x13	; 19
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <LCD_4bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_setCursorLocation(const lcd_4bit_t *lcd, uint8 row, uint8 col)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	27 97       	sbiw	r28, 0x07	; 7
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
    2a3e:	6c 83       	std	Y+4, r22	; 0x04
    2a40:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	11 f4       	brne	.+4      	; 0x2a52 <LCD_4bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    2a4e:	19 82       	std	Y+1, r1	; 0x01
    2a50:	58 c0       	rjmp	.+176    	; 0x2b02 <LCD_4bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    2a58:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3f 83       	std	Y+7, r19	; 0x07
    2a60:	2e 83       	std	Y+6, r18	; 0x06
    2a62:	8e 81       	ldd	r24, Y+6	; 0x06
    2a64:	9f 81       	ldd	r25, Y+7	; 0x07
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	91 05       	cpc	r25, r1
    2a6a:	19 f1       	breq	.+70     	; 0x2ab2 <LCD_4bit_setCursorLocation+0x8c>
    2a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a70:	23 30       	cpi	r18, 0x03	; 3
    2a72:	31 05       	cpc	r19, r1
    2a74:	34 f4       	brge	.+12     	; 0x2a82 <LCD_4bit_setCursorLocation+0x5c>
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	61 f0       	breq	.+24     	; 0x2a98 <LCD_4bit_setCursorLocation+0x72>
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <LCD_4bit_setCursorLocation+0xda>
    2a82:	2e 81       	ldd	r18, Y+6	; 0x06
    2a84:	3f 81       	ldd	r19, Y+7	; 0x07
    2a86:	23 30       	cpi	r18, 0x03	; 3
    2a88:	31 05       	cpc	r19, r1
    2a8a:	01 f1       	breq	.+64     	; 0x2acc <LCD_4bit_setCursorLocation+0xa6>
    2a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a90:	84 30       	cpi	r24, 0x04	; 4
    2a92:	91 05       	cpc	r25, r1
    2a94:	41 f1       	breq	.+80     	; 0x2ae6 <LCD_4bit_setCursorLocation+0xc0>
    2a96:	34 c0       	rjmp	.+104    	; 0x2b00 <LCD_4bit_setCursorLocation+0xda>
		{
		case ROW1:
			/* address format is 1 A6 A5 A4 A3 A2 A1 A0,
			 * so, we add 0x80 to the base address of every row */

			error_status &= LCD_4bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	20 58       	subi	r18, 0x80	; 128
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	62 2f       	mov	r22, r18
    2aa4:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	89 23       	and	r24, r25
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	28 c0       	rjmp	.+80     	; 0x2b02 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_4bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	20 54       	subi	r18, 0x40	; 64
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	62 2f       	mov	r22, r18
    2abe:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	89 23       	and	r24, r25
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	1b c0       	rjmp	.+54     	; 0x2b02 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_4bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	28 2f       	mov	r18, r24
    2ad0:	2c 56       	subi	r18, 0x6C	; 108
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	62 2f       	mov	r22, r18
    2ad8:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    2adc:	98 2f       	mov	r25, r24
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	89 23       	and	r24, r25
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	0e c0       	rjmp	.+28     	; 0x2b02 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_4bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	28 2f       	mov	r18, r24
    2aea:	2c 52       	subi	r18, 0x2C	; 44
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	62 2f       	mov	r22, r18
    2af2:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_4bit_sendCommand>
    2af6:	98 2f       	mov	r25, r24
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	89 23       	and	r24, r25
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <LCD_4bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    2b00:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b04:	27 96       	adiw	r28, 0x07	; 7
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <LCD_8bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_setCursorLocation(const lcd_8bit_t *lcd, uint8 row, uint8 col)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	27 97       	sbiw	r28, 0x07	; 7
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	9b 83       	std	Y+3, r25	; 0x03
    2b2c:	8a 83       	std	Y+2, r24	; 0x02
    2b2e:	6c 83       	std	Y+4, r22	; 0x04
    2b30:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	11 f4       	brne	.+4      	; 0x2b42 <LCD_8bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	58 c0       	rjmp	.+176    	; 0x2bf2 <LCD_8bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	81 50       	subi	r24, 0x01	; 1
    2b46:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	3f 83       	std	Y+7, r19	; 0x07
    2b50:	2e 83       	std	Y+6, r18	; 0x06
    2b52:	8e 81       	ldd	r24, Y+6	; 0x06
    2b54:	9f 81       	ldd	r25, Y+7	; 0x07
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	91 05       	cpc	r25, r1
    2b5a:	19 f1       	breq	.+70     	; 0x2ba2 <LCD_8bit_setCursorLocation+0x8c>
    2b5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2b60:	23 30       	cpi	r18, 0x03	; 3
    2b62:	31 05       	cpc	r19, r1
    2b64:	34 f4       	brge	.+12     	; 0x2b72 <LCD_8bit_setCursorLocation+0x5c>
    2b66:	8e 81       	ldd	r24, Y+6	; 0x06
    2b68:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	61 f0       	breq	.+24     	; 0x2b88 <LCD_8bit_setCursorLocation+0x72>
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <LCD_8bit_setCursorLocation+0xda>
    2b72:	2e 81       	ldd	r18, Y+6	; 0x06
    2b74:	3f 81       	ldd	r19, Y+7	; 0x07
    2b76:	23 30       	cpi	r18, 0x03	; 3
    2b78:	31 05       	cpc	r19, r1
    2b7a:	01 f1       	breq	.+64     	; 0x2bbc <LCD_8bit_setCursorLocation+0xa6>
    2b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b80:	84 30       	cpi	r24, 0x04	; 4
    2b82:	91 05       	cpc	r25, r1
    2b84:	41 f1       	breq	.+80     	; 0x2bd6 <LCD_8bit_setCursorLocation+0xc0>
    2b86:	34 c0       	rjmp	.+104    	; 0x2bf0 <LCD_8bit_setCursorLocation+0xda>
		{
		case ROW1:
			error_status &= LCD_8bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	20 58       	subi	r18, 0x80	; 128
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	62 2f       	mov	r22, r18
    2b94:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2b98:	98 2f       	mov	r25, r24
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	89 23       	and	r24, r25
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	28 c0       	rjmp	.+80     	; 0x2bf2 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_8bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	20 54       	subi	r18, 0x40	; 64
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bac:	62 2f       	mov	r22, r18
    2bae:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	89 23       	and	r24, r25
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	1b c0       	rjmp	.+54     	; 0x2bf2 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_8bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	2c 56       	subi	r18, 0x6C	; 108
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	62 2f       	mov	r22, r18
    2bc8:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2bcc:	98 2f       	mov	r25, r24
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	89 23       	and	r24, r25
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	0e c0       	rjmp	.+28     	; 0x2bf2 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_8bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	28 2f       	mov	r18, r24
    2bda:	2c 52       	subi	r18, 0x2C	; 44
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	62 2f       	mov	r22, r18
    2be2:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_8bit_sendCommand>
    2be6:	98 2f       	mov	r25, r24
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	89 23       	and	r24, r25
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <LCD_8bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    2bf0:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf4:	27 96       	adiw	r28, 0x07	; 7
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <LCD_send4Bits>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_send4Bits(const lcd_4bit_t *lcd, uint8 data_command)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LCD_send4Bits+0x6>
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <LCD_send4Bits+0x8>
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9b 83       	std	Y+3, r25	; 0x03
    2c14:	8a 83       	std	Y+2, r24	; 0x02
    2c16:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <LCD_send4Bits+0x22>
	{
		error_status = E_NOT_OK;
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	3a c0       	rjmp	.+116    	; 0x2c9c <LCD_send4Bits+0x96>
	}
	else
	{
		/* write the lower nibble of the passed data_command argument to the data pin of LCD */
		error_status = GPIO_pinWrite(&(lcd->data_pin[0]), READ_BIT(data_command, 0));
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	2e 5f       	subi	r18, 0xFE	; 254
    2c30:	3f 4f       	sbci	r19, 0xFF	; 255
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	48 2f       	mov	r20, r24
    2c36:	41 70       	andi	r20, 0x01	; 1
    2c38:	c9 01       	movw	r24, r18
    2c3a:	64 2f       	mov	r22, r20
    2c3c:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2c40:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[1]), READ_BIT(data_command, 1));
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	9c 01       	movw	r18, r24
    2c48:	2d 5f       	subi	r18, 0xFD	; 253
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	86 95       	lsr	r24
    2c50:	48 2f       	mov	r20, r24
    2c52:	41 70       	andi	r20, 0x01	; 1
    2c54:	c9 01       	movw	r24, r18
    2c56:	64 2f       	mov	r22, r20
    2c58:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2c5c:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[2]), READ_BIT(data_command, 2));
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	9b 81       	ldd	r25, Y+3	; 0x03
    2c62:	9c 01       	movw	r18, r24
    2c64:	2c 5f       	subi	r18, 0xFC	; 252
    2c66:	3f 4f       	sbci	r19, 0xFF	; 255
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	86 95       	lsr	r24
    2c6c:	86 95       	lsr	r24
    2c6e:	48 2f       	mov	r20, r24
    2c70:	41 70       	andi	r20, 0x01	; 1
    2c72:	c9 01       	movw	r24, r18
    2c74:	64 2f       	mov	r22, r20
    2c76:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2c7a:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[3]), READ_BIT(data_command, 3));
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	9c 01       	movw	r18, r24
    2c82:	2b 5f       	subi	r18, 0xFB	; 251
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	86 95       	lsr	r24
    2c8a:	86 95       	lsr	r24
    2c8c:	86 95       	lsr	r24
    2c8e:	48 2f       	mov	r20, r24
    2c90:	41 70       	andi	r20, 0x01	; 1
    2c92:	c9 01       	movw	r24, r18
    2c94:	64 2f       	mov	r22, r20
    2c96:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2c9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <LCD_4bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_4bit_genEnablePulse(const lcd_4bit_t *lcd)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	6b 97       	sbiw	r28, 0x1b	; 27
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	9b 8f       	std	Y+27, r25	; 0x1b
    2cc2:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    2cc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	11 f4       	brne	.+4      	; 0x2cd4 <LCD_4bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    2cd0:	19 8e       	std	Y+25, r1	; 0x19
    2cd2:	cc c0       	rjmp	.+408    	; 0x2e6c <LCD_4bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    2cd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2ce0:	89 8f       	std	Y+25, r24	; 0x19
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 e8       	ldi	r26, 0x80	; 128
    2ce8:	bf e3       	ldi	r27, 0x3F	; 63
    2cea:	8d 8b       	std	Y+21, r24	; 0x15
    2cec:	9e 8b       	std	Y+22, r25	; 0x16
    2cee:	af 8b       	std	Y+23, r26	; 0x17
    2cf0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfa:	2b ea       	ldi	r18, 0xAB	; 171
    2cfc:	3a ea       	ldi	r19, 0xAA	; 170
    2cfe:	4a ea       	ldi	r20, 0xAA	; 170
    2d00:	50 e4       	ldi	r21, 0x40	; 64
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
    2d0c:	9a 8b       	std	Y+18, r25	; 0x12
    2d0e:	ab 8b       	std	Y+19, r26	; 0x13
    2d10:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d12:	69 89       	ldd	r22, Y+17	; 0x11
    2d14:	7a 89       	ldd	r23, Y+18	; 0x12
    2d16:	8b 89       	ldd	r24, Y+19	; 0x13
    2d18:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	1c f4       	brge	.+6      	; 0x2d30 <LCD_4bit_genEnablePulse+0x84>
		__ticks = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	88 8b       	std	Y+16, r24	; 0x10
    2d2e:	91 c0       	rjmp	.+290    	; 0x2e52 <LCD_4bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    2d30:	69 89       	ldd	r22, Y+17	; 0x11
    2d32:	7a 89       	ldd	r23, Y+18	; 0x12
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	53 e4       	ldi	r21, 0x43	; 67
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	0c f0       	brlt	.+2      	; 0x2d4a <LCD_4bit_genEnablePulse+0x9e>
    2d48:	7b c0       	rjmp	.+246    	; 0x2e40 <LCD_4bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    2d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d50:	98 8d       	ldd	r25, Y+24	; 0x18
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	54 e4       	ldi	r21, 0x44	; 68
    2d5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8c 87       	std	Y+12, r24	; 0x0c
    2d64:	9d 87       	std	Y+13, r25	; 0x0d
    2d66:	ae 87       	std	Y+14, r26	; 0x0e
    2d68:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d70:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a e7       	ldi	r20, 0x7A	; 122
    2d78:	55 e4       	ldi	r21, 0x45	; 69
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	88 87       	std	Y+8, r24	; 0x08
    2d84:	99 87       	std	Y+9, r25	; 0x09
    2d86:	aa 87       	std	Y+10, r26	; 0x0a
    2d88:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d8a:	68 85       	ldd	r22, Y+8	; 0x08
    2d8c:	79 85       	ldd	r23, Y+9	; 0x09
    2d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <LCD_4bit_genEnablePulse+0x100>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9f 83       	std	Y+7, r25	; 0x07
    2da8:	8e 83       	std	Y+6, r24	; 0x06
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <LCD_4bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    2dac:	68 85       	ldd	r22, Y+8	; 0x08
    2dae:	79 85       	ldd	r23, Y+9	; 0x09
    2db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2db2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <LCD_4bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dc6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9f 83       	std	Y+7, r25	; 0x07
    2dea:	8e 83       	std	Y+6, r24	; 0x06
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <LCD_4bit_genEnablePulse+0x160>
    2dee:	80 e9       	ldi	r24, 0x90	; 144
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	9d 83       	std	Y+5, r25	; 0x05
    2df4:	8c 83       	std	Y+4, r24	; 0x04
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_4bit_genEnablePulse+0x14e>
    2dfe:	9d 83       	std	Y+5, r25	; 0x05
    2e00:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8e 81       	ldd	r24, Y+6	; 0x06
    2e04:	9f 81       	ldd	r25, Y+7	; 0x07
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9f 83       	std	Y+7, r25	; 0x07
    2e0a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <LCD_4bit_genEnablePulse+0x142>
    2e14:	24 c0       	rjmp	.+72     	; 0x2e5e <LCD_4bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	68 85       	ldd	r22, Y+8	; 0x08
    2e18:	79 85       	ldd	r23, Y+9	; 0x09
    2e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9f 83       	std	Y+7, r25	; 0x07
    2e28:	8e 83       	std	Y+6, r24	; 0x06
    2e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_4bit_genEnablePulse+0x18a>
    2e3a:	9b 83       	std	Y+3, r25	; 0x03
    2e3c:	8a 83       	std	Y+2, r24	; 0x02
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <LCD_4bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e40:	69 89       	ldd	r22, Y+17	; 0x11
    2e42:	7a 89       	ldd	r23, Y+18	; 0x12
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	9c 89       	ldd	r25, Y+20	; 0x14
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	88 8b       	std	Y+16, r24	; 0x10
    2e52:	88 89       	ldd	r24, Y+16	; 0x10
    2e54:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8a 95       	dec	r24
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_4bit_genEnablePulse+0x1ac>
    2e5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    2e5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e60:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2e6a:	89 8f       	std	Y+25, r24	; 0x19

	}
	return error_status;
    2e6c:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2e6e:	6b 96       	adiw	r28, 0x1b	; 27
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_8bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_8bit_genEnablePulse(const lcd_8bit_t *lcd)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	6b 97       	sbiw	r28, 0x1b	; 27
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	9b 8f       	std	Y+27, r25	; 0x1b
    2e96:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    2e9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	11 f4       	brne	.+4      	; 0x2ea8 <LCD_8bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    2ea4:	19 8e       	std	Y+25, r1	; 0x19
    2ea6:	cc c0       	rjmp	.+408    	; 0x3040 <LCD_8bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    2ea8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eaa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	61 e0       	ldi	r22, 0x01	; 1
    2eb0:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    2eb4:	89 8f       	std	Y+25, r24	; 0x19
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e8       	ldi	r26, 0x80	; 128
    2ebc:	bf e3       	ldi	r27, 0x3F	; 63
    2ebe:	8d 8b       	std	Y+21, r24	; 0x15
    2ec0:	9e 8b       	std	Y+22, r25	; 0x16
    2ec2:	af 8b       	std	Y+23, r26	; 0x17
    2ec4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ece:	2b ea       	ldi	r18, 0xAB	; 171
    2ed0:	3a ea       	ldi	r19, 0xAA	; 170
    2ed2:	4a ea       	ldi	r20, 0xAA	; 170
    2ed4:	50 e4       	ldi	r21, 0x40	; 64
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	89 8b       	std	Y+17, r24	; 0x11
    2ee0:	9a 8b       	std	Y+18, r25	; 0x12
    2ee2:	ab 8b       	std	Y+19, r26	; 0x13
    2ee4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ee6:	69 89       	ldd	r22, Y+17	; 0x11
    2ee8:	7a 89       	ldd	r23, Y+18	; 0x12
    2eea:	8b 89       	ldd	r24, Y+19	; 0x13
    2eec:	9c 89       	ldd	r25, Y+20	; 0x14
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	1c f4       	brge	.+6      	; 0x2f04 <LCD_8bit_genEnablePulse+0x84>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	88 8b       	std	Y+16, r24	; 0x10
    2f02:	91 c0       	rjmp	.+290    	; 0x3026 <LCD_8bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    2f04:	69 89       	ldd	r22, Y+17	; 0x11
    2f06:	7a 89       	ldd	r23, Y+18	; 0x12
    2f08:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	53 e4       	ldi	r21, 0x43	; 67
    2f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <LCD_8bit_genEnablePulse+0x9e>
    2f1c:	7b c0       	rjmp	.+246    	; 0x3014 <LCD_8bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    2f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f20:	7e 89       	ldd	r23, Y+22	; 0x16
    2f22:	8f 89       	ldd	r24, Y+23	; 0x17
    2f24:	98 8d       	ldd	r25, Y+24	; 0x18
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a e7       	ldi	r20, 0x7A	; 122
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8c 87       	std	Y+12, r24	; 0x0c
    2f38:	9d 87       	std	Y+13, r25	; 0x0d
    2f3a:	ae 87       	std	Y+14, r26	; 0x0e
    2f3c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f40:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a e7       	ldi	r20, 0x7A	; 122
    2f4c:	55 e4       	ldi	r21, 0x45	; 69
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	88 87       	std	Y+8, r24	; 0x08
    2f58:	99 87       	std	Y+9, r25	; 0x09
    2f5a:	aa 87       	std	Y+10, r26	; 0x0a
    2f5c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f5e:	68 85       	ldd	r22, Y+8	; 0x08
    2f60:	79 85       	ldd	r23, Y+9	; 0x09
    2f62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f64:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <LCD_8bit_genEnablePulse+0x100>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9f 83       	std	Y+7, r25	; 0x07
    2f7c:	8e 83       	std	Y+6, r24	; 0x06
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <LCD_8bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    2f80:	68 85       	ldd	r22, Y+8	; 0x08
    2f82:	79 85       	ldd	r23, Y+9	; 0x09
    2f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <LCD_8bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9f 83       	std	Y+7, r25	; 0x07
    2fbe:	8e 83       	std	Y+6, r24	; 0x06
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <LCD_8bit_genEnablePulse+0x160>
    2fc2:	80 e9       	ldi	r24, 0x90	; 144
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	9d 83       	std	Y+5, r25	; 0x05
    2fc8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_8bit_genEnablePulse+0x14e>
    2fd2:	9d 83       	std	Y+5, r25	; 0x05
    2fd4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9f 83       	std	Y+7, r25	; 0x07
    2fde:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <LCD_8bit_genEnablePulse+0x142>
    2fe8:	24 c0       	rjmp	.+72     	; 0x3032 <LCD_8bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	68 85       	ldd	r22, Y+8	; 0x08
    2fec:	79 85       	ldd	r23, Y+9	; 0x09
    2fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9f 83       	std	Y+7, r25	; 0x07
    2ffc:	8e 83       	std	Y+6, r24	; 0x06
    2ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    3000:	9f 81       	ldd	r25, Y+7	; 0x07
    3002:	9b 83       	std	Y+3, r25	; 0x03
    3004:	8a 83       	std	Y+2, r24	; 0x02
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <LCD_8bit_genEnablePulse+0x18a>
    300e:	9b 83       	std	Y+3, r25	; 0x03
    3010:	8a 83       	std	Y+2, r24	; 0x02
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_8bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3014:	69 89       	ldd	r22, Y+17	; 0x11
    3016:	7a 89       	ldd	r23, Y+18	; 0x12
    3018:	8b 89       	ldd	r24, Y+19	; 0x13
    301a:	9c 89       	ldd	r25, Y+20	; 0x14
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	88 8b       	std	Y+16, r24	; 0x10
    3026:	88 89       	ldd	r24, Y+16	; 0x10
    3028:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	8a 95       	dec	r24
    302e:	f1 f7       	brne	.-4      	; 0x302c <LCD_8bit_genEnablePulse+0x1ac>
    3030:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    3032:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3034:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    303e:	89 8f       	std	Y+25, r24	; 0x19
	}
	return error_status;
    3040:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3042:	6b 96       	adiw	r28, 0x1b	; 27
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <numToStr>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType numToStr(const uint32 num, char * str)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	27 97       	sbiw	r28, 0x07	; 7
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	6a 83       	std	Y+2, r22	; 0x02
    306a:	7b 83       	std	Y+3, r23	; 0x03
    306c:	8c 83       	std	Y+4, r24	; 0x04
    306e:	9d 83       	std	Y+5, r25	; 0x05
    3070:	5f 83       	std	Y+7, r21	; 0x07
    3072:	4e 83       	std	Y+6, r20	; 0x06
	STD_ReturnType error_status = E_OK;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str)
    3078:	8e 81       	ldd	r24, Y+6	; 0x06
    307a:	9f 81       	ldd	r25, Y+7	; 0x07
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	11 f4       	brne	.+4      	; 0x3084 <numToStr+0x30>
	{
		error_status = E_NOT_OK;
    3080:	19 82       	std	Y+1, r1	; 0x01
    3082:	25 c0       	rjmp	.+74     	; 0x30ce <numToStr+0x7a>
	}
	else
	{
		sprintf(str, "%i", num);
    3084:	8d b7       	in	r24, 0x3d	; 61
    3086:	9e b7       	in	r25, 0x3e	; 62
    3088:	08 97       	sbiw	r24, 0x08	; 8
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	9e bf       	out	0x3e, r25	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	8d bf       	out	0x3d, r24	; 61
    3094:	ed b7       	in	r30, 0x3d	; 61
    3096:	fe b7       	in	r31, 0x3e	; 62
    3098:	31 96       	adiw	r30, 0x01	; 1
    309a:	8e 81       	ldd	r24, Y+6	; 0x06
    309c:	9f 81       	ldd	r25, Y+7	; 0x07
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24
    30a2:	80 e6       	ldi	r24, 0x60	; 96
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	93 83       	std	Z+3, r25	; 0x03
    30a8:	82 83       	std	Z+2, r24	; 0x02
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	ac 81       	ldd	r26, Y+4	; 0x04
    30b0:	bd 81       	ldd	r27, Y+5	; 0x05
    30b2:	84 83       	std	Z+4, r24	; 0x04
    30b4:	95 83       	std	Z+5, r25	; 0x05
    30b6:	a6 83       	std	Z+6, r26	; 0x06
    30b8:	b7 83       	std	Z+7, r27	; 0x07
    30ba:	0e 94 8b 21 	call	0x4316	; 0x4316 <sprintf>
    30be:	8d b7       	in	r24, 0x3d	; 61
    30c0:	9e b7       	in	r25, 0x3e	; 62
    30c2:	08 96       	adiw	r24, 0x08	; 8
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	9e bf       	out	0x3e, r25	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	8d bf       	out	0x3d, r24	; 61
	}
	return error_status;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d0:	27 96       	adiw	r28, 0x07	; 7
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <KEYPAD_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_init(const keypad_t *keypad_obj)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <KEYPAD_init+0x6>
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <KEYPAD_init+0x8>
    30ea:	0f 92       	push	r0
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	9d 83       	std	Y+5, r25	; 0x05
    30f2:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	8b 83       	std	Y+3, r24	; 0x03

	if(NULL == keypad_obj)				/* check for null pointer */
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	11 f4       	brne	.+4      	; 0x3104 <KEYPAD_init+0x22>
	{
		error_status = E_NOT_OK;
    3100:	1b 82       	std	Y+3, r1	; 0x03
    3102:	31 c0       	rjmp	.+98     	; 0x3166 <KEYPAD_init+0x84>
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    3104:	1a 82       	std	Y+2, r1	; 0x02
    3106:	19 82       	std	Y+1, r1	; 0x01
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <KEYPAD_init+0x46>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
    310a:	2c 81       	ldd	r18, Y+4	; 0x04
    310c:	3d 81       	ldd	r19, Y+5	; 0x05
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	82 0f       	add	r24, r18
    3114:	93 1f       	adc	r25, r19
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    311c:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	9a 81       	ldd	r25, Y+2	; 0x02
    312c:	84 30       	cpi	r24, 0x04	; 4
    312e:	91 05       	cpc	r25, r1
    3130:	64 f3       	brlt	.-40     	; 0x310a <KEYPAD_init+0x28>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    3132:	1a 82       	std	Y+2, r1	; 0x02
    3134:	19 82       	std	Y+1, r1	; 0x01
    3136:	12 c0       	rjmp	.+36     	; 0x315c <KEYPAD_init+0x7a>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	9d 81       	ldd	r25, Y+5	; 0x05
    313c:	9c 01       	movw	r18, r24
    313e:	2c 5f       	subi	r18, 0xFC	; 252
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	82 0f       	add	r24, r18
    3148:	93 1f       	adc	r25, r19
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	0e 94 57 07 	call	0xeae	; 0xeae <GPIO_pinDirectionInit>
    3150:	8b 83       	std	Y+3, r24	; 0x03
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	84 30       	cpi	r24, 0x04	; 4
    3162:	91 05       	cpc	r25, r1
    3164:	4c f3       	brlt	.-46     	; 0x3138 <KEYPAD_init+0x56>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
		}
	}
	return error_status;
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <KEYPAD_getPressedKey>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_getPressedKey(const keypad_t *keypad_obj, uint8 *value)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	67 97       	sbiw	r28, 0x17	; 23
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	9d 8b       	std	Y+21, r25	; 0x15
    318e:	8c 8b       	std	Y+20, r24	; 0x14
    3190:	7f 8b       	std	Y+23, r23	; 0x17
    3192:	6e 8b       	std	Y+22, r22	; 0x16
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	8a 8b       	std	Y+18, r24	; 0x12

	if(NULL == keypad_obj)
    3198:	8c 89       	ldd	r24, Y+20	; 0x14
    319a:	9d 89       	ldd	r25, Y+21	; 0x15
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	11 f4       	brne	.+4      	; 0x31a4 <KEYPAD_getPressedKey+0x2c>
	{
		error_status = E_NOT_OK;
    31a0:	1a 8a       	std	Y+18, r1	; 0x12
    31a2:	e4 c0       	rjmp	.+456    	; 0x336c <KEYPAD_getPressedKey+0x1f4>
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
    31a4:	1f 86       	std	Y+15, r1	; 0x0f
		/* make sure that initially all 4 row pin are low logic */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    31a6:	19 8a       	std	Y+17, r1	; 0x11
    31a8:	0e c0       	rjmp	.+28     	; 0x31c6 <KEYPAD_getPressedKey+0x4e>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_LOW);
    31aa:	2c 89       	ldd	r18, Y+20	; 0x14
    31ac:	3d 89       	ldd	r19, Y+21	; 0x15
    31ae:	89 89       	ldd	r24, Y+17	; 0x11
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	82 0f       	add	r24, r18
    31b6:	93 1f       	adc	r25, r19
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    31be:	8a 8b       	std	Y+18, r24	; 0x12
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
		/* make sure that initially all 4 row pin are low logic */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    31c0:	89 89       	ldd	r24, Y+17	; 0x11
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	89 8b       	std	Y+17, r24	; 0x11
    31c6:	89 89       	ldd	r24, Y+17	; 0x11
    31c8:	84 30       	cpi	r24, 0x04	; 4
    31ca:	78 f3       	brcs	.-34     	; 0x31aa <KEYPAD_getPressedKey+0x32>
		}

		/* Normally, all columns pin are connected to ground,
		 * if a button is pressed, the relative column pin changes to HIGH.
		 */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    31cc:	19 8a       	std	Y+17, r1	; 0x11
    31ce:	ca c0       	rjmp	.+404    	; 0x3364 <KEYPAD_getPressedKey+0x1ec>
		{
			/* Change an individual row pin to HIGH logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_HIGH);
    31d0:	2c 89       	ldd	r18, Y+20	; 0x14
    31d2:	3d 89       	ldd	r19, Y+21	; 0x15
    31d4:	89 89       	ldd	r24, Y+17	; 0x11
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	82 0f       	add	r24, r18
    31dc:	93 1f       	adc	r25, r19
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    31e4:	98 2f       	mov	r25, r24
    31e6:	8a 89       	ldd	r24, Y+18	; 0x12
    31e8:	89 23       	and	r24, r25
    31ea:	8a 8b       	std	Y+18, r24	; 0x12
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	a0 e0       	ldi	r26, 0x00	; 0
    31f2:	b0 e4       	ldi	r27, 0x40	; 64
    31f4:	8b 87       	std	Y+11, r24	; 0x0b
    31f6:	9c 87       	std	Y+12, r25	; 0x0c
    31f8:	ad 87       	std	Y+13, r26	; 0x0d
    31fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	4a e7       	ldi	r20, 0x7A	; 122
    320a:	55 e4       	ldi	r21, 0x45	; 69
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	8f 83       	std	Y+7, r24	; 0x07
    3216:	98 87       	std	Y+8, r25	; 0x08
    3218:	a9 87       	std	Y+9, r26	; 0x09
    321a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    321c:	6f 81       	ldd	r22, Y+7	; 0x07
    321e:	78 85       	ldd	r23, Y+8	; 0x08
    3220:	89 85       	ldd	r24, Y+9	; 0x09
    3222:	9a 85       	ldd	r25, Y+10	; 0x0a
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e8       	ldi	r20, 0x80	; 128
    322a:	5f e3       	ldi	r21, 0x3F	; 63
    322c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3230:	88 23       	and	r24, r24
    3232:	2c f4       	brge	.+10     	; 0x323e <KEYPAD_getPressedKey+0xc6>
		__ticks = 1;
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	3f c0       	rjmp	.+126    	; 0x32bc <KEYPAD_getPressedKey+0x144>
	else if (__tmp > 65535)
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	3f ef       	ldi	r19, 0xFF	; 255
    324a:	4f e7       	ldi	r20, 0x7F	; 127
    324c:	57 e4       	ldi	r21, 0x47	; 71
    324e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3252:	18 16       	cp	r1, r24
    3254:	4c f5       	brge	.+82     	; 0x32a8 <KEYPAD_getPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3256:	6b 85       	ldd	r22, Y+11	; 0x0b
    3258:	7c 85       	ldd	r23, Y+12	; 0x0c
    325a:	8d 85       	ldd	r24, Y+13	; 0x0d
    325c:	9e 85       	ldd	r25, Y+14	; 0x0e
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e2       	ldi	r20, 0x20	; 32
    3264:	51 e4       	ldi	r21, 0x41	; 65
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
    327e:	0f c0       	rjmp	.+30     	; 0x329e <KEYPAD_getPressedKey+0x126>
    3280:	80 e9       	ldi	r24, 0x90	; 144
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	9c 83       	std	Y+4, r25	; 0x04
    3286:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	9c 81       	ldd	r25, Y+4	; 0x04
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <KEYPAD_getPressedKey+0x114>
    3290:	9c 83       	std	Y+4, r25	; 0x04
    3292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3294:	8d 81       	ldd	r24, Y+5	; 0x05
    3296:	9e 81       	ldd	r25, Y+6	; 0x06
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	69 f7       	brne	.-38     	; 0x3280 <KEYPAD_getPressedKey+0x108>
    32a6:	14 c0       	rjmp	.+40     	; 0x32d0 <KEYPAD_getPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a8:	6f 81       	ldd	r22, Y+7	; 0x07
    32aa:	78 85       	ldd	r23, Y+8	; 0x08
    32ac:	89 85       	ldd	r24, Y+9	; 0x09
    32ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	9e 83       	std	Y+6, r25	; 0x06
    32ba:	8d 83       	std	Y+5, r24	; 0x05
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <KEYPAD_getPressedKey+0x150>
    32cc:	9a 83       	std	Y+2, r25	; 0x02
    32ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    32d0:	18 8a       	std	Y+16, r1	; 0x10
    32d2:	31 c0       	rjmp	.+98     	; 0x3336 <KEYPAD_getPressedKey+0x1be>
			{
				error_status &= GPIO_pinRead(&(keypad_obj->columns_pins[col_counter]), &state);
    32d4:	8c 89       	ldd	r24, Y+20	; 0x14
    32d6:	9d 89       	ldd	r25, Y+21	; 0x15
    32d8:	9c 01       	movw	r18, r24
    32da:	2c 5f       	subi	r18, 0xFC	; 252
    32dc:	3f 4f       	sbci	r19, 0xFF	; 255
    32de:	88 89       	ldd	r24, Y+16	; 0x10
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	82 0f       	add	r24, r18
    32e6:	93 1f       	adc	r25, r19
    32e8:	9e 01       	movw	r18, r28
    32ea:	2d 5e       	subi	r18, 0xED	; 237
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	b9 01       	movw	r22, r18
    32f0:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_pinRead>
    32f4:	98 2f       	mov	r25, r24
    32f6:	8a 89       	ldd	r24, Y+18	; 0x12
    32f8:	89 23       	and	r24, r25
    32fa:	8a 8b       	std	Y+18, r24	; 0x12

				/* if a columns pin reads HIGH logic, then a specific button has been pressed */
				if(GPIO_HIGH == state)
    32fc:	8b 89       	ldd	r24, Y+19	; 0x13
    32fe:	81 30       	cpi	r24, 0x01	; 1
    3300:	b9 f4       	brne	.+46     	; 0x3330 <KEYPAD_getPressedKey+0x1b8>
				{
					/* Store the value in the passed argument */
					*value = btn_values[row_counter][col_counter];
    3302:	89 89       	ldd	r24, Y+17	; 0x11
    3304:	48 2f       	mov	r20, r24
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	88 89       	ldd	r24, Y+16	; 0x10
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	ca 01       	movw	r24, r20
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	82 0f       	add	r24, r18
    331a:	93 1f       	adc	r25, r19
    331c:	fc 01       	movw	r30, r24
    331e:	e4 55       	subi	r30, 0x54	; 84
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 81       	ld	r24, Z
    3324:	ee 89       	ldd	r30, Y+22	; 0x16
    3326:	ff 89       	ldd	r31, Y+23	; 0x17
    3328:	80 83       	st	Z, r24

					/* set the found flag, break to outer loop */
					found_flag = 1;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	8f 87       	std	Y+15, r24	; 0x0f
    332e:	06 c0       	rjmp	.+12     	; 0x333c <KEYPAD_getPressedKey+0x1c4>
			/* Change an individual row pin to HIGH logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_HIGH);
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    3330:	88 89       	ldd	r24, Y+16	; 0x10
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	88 8b       	std	Y+16, r24	; 0x10
    3336:	88 89       	ldd	r24, Y+16	; 0x10
    3338:	84 30       	cpi	r24, 0x04	; 4
    333a:	60 f2       	brcs	.-104    	; 0x32d4 <KEYPAD_getPressedKey+0x15c>
					break;
				}else{}
			}

			/* Reset the row pin to LOW logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_LOW);
    333c:	2c 89       	ldd	r18, Y+20	; 0x14
    333e:	3d 89       	ldd	r19, Y+21	; 0x15
    3340:	89 89       	ldd	r24, Y+17	; 0x11
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	82 0f       	add	r24, r18
    3348:	93 1f       	adc	r25, r19
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_pinWrite>
    3350:	98 2f       	mov	r25, r24
    3352:	8a 89       	ldd	r24, Y+18	; 0x12
    3354:	89 23       	and	r24, r25
    3356:	8a 8b       	std	Y+18, r24	; 0x12

			/* if a key has been pressed, break to end of function */
			if (1 == found_flag)
    3358:	8f 85       	ldd	r24, Y+15	; 0x0f
    335a:	81 30       	cpi	r24, 0x01	; 1
    335c:	39 f0       	breq	.+14     	; 0x336c <KEYPAD_getPressedKey+0x1f4>
		}

		/* Normally, all columns pin are connected to ground,
		 * if a button is pressed, the relative column pin changes to HIGH.
		 */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    335e:	89 89       	ldd	r24, Y+17	; 0x11
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	89 8b       	std	Y+17, r24	; 0x11
    3364:	89 89       	ldd	r24, Y+17	; 0x11
    3366:	84 30       	cpi	r24, 0x04	; 4
    3368:	08 f4       	brcc	.+2      	; 0x336c <KEYPAD_getPressedKey+0x1f4>
    336a:	32 cf       	rjmp	.-412    	; 0x31d0 <KEYPAD_getPressedKey+0x58>
			{
				break;
			}else{}
		}
	}
	return error_status;
    336c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    336e:	67 96       	adiw	r28, 0x17	; 23
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <app_init>:

static uint8 str[16] = {'\0'}; 	/* to store the entered data through keypad */
static uint8 counter = 0;		/* to track characters in the str array */

void app_init(void)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62

	/* initiate both lcd && keypad */
	LCD_4bit_init(&board_lcd);
    3388:	8c eb       	ldi	r24, 0xBC	; 188
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_4bit_init>
	KEYPAD_init(&board_keypad);
    3390:	82 ec       	ldi	r24, 0xC2	; 194
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 71 18 	call	0x30e2	; 0x30e2 <KEYPAD_init>

}
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <app_start>:

void app_start(void)
{
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	c2 5a       	subi	r28, 0xA2	; 162
    33b0:	d0 40       	sbci	r29, 0x00	; 0
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
	KEYPAD_getPressedKey(&board_keypad, str+counter); /* if a key is pressed store its value in the str array */
    33bc:	80 91 da 00 	lds	r24, 0x00DA
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9c 01       	movw	r18, r24
    33c6:	26 53       	subi	r18, 0x36	; 54
    33c8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ca:	82 ec       	ldi	r24, 0xC2	; 194
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	b9 01       	movw	r22, r18
    33d0:	0e 94 bc 18 	call	0x3178	; 0x3178 <KEYPAD_getPressedKey>

	if(str[counter] != '\0')	/* if a key is pressed the value in str won't be NULL */
    33d4:	80 91 da 00 	lds	r24, 0x00DA
    33d8:	88 2f       	mov	r24, r24
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	fc 01       	movw	r30, r24
    33de:	e6 53       	subi	r30, 0x36	; 54
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 81       	ld	r24, Z
    33e4:	88 23       	and	r24, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <app_start+0x4c>
    33e8:	e1 c6       	rjmp	.+3522   	; 0x41ac <app_start+0xe0e>
	{
		/* implementation of clear button */
		if ('c' == str[counter]) /* if clear button is pressed */
    33ea:	80 91 da 00 	lds	r24, 0x00DA
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	fc 01       	movw	r30, r24
    33f4:	e6 53       	subi	r30, 0x36	; 54
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	80 81       	ld	r24, Z
    33fa:	83 36       	cpi	r24, 0x63	; 99
    33fc:	d9 f4       	brne	.+54     	; 0x3434 <app_start+0x96>
		{
			for(counter = 0; counter < 16; counter++) /* reset str array to null character only */
    33fe:	10 92 da 00 	sts	0x00DA, r1
    3402:	0d c0       	rjmp	.+26     	; 0x341e <app_start+0x80>
			{
				str[counter] = '\0';
    3404:	80 91 da 00 	lds	r24, 0x00DA
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	fc 01       	movw	r30, r24
    340e:	e6 53       	subi	r30, 0x36	; 54
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	10 82       	st	Z, r1
	if(str[counter] != '\0')	/* if a key is pressed the value in str won't be NULL */
	{
		/* implementation of clear button */
		if ('c' == str[counter]) /* if clear button is pressed */
		{
			for(counter = 0; counter < 16; counter++) /* reset str array to null character only */
    3414:	80 91 da 00 	lds	r24, 0x00DA
    3418:	8f 5f       	subi	r24, 0xFF	; 255
    341a:	80 93 da 00 	sts	0x00DA, r24
    341e:	80 91 da 00 	lds	r24, 0x00DA
    3422:	80 31       	cpi	r24, 0x10	; 16
    3424:	78 f3       	brcs	.-34     	; 0x3404 <app_start+0x66>
			{
				str[counter] = '\0';
			}
			counter = 0;				/* reset counter to 0 to return to the beginning of str array*/
    3426:	10 92 da 00 	sts	0x00DA, r1
			LCD_4bit_clear(&board_lcd); /* then clear lcd */
    342a:	8c eb       	ldi	r24, 0xBC	; 188
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
    3432:	42 c6       	rjmp	.+3204   	; 0x40b8 <app_start+0xd1a>
		}

		/* end of clear button code */

		/* implementation of equal button */
		else if ('=' == str[counter])  /* if the equal operator key is pressed */
    3434:	80 91 da 00 	lds	r24, 0x00DA
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	fc 01       	movw	r30, r24
    343e:	e6 53       	subi	r30, 0x36	; 54
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	8d 33       	cpi	r24, 0x3D	; 61
    3446:	09 f0       	breq	.+2      	; 0x344a <app_start+0xac>
    3448:	a9 c4       	rjmp	.+2386   	; 0x3d9c <app_start+0x9fe>
		{
			LCD_4bit_clear(&board_lcd);	/* clear screen to print the result next */
    344a:	8c eb       	ldi	r24, 0xBC	; 188
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>

			/* operator_index variable will get the index of operator required
			   found flag will be set when operation is found */
			uint8 operator_index, found_flag = 0;
    3452:	fe 01       	movw	r30, r28
    3454:	e1 58       	subi	r30, 0x81	; 129
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	10 82       	st	Z, r1

			/* search in  the str arr till the last entered character */
			for (operator_index = 0; operator_index < counter; operator_index++)
    345a:	fe 01       	movw	r30, r28
    345c:	e0 58       	subi	r30, 0x80	; 128
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	10 82       	st	Z, r1
    3462:	72 c2       	rjmp	.+1252   	; 0x3948 <app_start+0x5aa>
			{
				/* check if the element is an operator */
				if (str[operator_index] == '/' || str[operator_index] == '*' || \
    3464:	fe 01       	movw	r30, r28
    3466:	e0 58       	subi	r30, 0x80	; 128
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 81       	ld	r24, Z
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	fc 01       	movw	r30, r24
    3472:	e6 53       	subi	r30, 0x36	; 54
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	80 81       	ld	r24, Z
    3478:	8f 32       	cpi	r24, 0x2F	; 47
    347a:	29 f1       	breq	.+74     	; 0x34c6 <app_start+0x128>
    347c:	fe 01       	movw	r30, r28
    347e:	e0 58       	subi	r30, 0x80	; 128
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	88 2f       	mov	r24, r24
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	fc 01       	movw	r30, r24
    348a:	e6 53       	subi	r30, 0x36	; 54
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	8a 32       	cpi	r24, 0x2A	; 42
    3492:	c9 f0       	breq	.+50     	; 0x34c6 <app_start+0x128>
    3494:	fe 01       	movw	r30, r28
    3496:	e0 58       	subi	r30, 0x80	; 128
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	88 2f       	mov	r24, r24
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	fc 01       	movw	r30, r24
    34a2:	e6 53       	subi	r30, 0x36	; 54
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	8d 32       	cpi	r24, 0x2D	; 45
    34aa:	69 f0       	breq	.+26     	; 0x34c6 <app_start+0x128>
    34ac:	fe 01       	movw	r30, r28
    34ae:	e0 58       	subi	r30, 0x80	; 128
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	88 2f       	mov	r24, r24
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	fc 01       	movw	r30, r24
    34ba:	e6 53       	subi	r30, 0x36	; 54
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 81       	ld	r24, Z
    34c0:	8b 32       	cpi	r24, 0x2B	; 43
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <app_start+0x128>
    34c4:	38 c2       	rjmp	.+1136   	; 0x3936 <app_start+0x598>
					/* found the operator, now extract the operands */
					/* operator variable will store the required operator required (*, /, +, or -)
					 * operand1[] will store the operand1 (all chars before the operator)
					 * operand2[] will store the second operand (all chars after operator and first null character
					 *  op_counter variable will be used to */
					uint8 operator = 0, operand1[16], operand2[16], op_counter;
    34c6:	fe 01       	movw	r30, r28
    34c8:	e2 58       	subi	r30, 0x82	; 130
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	10 82       	st	Z, r1
					 * op2 will store operand2[] integer value.
					   result will store the operation result */
					uint32 op1, op2, result;

					/* the current character at current index is the operator */
					operator = str[operator_index];
    34ce:	fe 01       	movw	r30, r28
    34d0:	e0 58       	subi	r30, 0x80	; 128
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	de 01       	movw	r26, r28
    34dc:	a2 58       	subi	r26, 0x82	; 130
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	fc 01       	movw	r30, r24
    34e2:	e6 53       	subi	r30, 0x36	; 54
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	8c 93       	st	X, r24


					/* set the found flag */
					found_flag = 1;
    34ea:	fe 01       	movw	r30, r28
    34ec:	e1 58       	subi	r30, 0x81	; 129
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	80 83       	st	Z, r24


					/* show the detected operator  to the user */
					LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "operator: ");
    34f4:	8c eb       	ldi	r24, 0xBC	; 188
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	23 e6       	ldi	r18, 0x63	; 99
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	62 e0       	ldi	r22, 0x02	; 2
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
					LCD_4bit_sendCharAtPosition(&board_lcd,2 , 11, operator);
    3504:	8c eb       	ldi	r24, 0xBC	; 188
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	fe 01       	movw	r30, r28
    350a:	e2 58       	subi	r30, 0x82	; 130
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	62 e0       	ldi	r22, 0x02	; 2
    3510:	4b e0       	ldi	r20, 0x0B	; 11
    3512:	20 81       	ld	r18, Z
    3514:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_4bit_sendCharAtPosition>

					/* store all character from the beginning of str array to the operator index in operand1[] */
					for(op_counter = 0; op_counter < operator_index; op_counter++)
    3518:	fe 01       	movw	r30, r28
    351a:	e3 58       	subi	r30, 0x83	; 131
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	10 82       	st	Z, r1
    3520:	20 c0       	rjmp	.+64     	; 0x3562 <app_start+0x1c4>
					{
						operand1[op_counter] = str[op_counter];
    3522:	fe 01       	movw	r30, r28
    3524:	e3 58       	subi	r30, 0x83	; 131
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	48 2f       	mov	r20, r24
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	fe 01       	movw	r30, r28
    3530:	e3 58       	subi	r30, 0x83	; 131
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	80 81       	ld	r24, Z
    3536:	88 2f       	mov	r24, r24
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	fc 01       	movw	r30, r24
    353c:	e6 53       	subi	r30, 0x36	; 54
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	20 81       	ld	r18, Z
    3542:	ce 01       	movw	r24, r28
    3544:	8f 57       	subi	r24, 0x7F	; 127
    3546:	9f 4f       	sbci	r25, 0xFF	; 255
    3548:	fc 01       	movw	r30, r24
    354a:	e4 0f       	add	r30, r20
    354c:	f5 1f       	adc	r31, r21
    354e:	20 83       	st	Z, r18
					/* show the detected operator  to the user */
					LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "operator: ");
					LCD_4bit_sendCharAtPosition(&board_lcd,2 , 11, operator);

					/* store all character from the beginning of str array to the operator index in operand1[] */
					for(op_counter = 0; op_counter < operator_index; op_counter++)
    3550:	de 01       	movw	r26, r28
    3552:	a3 58       	subi	r26, 0x83	; 131
    3554:	bf 4f       	sbci	r27, 0xFF	; 255
    3556:	fe 01       	movw	r30, r28
    3558:	e3 58       	subi	r30, 0x83	; 131
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	80 81       	ld	r24, Z
    355e:	8f 5f       	subi	r24, 0xFF	; 255
    3560:	8c 93       	st	X, r24
    3562:	fe 01       	movw	r30, r28
    3564:	e3 58       	subi	r30, 0x83	; 131
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	de 01       	movw	r26, r28
    356a:	a0 58       	subi	r26, 0x80	; 128
    356c:	bf 4f       	sbci	r27, 0xFF	; 255
    356e:	90 81       	ld	r25, Z
    3570:	8c 91       	ld	r24, X
    3572:	98 17       	cp	r25, r24
    3574:	b0 f2       	brcs	.-84     	; 0x3522 <app_start+0x184>
					{
						operand1[op_counter] = str[op_counter];
					}

					/* store all character after operator index to the first null encountered in  operand2[] */
					for(op_counter = operator_index+1; str[op_counter] != '\0'; op_counter++)
    3576:	de 01       	movw	r26, r28
    3578:	a3 58       	subi	r26, 0x83	; 131
    357a:	bf 4f       	sbci	r27, 0xFF	; 255
    357c:	fe 01       	movw	r30, r28
    357e:	e0 58       	subi	r30, 0x80	; 128
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	8f 5f       	subi	r24, 0xFF	; 255
    3586:	8c 93       	st	X, r24
    3588:	2b c0       	rjmp	.+86     	; 0x35e0 <app_start+0x242>
					{
						operand2[op_counter-(operator_index+1)] = str[op_counter];
    358a:	fe 01       	movw	r30, r28
    358c:	e3 58       	subi	r30, 0x83	; 131
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	fe 01       	movw	r30, r28
    3598:	e0 58       	subi	r30, 0x80	; 128
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 81       	ld	r24, Z
    359e:	88 2f       	mov	r24, r24
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	80 95       	com	r24
    35a4:	90 95       	com	r25
    35a6:	a9 01       	movw	r20, r18
    35a8:	48 0f       	add	r20, r24
    35aa:	59 1f       	adc	r21, r25
    35ac:	fe 01       	movw	r30, r28
    35ae:	e3 58       	subi	r30, 0x83	; 131
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	88 2f       	mov	r24, r24
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	fc 01       	movw	r30, r24
    35ba:	e6 53       	subi	r30, 0x36	; 54
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	20 81       	ld	r18, Z
    35c0:	ce 01       	movw	r24, r28
    35c2:	8f 56       	subi	r24, 0x6F	; 111
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	fc 01       	movw	r30, r24
    35c8:	e4 0f       	add	r30, r20
    35ca:	f5 1f       	adc	r31, r21
    35cc:	20 83       	st	Z, r18
					{
						operand1[op_counter] = str[op_counter];
					}

					/* store all character after operator index to the first null encountered in  operand2[] */
					for(op_counter = operator_index+1; str[op_counter] != '\0'; op_counter++)
    35ce:	de 01       	movw	r26, r28
    35d0:	a3 58       	subi	r26, 0x83	; 131
    35d2:	bf 4f       	sbci	r27, 0xFF	; 255
    35d4:	fe 01       	movw	r30, r28
    35d6:	e3 58       	subi	r30, 0x83	; 131
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	8c 93       	st	X, r24
    35e0:	fe 01       	movw	r30, r28
    35e2:	e3 58       	subi	r30, 0x83	; 131
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 81       	ld	r24, Z
    35e8:	88 2f       	mov	r24, r24
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	fc 01       	movw	r30, r24
    35ee:	e6 53       	subi	r30, 0x36	; 54
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	88 23       	and	r24, r24
    35f6:	49 f6       	brne	.-110    	; 0x358a <app_start+0x1ec>
					{
						operand2[op_counter-(operator_index+1)] = str[op_counter];
					}

					/* convert operand1 && operand2 to their numeric values */
					op1 = atoi(operand1);
    35f8:	ce 01       	movw	r24, r28
    35fa:	8f 57       	subi	r24, 0x7F	; 127
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	0e 94 65 21 	call	0x42ca	; 0x42ca <atoi>
    3602:	fe 01       	movw	r30, r28
    3604:	e7 58       	subi	r30, 0x87	; 135
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	aa 27       	eor	r26, r26
    360a:	97 fd       	sbrc	r25, 7
    360c:	a0 95       	com	r26
    360e:	ba 2f       	mov	r27, r26
    3610:	80 83       	st	Z, r24
    3612:	91 83       	std	Z+1, r25	; 0x01
    3614:	a2 83       	std	Z+2, r26	; 0x02
    3616:	b3 83       	std	Z+3, r27	; 0x03
					op2 = atoi(operand2);
    3618:	ce 01       	movw	r24, r28
    361a:	8f 56       	subi	r24, 0x6F	; 111
    361c:	9f 4f       	sbci	r25, 0xFF	; 255
    361e:	0e 94 65 21 	call	0x42ca	; 0x42ca <atoi>
    3622:	fe 01       	movw	r30, r28
    3624:	eb 58       	subi	r30, 0x8B	; 139
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	aa 27       	eor	r26, r26
    362a:	97 fd       	sbrc	r25, 7
    362c:	a0 95       	com	r26
    362e:	ba 2f       	mov	r27, r26
    3630:	80 83       	st	Z, r24
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	a2 83       	std	Z+2, r26	; 0x02
    3636:	b3 83       	std	Z+3, r27	; 0x03

					/* check the required operator and do the relevant calculations*/
					switch(operator)
    3638:	fe 01       	movw	r30, r28
    363a:	e2 58       	subi	r30, 0x82	; 130
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	e8 2e       	mov	r14, r24
    3642:	ff 24       	eor	r15, r15
    3644:	cf 55       	subi	r28, 0x5F	; 95
    3646:	df 4f       	sbci	r29, 0xFF	; 255
    3648:	f9 82       	std	Y+1, r15	; 0x01
    364a:	e8 82       	st	Y, r14
    364c:	c1 5a       	subi	r28, 0xA1	; 161
    364e:	d0 40       	sbci	r29, 0x00	; 0
    3650:	cf 55       	subi	r28, 0x5F	; 95
    3652:	df 4f       	sbci	r29, 0xFF	; 255
    3654:	08 81       	ld	r16, Y
    3656:	19 81       	ldd	r17, Y+1	; 0x01
    3658:	c1 5a       	subi	r28, 0xA1	; 161
    365a:	d0 40       	sbci	r29, 0x00	; 0
    365c:	0b 32       	cpi	r16, 0x2B	; 43
    365e:	11 05       	cpc	r17, r1
    3660:	09 f4       	brne	.+2      	; 0x3664 <app_start+0x2c6>
    3662:	63 c0       	rjmp	.+198    	; 0x372a <app_start+0x38c>
    3664:	cf 55       	subi	r28, 0x5F	; 95
    3666:	df 4f       	sbci	r29, 0xFF	; 255
    3668:	28 81       	ld	r18, Y
    366a:	39 81       	ldd	r19, Y+1	; 0x01
    366c:	c1 5a       	subi	r28, 0xA1	; 161
    366e:	d0 40       	sbci	r29, 0x00	; 0
    3670:	2c 32       	cpi	r18, 0x2C	; 44
    3672:	31 05       	cpc	r19, r1
    3674:	54 f4       	brge	.+20     	; 0x368a <app_start+0x2ec>
    3676:	cf 55       	subi	r28, 0x5F	; 95
    3678:	df 4f       	sbci	r29, 0xFF	; 255
    367a:	88 81       	ld	r24, Y
    367c:	99 81       	ldd	r25, Y+1	; 0x01
    367e:	c1 5a       	subi	r28, 0xA1	; 161
    3680:	d0 40       	sbci	r29, 0x00	; 0
    3682:	8a 32       	cpi	r24, 0x2A	; 42
    3684:	91 05       	cpc	r25, r1
    3686:	a9 f0       	breq	.+42     	; 0x36b2 <app_start+0x314>
    3688:	8b c0       	rjmp	.+278    	; 0x37a0 <app_start+0x402>
    368a:	cf 55       	subi	r28, 0x5F	; 95
    368c:	df 4f       	sbci	r29, 0xFF	; 255
    368e:	e8 81       	ld	r30, Y
    3690:	f9 81       	ldd	r31, Y+1	; 0x01
    3692:	c1 5a       	subi	r28, 0xA1	; 161
    3694:	d0 40       	sbci	r29, 0x00	; 0
    3696:	ed 32       	cpi	r30, 0x2D	; 45
    3698:	f1 05       	cpc	r31, r1
    369a:	09 f4       	brne	.+2      	; 0x369e <app_start+0x300>
    369c:	62 c0       	rjmp	.+196    	; 0x3762 <app_start+0x3c4>
    369e:	cf 55       	subi	r28, 0x5F	; 95
    36a0:	df 4f       	sbci	r29, 0xFF	; 255
    36a2:	08 81       	ld	r16, Y
    36a4:	19 81       	ldd	r17, Y+1	; 0x01
    36a6:	c1 5a       	subi	r28, 0xA1	; 161
    36a8:	d0 40       	sbci	r29, 0x00	; 0
    36aa:	0f 32       	cpi	r16, 0x2F	; 47
    36ac:	11 05       	cpc	r17, r1
    36ae:	f9 f0       	breq	.+62     	; 0x36ee <app_start+0x350>
    36b0:	77 c0       	rjmp	.+238    	; 0x37a0 <app_start+0x402>
					{
					case '*':
						result = op1 * op2;
    36b2:	8e 01       	movw	r16, r28
    36b4:	0f 58       	subi	r16, 0x8F	; 143
    36b6:	1f 4f       	sbci	r17, 0xFF	; 255
    36b8:	fe 01       	movw	r30, r28
    36ba:	e7 58       	subi	r30, 0x87	; 135
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	9e 01       	movw	r18, r28
    36c0:	2b 58       	subi	r18, 0x8B	; 139
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	a2 81       	ldd	r26, Z+2	; 0x02
    36ca:	b3 81       	ldd	r27, Z+3	; 0x03
    36cc:	f9 01       	movw	r30, r18
    36ce:	20 81       	ld	r18, Z
    36d0:	31 81       	ldd	r19, Z+1	; 0x01
    36d2:	42 81       	ldd	r20, Z+2	; 0x02
    36d4:	53 81       	ldd	r21, Z+3	; 0x03
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 ed 20 	call	0x41da	; 0x41da <__mulsi3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	f8 01       	movw	r30, r16
    36e4:	80 83       	st	Z, r24
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	a2 83       	std	Z+2, r26	; 0x02
    36ea:	b3 83       	std	Z+3, r27	; 0x03
    36ec:	59 c0       	rjmp	.+178    	; 0x37a0 <app_start+0x402>
						break;

					case '/':
						result = op1 / op2;
    36ee:	8e 01       	movw	r16, r28
    36f0:	0f 58       	subi	r16, 0x8F	; 143
    36f2:	1f 4f       	sbci	r17, 0xFF	; 255
    36f4:	fe 01       	movw	r30, r28
    36f6:	e7 58       	subi	r30, 0x87	; 135
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	9e 01       	movw	r18, r28
    36fc:	2b 58       	subi	r18, 0x8B	; 139
    36fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	a2 81       	ldd	r26, Z+2	; 0x02
    3706:	b3 81       	ldd	r27, Z+3	; 0x03
    3708:	f9 01       	movw	r30, r18
    370a:	20 81       	ld	r18, Z
    370c:	31 81       	ldd	r19, Z+1	; 0x01
    370e:	42 81       	ldd	r20, Z+2	; 0x02
    3710:	53 81       	ldd	r21, Z+3	; 0x03
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	0e 94 0c 21 	call	0x4218	; 0x4218 <__udivmodsi4>
    371a:	da 01       	movw	r26, r20
    371c:	c9 01       	movw	r24, r18
    371e:	f8 01       	movw	r30, r16
    3720:	80 83       	st	Z, r24
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	a2 83       	std	Z+2, r26	; 0x02
    3726:	b3 83       	std	Z+3, r27	; 0x03
    3728:	3b c0       	rjmp	.+118    	; 0x37a0 <app_start+0x402>
						break;

					case '+':
						result = op1 + op2;
    372a:	be 01       	movw	r22, r28
    372c:	6f 58       	subi	r22, 0x8F	; 143
    372e:	7f 4f       	sbci	r23, 0xFF	; 255
    3730:	fe 01       	movw	r30, r28
    3732:	e7 58       	subi	r30, 0x87	; 135
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	de 01       	movw	r26, r28
    3738:	ab 58       	subi	r26, 0x8B	; 139
    373a:	bf 4f       	sbci	r27, 0xFF	; 255
    373c:	20 81       	ld	r18, Z
    373e:	31 81       	ldd	r19, Z+1	; 0x01
    3740:	42 81       	ldd	r20, Z+2	; 0x02
    3742:	53 81       	ldd	r21, Z+3	; 0x03
    3744:	8d 91       	ld	r24, X+
    3746:	9d 91       	ld	r25, X+
    3748:	0d 90       	ld	r0, X+
    374a:	bc 91       	ld	r27, X
    374c:	a0 2d       	mov	r26, r0
    374e:	82 0f       	add	r24, r18
    3750:	93 1f       	adc	r25, r19
    3752:	a4 1f       	adc	r26, r20
    3754:	b5 1f       	adc	r27, r21
    3756:	fb 01       	movw	r30, r22
    3758:	80 83       	st	Z, r24
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	a2 83       	std	Z+2, r26	; 0x02
    375e:	b3 83       	std	Z+3, r27	; 0x03
    3760:	1f c0       	rjmp	.+62     	; 0x37a0 <app_start+0x402>
						break;

					case '-':
						result = op1 - op2;
    3762:	be 01       	movw	r22, r28
    3764:	6f 58       	subi	r22, 0x8F	; 143
    3766:	7f 4f       	sbci	r23, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	e7 58       	subi	r30, 0x87	; 135
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	de 01       	movw	r26, r28
    3770:	ab 58       	subi	r26, 0x8B	; 139
    3772:	bf 4f       	sbci	r27, 0xFF	; 255
    3774:	20 81       	ld	r18, Z
    3776:	31 81       	ldd	r19, Z+1	; 0x01
    3778:	42 81       	ldd	r20, Z+2	; 0x02
    377a:	53 81       	ldd	r21, Z+3	; 0x03
    377c:	8d 91       	ld	r24, X+
    377e:	9d 91       	ld	r25, X+
    3780:	0d 90       	ld	r0, X+
    3782:	bc 91       	ld	r27, X
    3784:	a0 2d       	mov	r26, r0
    3786:	79 01       	movw	r14, r18
    3788:	8a 01       	movw	r16, r20
    378a:	e8 1a       	sub	r14, r24
    378c:	f9 0a       	sbc	r15, r25
    378e:	0a 0b       	sbc	r16, r26
    3790:	1b 0b       	sbc	r17, r27
    3792:	d8 01       	movw	r26, r16
    3794:	c7 01       	movw	r24, r14
    3796:	fb 01       	movw	r30, r22
    3798:	80 83       	st	Z, r24
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	a2 83       	std	Z+2, r26	; 0x02
    379e:	b3 83       	std	Z+3, r27	; 0x03
					}

					/* print the result on the screen for 2 seconds */
					LCD_4bit_setCursorLocation(&board_lcd, 1, 1);
    37a0:	8c eb       	ldi	r24, 0xBC	; 188
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	61 e0       	ldi	r22, 0x01	; 1
    37a6:	41 e0       	ldi	r20, 0x01	; 1
    37a8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <LCD_4bit_setCursorLocation>
					LCD_4bit_sendNum(&board_lcd, result);
    37ac:	8c eb       	ldi	r24, 0xBC	; 188
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	fe 01       	movw	r30, r28
    37b2:	ef 58       	subi	r30, 0x8F	; 143
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	20 81       	ld	r18, Z
    37b8:	31 81       	ldd	r19, Z+1	; 0x01
    37ba:	42 81       	ldd	r20, Z+2	; 0x02
    37bc:	53 81       	ldd	r21, Z+3	; 0x03
    37be:	ba 01       	movw	r22, r20
    37c0:	a9 01       	movw	r20, r18
    37c2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_4bit_sendNum>
    37c6:	fe 01       	movw	r30, r28
    37c8:	e3 59       	subi	r30, 0x93	; 147
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	aa ef       	ldi	r26, 0xFA	; 250
    37d2:	b4 e4       	ldi	r27, 0x44	; 68
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	8e 01       	movw	r16, r28
    37de:	07 59       	subi	r16, 0x97	; 151
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	e3 59       	subi	r30, 0x93	; 147
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a e7       	ldi	r20, 0x7A	; 122
    37f6:	55 e4       	ldi	r21, 0x45	; 69
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380a:	fe 01       	movw	r30, r28
    380c:	e7 59       	subi	r30, 0x97	; 151
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	44 f4       	brge	.+16     	; 0x3838 <app_start+0x49a>
		__ticks = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e9 59       	subi	r30, 0x99	; 153
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	64 c0       	rjmp	.+200    	; 0x3900 <app_start+0x562>
	else if (__tmp > 65535)
    3838:	fe 01       	movw	r30, r28
    383a:	e7 59       	subi	r30, 0x97	; 151
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	3f ef       	ldi	r19, 0xFF	; 255
    384a:	4f e7       	ldi	r20, 0x7F	; 127
    384c:	57 e4       	ldi	r21, 0x47	; 71
    384e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3852:	18 16       	cp	r1, r24
    3854:	0c f0       	brlt	.+2      	; 0x3858 <app_start+0x4ba>
    3856:	43 c0       	rjmp	.+134    	; 0x38de <app_start+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3858:	fe 01       	movw	r30, r28
    385a:	e3 59       	subi	r30, 0x93	; 147
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	60 81       	ld	r22, Z
    3860:	71 81       	ldd	r23, Z+1	; 0x01
    3862:	82 81       	ldd	r24, Z+2	; 0x02
    3864:	93 81       	ldd	r25, Z+3	; 0x03
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e2       	ldi	r20, 0x20	; 32
    386c:	51 e4       	ldi	r21, 0x41	; 65
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	8e 01       	movw	r16, r28
    3878:	09 59       	subi	r16, 0x99	; 153
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	f8 01       	movw	r30, r16
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	1f c0       	rjmp	.+62     	; 0x38ce <app_start+0x530>
    3890:	fe 01       	movw	r30, r28
    3892:	eb 59       	subi	r30, 0x9B	; 155
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 e9       	ldi	r24, 0x90	; 144
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	80 83       	st	Z, r24
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 59       	subi	r30, 0x9B	; 155
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <app_start+0x50a>
    38ac:	fe 01       	movw	r30, r28
    38ae:	eb 59       	subi	r30, 0x9B	; 155
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	de 01       	movw	r26, r28
    38b8:	a9 59       	subi	r26, 0x99	; 153
    38ba:	bf 4f       	sbci	r27, 0xFF	; 255
    38bc:	fe 01       	movw	r30, r28
    38be:	e9 59       	subi	r30, 0x99	; 153
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	11 96       	adiw	r26, 0x01	; 1
    38ca:	9c 93       	st	X, r25
    38cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ce:	fe 01       	movw	r30, r28
    38d0:	e9 59       	subi	r30, 0x99	; 153
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	d1 f6       	brne	.-76     	; 0x3890 <app_start+0x4f2>
    38dc:	27 c0       	rjmp	.+78     	; 0x392c <app_start+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38de:	8e 01       	movw	r16, r28
    38e0:	09 59       	subi	r16, 0x99	; 153
    38e2:	1f 4f       	sbci	r17, 0xFF	; 255
    38e4:	fe 01       	movw	r30, r28
    38e6:	e7 59       	subi	r30, 0x97	; 151
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	60 81       	ld	r22, Z
    38ec:	71 81       	ldd	r23, Z+1	; 0x01
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	f8 01       	movw	r30, r16
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	de 01       	movw	r26, r28
    3902:	ad 59       	subi	r26, 0x9D	; 157
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	e9 59       	subi	r30, 0x99	; 153
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	8d 93       	st	X+, r24
    3912:	9c 93       	st	X, r25
    3914:	fe 01       	movw	r30, r28
    3916:	ed 59       	subi	r30, 0x9D	; 157
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <app_start+0x580>
    3922:	fe 01       	movw	r30, r28
    3924:	ed 59       	subi	r30, 0x9D	; 157
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	80 83       	st	Z, r24
					_delay_ms(2000);

					/* clear the LCD */
					LCD_4bit_clear(&board_lcd);
    392c:	8c eb       	ldi	r24, 0xBC	; 188
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
    3934:	12 c0       	rjmp	.+36     	; 0x395a <app_start+0x5bc>
			/* operator_index variable will get the index of operator required
			   found flag will be set when operation is found */
			uint8 operator_index, found_flag = 0;

			/* search in  the str arr till the last entered character */
			for (operator_index = 0; operator_index < counter; operator_index++)
    3936:	de 01       	movw	r26, r28
    3938:	a0 58       	subi	r26, 0x80	; 128
    393a:	bf 4f       	sbci	r27, 0xFF	; 255
    393c:	fe 01       	movw	r30, r28
    393e:	e0 58       	subi	r30, 0x80	; 128
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	80 81       	ld	r24, Z
    3944:	8f 5f       	subi	r24, 0xFF	; 255
    3946:	8c 93       	st	X, r24
    3948:	80 91 da 00 	lds	r24, 0x00DA
    394c:	fe 01       	movw	r30, r28
    394e:	e0 58       	subi	r30, 0x80	; 128
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	90 81       	ld	r25, Z
    3954:	98 17       	cp	r25, r24
    3956:	08 f4       	brcc	.+2      	; 0x395a <app_start+0x5bc>
    3958:	85 cd       	rjmp	.-1270   	; 0x3464 <app_start+0xc6>
			}

			/* we extractred all required information from str array,
			 * so, reset it to null characters.
			 */
			for(counter = 0; counter < 16; counter++)
    395a:	10 92 da 00 	sts	0x00DA, r1
    395e:	0d c0       	rjmp	.+26     	; 0x397a <app_start+0x5dc>
			{
				str[counter] = '\0';
    3960:	80 91 da 00 	lds	r24, 0x00DA
    3964:	88 2f       	mov	r24, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	fc 01       	movw	r30, r24
    396a:	e6 53       	subi	r30, 0x36	; 54
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	10 82       	st	Z, r1
			}

			/* we extractred all required information from str array,
			 * so, reset it to null characters.
			 */
			for(counter = 0; counter < 16; counter++)
    3970:	80 91 da 00 	lds	r24, 0x00DA
    3974:	8f 5f       	subi	r24, 0xFF	; 255
    3976:	80 93 da 00 	sts	0x00DA, r24
    397a:	80 91 da 00 	lds	r24, 0x00DA
    397e:	80 31       	cpi	r24, 0x10	; 16
    3980:	78 f3       	brcs	.-34     	; 0x3960 <app_start+0x5c2>
			{
				str[counter] = '\0';
			}


			counter = 0; /* reset counter to zero */
    3982:	10 92 da 00 	sts	0x00DA, r1

			/* if found_flag is still 0 "no operator was detected" */
			if (found_flag == 0)
    3986:	fe 01       	movw	r30, r28
    3988:	e1 58       	subi	r30, 0x81	; 129
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	88 23       	and	r24, r24
    3990:	09 f0       	breq	.+2      	; 0x3994 <app_start+0x5f6>
    3992:	92 c3       	rjmp	.+1828   	; 0x40b8 <app_start+0xd1a>
			{
				LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "No operator!!!");
    3994:	8c eb       	ldi	r24, 0xBC	; 188
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	2e e6       	ldi	r18, 0x6E	; 110
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	62 e0       	ldi	r22, 0x02	; 2
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
    39a4:	fe 01       	movw	r30, r28
    39a6:	e1 5a       	subi	r30, 0xA1	; 161
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	aa ef       	ldi	r26, 0xFA	; 250
    39b0:	b3 e4       	ldi	r27, 0x43	; 67
    39b2:	80 83       	st	Z, r24
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	a2 83       	std	Z+2, r26	; 0x02
    39b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ba:	8e 01       	movw	r16, r28
    39bc:	05 5a       	subi	r16, 0xA5	; 165
    39be:	1f 4f       	sbci	r17, 0xFF	; 255
    39c0:	fe 01       	movw	r30, r28
    39c2:	e1 5a       	subi	r30, 0xA1	; 161
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	60 81       	ld	r22, Z
    39c8:	71 81       	ldd	r23, Z+1	; 0x01
    39ca:	82 81       	ldd	r24, Z+2	; 0x02
    39cc:	93 81       	ldd	r25, Z+3	; 0x03
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a e7       	ldi	r20, 0x7A	; 122
    39d4:	55 e4       	ldi	r21, 0x45	; 69
    39d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	80 83       	st	Z, r24
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	a2 83       	std	Z+2, r26	; 0x02
    39e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e8:	fe 01       	movw	r30, r28
    39ea:	e5 5a       	subi	r30, 0xA5	; 165
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e8       	ldi	r20, 0x80	; 128
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a02:	88 23       	and	r24, r24
    3a04:	44 f4       	brge	.+16     	; 0x3a16 <app_start+0x678>
		__ticks = 1;
    3a06:	fe 01       	movw	r30, r28
    3a08:	e7 5a       	subi	r30, 0xA7	; 167
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
    3a14:	64 c0       	rjmp	.+200    	; 0x3ade <app_start+0x740>
	else if (__tmp > 65535)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e5 5a       	subi	r30, 0xA5	; 165
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	3f ef       	ldi	r19, 0xFF	; 255
    3a28:	4f e7       	ldi	r20, 0x7F	; 127
    3a2a:	57 e4       	ldi	r21, 0x47	; 71
    3a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a30:	18 16       	cp	r1, r24
    3a32:	0c f0       	brlt	.+2      	; 0x3a36 <app_start+0x698>
    3a34:	43 c0       	rjmp	.+134    	; 0x3abc <app_start+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a36:	fe 01       	movw	r30, r28
    3a38:	e1 5a       	subi	r30, 0xA1	; 161
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e2       	ldi	r20, 0x20	; 32
    3a4a:	51 e4       	ldi	r21, 0x41	; 65
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8e 01       	movw	r16, r28
    3a56:	07 5a       	subi	r16, 0xA7	; 167
    3a58:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	f8 01       	movw	r30, r16
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	1f c0       	rjmp	.+62     	; 0x3aac <app_start+0x70e>
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e9 5a       	subi	r30, 0xA9	; 169
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	80 e9       	ldi	r24, 0x90	; 144
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e9 5a       	subi	r30, 0xA9	; 169
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 81       	ld	r24, Z
    3a84:	91 81       	ldd	r25, Z+1	; 0x01
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <app_start+0x6e8>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e9 5a       	subi	r30, 0xA9	; 169
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a94:	de 01       	movw	r26, r28
    3a96:	a7 5a       	subi	r26, 0xA7	; 167
    3a98:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e7 5a       	subi	r30, 0xA7	; 167
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	9c 93       	st	X, r25
    3aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e7 5a       	subi	r30, 0xA7	; 167
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	d1 f6       	brne	.-76     	; 0x3a6e <app_start+0x6d0>
    3aba:	27 c0       	rjmp	.+78     	; 0x3b0a <app_start+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	8e 01       	movw	r16, r28
    3abe:	07 5a       	subi	r16, 0xA7	; 167
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e5 5a       	subi	r30, 0xA5	; 165
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	f8 01       	movw	r30, r16
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	de 01       	movw	r26, r28
    3ae0:	ab 5a       	subi	r26, 0xAB	; 171
    3ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e7 5a       	subi	r30, 0xA7	; 167
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	8d 93       	st	X+, r24
    3af0:	9c 93       	st	X, r25
    3af2:	fe 01       	movw	r30, r28
    3af4:	eb 5a       	subi	r30, 0xAB	; 171
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <app_start+0x75e>
    3b00:	fe 01       	movw	r30, r28
    3b02:	eb 5a       	subi	r30, 0xAB	; 171
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_4bit_clear(&board_lcd);
    3b0a:	8c eb       	ldi	r24, 0xBC	; 188
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
    3b12:	fe 01       	movw	r30, r28
    3b14:	ef 5a       	subi	r30, 0xAF	; 175
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	aa ef       	ldi	r26, 0xFA	; 250
    3b1e:	b3 e4       	ldi	r27, 0x43	; 67
    3b20:	80 83       	st	Z, r24
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	a2 83       	std	Z+2, r26	; 0x02
    3b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b28:	8e 01       	movw	r16, r28
    3b2a:	03 5b       	subi	r16, 0xB3	; 179
    3b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2e:	fe 01       	movw	r30, r28
    3b30:	ef 5a       	subi	r30, 0xAF	; 175
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a e7       	ldi	r20, 0x7A	; 122
    3b42:	55 e4       	ldi	r21, 0x45	; 69
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	f8 01       	movw	r30, r16
    3b4e:	80 83       	st	Z, r24
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	a2 83       	std	Z+2, r26	; 0x02
    3b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 5b       	subi	r30, 0xB3	; 179
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	44 f4       	brge	.+16     	; 0x3b84 <app_start+0x7e6>
		__ticks = 1;
    3b74:	fe 01       	movw	r30, r28
    3b76:	e5 5b       	subi	r30, 0xB5	; 181
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	80 83       	st	Z, r24
    3b82:	64 c0       	rjmp	.+200    	; 0x3c4c <app_start+0x8ae>
	else if (__tmp > 65535)
    3b84:	fe 01       	movw	r30, r28
    3b86:	e3 5b       	subi	r30, 0xB3	; 179
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	60 81       	ld	r22, Z
    3b8c:	71 81       	ldd	r23, Z+1	; 0x01
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	93 81       	ldd	r25, Z+3	; 0x03
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	3f ef       	ldi	r19, 0xFF	; 255
    3b96:	4f e7       	ldi	r20, 0x7F	; 127
    3b98:	57 e4       	ldi	r21, 0x47	; 71
    3b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b9e:	18 16       	cp	r1, r24
    3ba0:	0c f0       	brlt	.+2      	; 0x3ba4 <app_start+0x806>
    3ba2:	43 c0       	rjmp	.+134    	; 0x3c2a <app_start+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ef 5a       	subi	r30, 0xAF	; 175
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	60 81       	ld	r22, Z
    3bac:	71 81       	ldd	r23, Z+1	; 0x01
    3bae:	82 81       	ldd	r24, Z+2	; 0x02
    3bb0:	93 81       	ldd	r25, Z+3	; 0x03
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e2       	ldi	r20, 0x20	; 32
    3bb8:	51 e4       	ldi	r21, 0x41	; 65
    3bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	8e 01       	movw	r16, r28
    3bc4:	05 5b       	subi	r16, 0xB5	; 181
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	80 83       	st	Z, r24
    3bda:	1f c0       	rjmp	.+62     	; 0x3c1a <app_start+0x87c>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e7 5b       	subi	r30, 0xB7	; 183
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 e9       	ldi	r24, 0x90	; 144
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	80 83       	st	Z, r24
    3bea:	fe 01       	movw	r30, r28
    3bec:	e7 5b       	subi	r30, 0xB7	; 183
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <app_start+0x856>
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e7 5b       	subi	r30, 0xB7	; 183
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c02:	de 01       	movw	r26, r28
    3c04:	a5 5b       	subi	r26, 0xB5	; 181
    3c06:	bf 4f       	sbci	r27, 0xFF	; 255
    3c08:	fe 01       	movw	r30, r28
    3c0a:	e5 5b       	subi	r30, 0xB5	; 181
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	80 81       	ld	r24, Z
    3c10:	91 81       	ldd	r25, Z+1	; 0x01
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	9c 93       	st	X, r25
    3c18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 5b       	subi	r30, 0xB5	; 181
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	00 97       	sbiw	r24, 0x00	; 0
    3c26:	d1 f6       	brne	.-76     	; 0x3bdc <app_start+0x83e>
    3c28:	27 c0       	rjmp	.+78     	; 0x3c78 <app_start+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2a:	8e 01       	movw	r16, r28
    3c2c:	05 5b       	subi	r16, 0xB5	; 181
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e3 5b       	subi	r30, 0xB3	; 179
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	f8 01       	movw	r30, r16
    3c48:	91 83       	std	Z+1, r25	; 0x01
    3c4a:	80 83       	st	Z, r24
    3c4c:	de 01       	movw	r26, r28
    3c4e:	a9 5b       	subi	r26, 0xB9	; 185
    3c50:	bf 4f       	sbci	r27, 0xFF	; 255
    3c52:	fe 01       	movw	r30, r28
    3c54:	e5 5b       	subi	r30, 0xB5	; 181
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	8d 93       	st	X+, r24
    3c5e:	9c 93       	st	X, r25
    3c60:	fe 01       	movw	r30, r28
    3c62:	e9 5b       	subi	r30, 0xB9	; 185
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <app_start+0x8cc>
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e9 5b       	subi	r30, 0xB9	; 185
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	91 83       	std	Z+1, r25	; 0x01
    3c76:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "No operator!!!");
    3c78:	8c eb       	ldi	r24, 0xBC	; 188
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	2e e6       	ldi	r18, 0x6E	; 110
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	62 e0       	ldi	r22, 0x02	; 2
    3c82:	41 e0       	ldi	r20, 0x01	; 1
    3c84:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 5b       	subi	r30, 0xBD	; 189
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	aa ef       	ldi	r26, 0xFA	; 250
    3c94:	b3 e4       	ldi	r27, 0x43	; 67
    3c96:	80 83       	st	Z, r24
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	a2 83       	std	Z+2, r26	; 0x02
    3c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9e:	8e 01       	movw	r16, r28
    3ca0:	01 5c       	subi	r16, 0xC1	; 193
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ed 5b       	subi	r30, 0xBD	; 189
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	60 81       	ld	r22, Z
    3cac:	71 81       	ldd	r23, Z+1	; 0x01
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	93 81       	ldd	r25, Z+3	; 0x03
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	4a e7       	ldi	r20, 0x7A	; 122
    3cb8:	55 e4       	ldi	r21, 0x45	; 69
    3cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	f8 01       	movw	r30, r16
    3cc4:	80 83       	st	Z, r24
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	a2 83       	std	Z+2, r26	; 0x02
    3cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ccc:	fe 01       	movw	r30, r28
    3cce:	ff 96       	adiw	r30, 0x3f	; 63
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e8       	ldi	r20, 0x80	; 128
    3cde:	5f e3       	ldi	r21, 0x3F	; 63
    3ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce4:	88 23       	and	r24, r24
    3ce6:	2c f4       	brge	.+10     	; 0x3cf2 <app_start+0x954>
		__ticks = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	9e af       	std	Y+62, r25	; 0x3e
    3cee:	8d af       	std	Y+61, r24	; 0x3d
    3cf0:	46 c0       	rjmp	.+140    	; 0x3d7e <app_start+0x9e0>
	else if (__tmp > 65535)
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ff 96       	adiw	r30, 0x3f	; 63
    3cf6:	60 81       	ld	r22, Z
    3cf8:	71 81       	ldd	r23, Z+1	; 0x01
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	3f ef       	ldi	r19, 0xFF	; 255
    3d02:	4f e7       	ldi	r20, 0x7F	; 127
    3d04:	57 e4       	ldi	r21, 0x47	; 71
    3d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d0a:	18 16       	cp	r1, r24
    3d0c:	64 f5       	brge	.+88     	; 0x3d66 <app_start+0x9c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0e:	fe 01       	movw	r30, r28
    3d10:	ed 5b       	subi	r30, 0xBD	; 189
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	60 81       	ld	r22, Z
    3d16:	71 81       	ldd	r23, Z+1	; 0x01
    3d18:	82 81       	ldd	r24, Z+2	; 0x02
    3d1a:	93 81       	ldd	r25, Z+3	; 0x03
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	40 e2       	ldi	r20, 0x20	; 32
    3d22:	51 e4       	ldi	r21, 0x41	; 65
    3d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	9e af       	std	Y+62, r25	; 0x3e
    3d3a:	8d af       	std	Y+61, r24	; 0x3d
    3d3c:	0f c0       	rjmp	.+30     	; 0x3d5c <app_start+0x9be>
    3d3e:	80 e9       	ldi	r24, 0x90	; 144
    3d40:	91 e0       	ldi	r25, 0x01	; 1
    3d42:	9c af       	std	Y+60, r25	; 0x3c
    3d44:	8b af       	std	Y+59, r24	; 0x3b
    3d46:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d48:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	f1 f7       	brne	.-4      	; 0x3d4a <app_start+0x9ac>
    3d4e:	9c af       	std	Y+60, r25	; 0x3c
    3d50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	9e af       	std	Y+62, r25	; 0x3e
    3d5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	69 f7       	brne	.-38     	; 0x3d3e <app_start+0x9a0>
    3d64:	16 c0       	rjmp	.+44     	; 0x3d92 <app_start+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d66:	fe 01       	movw	r30, r28
    3d68:	ff 96       	adiw	r30, 0x3f	; 63
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	9e af       	std	Y+62, r25	; 0x3e
    3d7c:	8d af       	std	Y+61, r24	; 0x3d
    3d7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d80:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d82:	9a af       	std	Y+58, r25	; 0x3a
    3d84:	89 af       	std	Y+57, r24	; 0x39
    3d86:	89 ad       	ldd	r24, Y+57	; 0x39
    3d88:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	f1 f7       	brne	.-4      	; 0x3d8a <app_start+0x9ec>
    3d8e:	9a af       	std	Y+58, r25	; 0x3a
    3d90:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				LCD_4bit_clear(&board_lcd);
    3d92:	8c eb       	ldi	r24, 0xBC	; 188
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
    3d9a:	8e c1       	rjmp	.+796    	; 0x40b8 <app_start+0xd1a>
			}
		}
		else
		{
			counter++;
    3d9c:	80 91 da 00 	lds	r24, 0x00DA
    3da0:	8f 5f       	subi	r24, 0xFF	; 255
    3da2:	80 93 da 00 	sts	0x00DA, r24
			if (16 == counter) /* first row of the LCD is filled */
    3da6:	80 91 da 00 	lds	r24, 0x00DA
    3daa:	80 31       	cpi	r24, 0x10	; 16
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <app_start+0xa12>
    3dae:	84 c1       	rjmp	.+776    	; 0x40b8 <app_start+0xd1a>
			{
				/* reset str array to null characters.
				 */
				for(counter = 0; counter < 16; counter++)
    3db0:	10 92 da 00 	sts	0x00DA, r1
    3db4:	0d c0       	rjmp	.+26     	; 0x3dd0 <app_start+0xa32>
				{
					str[counter] = '\0';
    3db6:	80 91 da 00 	lds	r24, 0x00DA
    3dba:	88 2f       	mov	r24, r24
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	e6 53       	subi	r30, 0x36	; 54
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	10 82       	st	Z, r1
			counter++;
			if (16 == counter) /* first row of the LCD is filled */
			{
				/* reset str array to null characters.
				 */
				for(counter = 0; counter < 16; counter++)
    3dc6:	80 91 da 00 	lds	r24, 0x00DA
    3dca:	8f 5f       	subi	r24, 0xFF	; 255
    3dcc:	80 93 da 00 	sts	0x00DA, r24
    3dd0:	80 91 da 00 	lds	r24, 0x00DA
    3dd4:	80 31       	cpi	r24, 0x10	; 16
    3dd6:	78 f3       	brcs	.-34     	; 0x3db6 <app_start+0xa18>
				{
					str[counter] = '\0';
				}
				counter = 0; /* reset counter to zero */
    3dd8:	10 92 da 00 	sts	0x00DA, r1

				LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "!! OVERFLOW !!");
    3ddc:	8c eb       	ldi	r24, 0xBC	; 188
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	2d e7       	ldi	r18, 0x7D	; 125
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	62 e0       	ldi	r22, 0x02	; 2
    3de6:	41 e0       	ldi	r20, 0x01	; 1
    3de8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	aa ef       	ldi	r26, 0xFA	; 250
    3df2:	b3 e4       	ldi	r27, 0x43	; 67
    3df4:	8d ab       	std	Y+53, r24	; 0x35
    3df6:	9e ab       	std	Y+54, r25	; 0x36
    3df8:	af ab       	std	Y+55, r26	; 0x37
    3dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    3dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    3e00:	8f a9       	ldd	r24, Y+55	; 0x37
    3e02:	98 ad       	ldd	r25, Y+56	; 0x38
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	4a e7       	ldi	r20, 0x7A	; 122
    3e0a:	55 e4       	ldi	r21, 0x45	; 69
    3e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	89 ab       	std	Y+49, r24	; 0x31
    3e16:	9a ab       	std	Y+50, r25	; 0x32
    3e18:	ab ab       	std	Y+51, r26	; 0x33
    3e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e20:	8b a9       	ldd	r24, Y+51	; 0x33
    3e22:	9c a9       	ldd	r25, Y+52	; 0x34
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e8       	ldi	r20, 0x80	; 128
    3e2a:	5f e3       	ldi	r21, 0x3F	; 63
    3e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e30:	88 23       	and	r24, r24
    3e32:	2c f4       	brge	.+10     	; 0x3e3e <app_start+0xaa0>
		__ticks = 1;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	98 ab       	std	Y+48, r25	; 0x30
    3e3a:	8f a7       	std	Y+47, r24	; 0x2f
    3e3c:	3f c0       	rjmp	.+126    	; 0x3ebc <app_start+0xb1e>
	else if (__tmp > 65535)
    3e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3e40:	7a a9       	ldd	r23, Y+50	; 0x32
    3e42:	8b a9       	ldd	r24, Y+51	; 0x33
    3e44:	9c a9       	ldd	r25, Y+52	; 0x34
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	3f ef       	ldi	r19, 0xFF	; 255
    3e4a:	4f e7       	ldi	r20, 0x7F	; 127
    3e4c:	57 e4       	ldi	r21, 0x47	; 71
    3e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e52:	18 16       	cp	r1, r24
    3e54:	4c f5       	brge	.+82     	; 0x3ea8 <app_start+0xb0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e56:	6d a9       	ldd	r22, Y+53	; 0x35
    3e58:	7e a9       	ldd	r23, Y+54	; 0x36
    3e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    3e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e2       	ldi	r20, 0x20	; 32
    3e64:	51 e4       	ldi	r21, 0x41	; 65
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	bc 01       	movw	r22, r24
    3e70:	cd 01       	movw	r24, r26
    3e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	98 ab       	std	Y+48, r25	; 0x30
    3e7c:	8f a7       	std	Y+47, r24	; 0x2f
    3e7e:	0f c0       	rjmp	.+30     	; 0x3e9e <app_start+0xb00>
    3e80:	80 e9       	ldi	r24, 0x90	; 144
    3e82:	91 e0       	ldi	r25, 0x01	; 1
    3e84:	9e a7       	std	Y+46, r25	; 0x2e
    3e86:	8d a7       	std	Y+45, r24	; 0x2d
    3e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	f1 f7       	brne	.-4      	; 0x3e8c <app_start+0xaee>
    3e90:	9e a7       	std	Y+46, r25	; 0x2e
    3e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e96:	98 a9       	ldd	r25, Y+48	; 0x30
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	98 ab       	std	Y+48, r25	; 0x30
    3e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	69 f7       	brne	.-38     	; 0x3e80 <app_start+0xae2>
    3ea6:	14 c0       	rjmp	.+40     	; 0x3ed0 <app_start+0xb32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    3eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    3eac:	8b a9       	ldd	r24, Y+51	; 0x33
    3eae:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	98 ab       	std	Y+48, r25	; 0x30
    3eba:	8f a7       	std	Y+47, r24	; 0x2f
    3ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    3ec0:	9c a7       	std	Y+44, r25	; 0x2c
    3ec2:	8b a7       	std	Y+43, r24	; 0x2b
    3ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <app_start+0xb2a>
    3ecc:	9c a7       	std	Y+44, r25	; 0x2c
    3ece:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_4bit_clear(&board_lcd);
    3ed0:	8c eb       	ldi	r24, 0xBC	; 188
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	aa ef       	ldi	r26, 0xFA	; 250
    3ede:	b3 e4       	ldi	r27, 0x43	; 67
    3ee0:	8f a3       	std	Y+39, r24	; 0x27
    3ee2:	98 a7       	std	Y+40, r25	; 0x28
    3ee4:	a9 a7       	std	Y+41, r26	; 0x29
    3ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eea:	78 a5       	ldd	r23, Y+40	; 0x28
    3eec:	89 a5       	ldd	r24, Y+41	; 0x29
    3eee:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a e7       	ldi	r20, 0x7A	; 122
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	8b a3       	std	Y+35, r24	; 0x23
    3f02:	9c a3       	std	Y+36, r25	; 0x24
    3f04:	ad a3       	std	Y+37, r26	; 0x25
    3f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f08:	6b a1       	ldd	r22, Y+35	; 0x23
    3f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e8       	ldi	r20, 0x80	; 128
    3f16:	5f e3       	ldi	r21, 0x3F	; 63
    3f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1c:	88 23       	and	r24, r24
    3f1e:	2c f4       	brge	.+10     	; 0x3f2a <app_start+0xb8c>
		__ticks = 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	9a a3       	std	Y+34, r25	; 0x22
    3f26:	89 a3       	std	Y+33, r24	; 0x21
    3f28:	3f c0       	rjmp	.+126    	; 0x3fa8 <app_start+0xc0a>
	else if (__tmp > 65535)
    3f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f30:	9e a1       	ldd	r25, Y+38	; 0x26
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	3f ef       	ldi	r19, 0xFF	; 255
    3f36:	4f e7       	ldi	r20, 0x7F	; 127
    3f38:	57 e4       	ldi	r21, 0x47	; 71
    3f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3e:	18 16       	cp	r1, r24
    3f40:	4c f5       	brge	.+82     	; 0x3f94 <app_start+0xbf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f42:	6f a1       	ldd	r22, Y+39	; 0x27
    3f44:	78 a5       	ldd	r23, Y+40	; 0x28
    3f46:	89 a5       	ldd	r24, Y+41	; 0x29
    3f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e2       	ldi	r20, 0x20	; 32
    3f50:	51 e4       	ldi	r21, 0x41	; 65
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	9a a3       	std	Y+34, r25	; 0x22
    3f68:	89 a3       	std	Y+33, r24	; 0x21
    3f6a:	0f c0       	rjmp	.+30     	; 0x3f8a <app_start+0xbec>
    3f6c:	80 e9       	ldi	r24, 0x90	; 144
    3f6e:	91 e0       	ldi	r25, 0x01	; 1
    3f70:	98 a3       	std	Y+32, r25	; 0x20
    3f72:	8f 8f       	std	Y+31, r24	; 0x1f
    3f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f76:	98 a1       	ldd	r25, Y+32	; 0x20
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <app_start+0xbda>
    3f7c:	98 a3       	std	Y+32, r25	; 0x20
    3f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f80:	89 a1       	ldd	r24, Y+33	; 0x21
    3f82:	9a a1       	ldd	r25, Y+34	; 0x22
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	9a a3       	std	Y+34, r25	; 0x22
    3f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	69 f7       	brne	.-38     	; 0x3f6c <app_start+0xbce>
    3f92:	14 c0       	rjmp	.+40     	; 0x3fbc <app_start+0xc1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f94:	6b a1       	ldd	r22, Y+35	; 0x23
    3f96:	7c a1       	ldd	r23, Y+36	; 0x24
    3f98:	8d a1       	ldd	r24, Y+37	; 0x25
    3f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9a a3       	std	Y+34, r25	; 0x22
    3fa6:	89 a3       	std	Y+33, r24	; 0x21
    3fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    3faa:	9a a1       	ldd	r25, Y+34	; 0x22
    3fac:	9e 8f       	std	Y+30, r25	; 0x1e
    3fae:	8d 8f       	std	Y+29, r24	; 0x1d
    3fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <app_start+0xc16>
    3fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    3fba:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				LCD_4bit_sendStringAtPosition(&board_lcd,2 , 1, "!! OVERFLOW !!");
    3fbc:	8c eb       	ldi	r24, 0xBC	; 188
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	2d e7       	ldi	r18, 0x7D	; 125
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	62 e0       	ldi	r22, 0x02	; 2
    3fc6:	41 e0       	ldi	r20, 0x01	; 1
    3fc8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	aa ef       	ldi	r26, 0xFA	; 250
    3fd2:	b3 e4       	ldi	r27, 0x43	; 67
    3fd4:	89 8f       	std	Y+25, r24	; 0x19
    3fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    3fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    3fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	4a e7       	ldi	r20, 0x7A	; 122
    3fea:	55 e4       	ldi	r21, 0x45	; 69
    3fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	8d 8b       	std	Y+21, r24	; 0x15
    3ff6:	9e 8b       	std	Y+22, r25	; 0x16
    3ff8:	af 8b       	std	Y+23, r26	; 0x17
    3ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    4000:	8f 89       	ldd	r24, Y+23	; 0x17
    4002:	98 8d       	ldd	r25, Y+24	; 0x18
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	40 e8       	ldi	r20, 0x80	; 128
    400a:	5f e3       	ldi	r21, 0x3F	; 63
    400c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4010:	88 23       	and	r24, r24
    4012:	2c f4       	brge	.+10     	; 0x401e <app_start+0xc80>
		__ticks = 1;
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	9c 8b       	std	Y+20, r25	; 0x14
    401a:	8b 8b       	std	Y+19, r24	; 0x13
    401c:	3f c0       	rjmp	.+126    	; 0x409c <app_start+0xcfe>
	else if (__tmp > 65535)
    401e:	6d 89       	ldd	r22, Y+21	; 0x15
    4020:	7e 89       	ldd	r23, Y+22	; 0x16
    4022:	8f 89       	ldd	r24, Y+23	; 0x17
    4024:	98 8d       	ldd	r25, Y+24	; 0x18
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	3f ef       	ldi	r19, 0xFF	; 255
    402a:	4f e7       	ldi	r20, 0x7F	; 127
    402c:	57 e4       	ldi	r21, 0x47	; 71
    402e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4032:	18 16       	cp	r1, r24
    4034:	4c f5       	brge	.+82     	; 0x4088 <app_start+0xcea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4036:	69 8d       	ldd	r22, Y+25	; 0x19
    4038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e2       	ldi	r20, 0x20	; 32
    4044:	51 e4       	ldi	r21, 0x41	; 65
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	bc 01       	movw	r22, r24
    4050:	cd 01       	movw	r24, r26
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9c 8b       	std	Y+20, r25	; 0x14
    405c:	8b 8b       	std	Y+19, r24	; 0x13
    405e:	0f c0       	rjmp	.+30     	; 0x407e <app_start+0xce0>
    4060:	80 e9       	ldi	r24, 0x90	; 144
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	9a 8b       	std	Y+18, r25	; 0x12
    4066:	89 8b       	std	Y+17, r24	; 0x11
    4068:	89 89       	ldd	r24, Y+17	; 0x11
    406a:	9a 89       	ldd	r25, Y+18	; 0x12
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	f1 f7       	brne	.-4      	; 0x406c <app_start+0xcce>
    4070:	9a 8b       	std	Y+18, r25	; 0x12
    4072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4074:	8b 89       	ldd	r24, Y+19	; 0x13
    4076:	9c 89       	ldd	r25, Y+20	; 0x14
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	9c 8b       	std	Y+20, r25	; 0x14
    407c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407e:	8b 89       	ldd	r24, Y+19	; 0x13
    4080:	9c 89       	ldd	r25, Y+20	; 0x14
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	69 f7       	brne	.-38     	; 0x4060 <app_start+0xcc2>
    4086:	14 c0       	rjmp	.+40     	; 0x40b0 <app_start+0xd12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4088:	6d 89       	ldd	r22, Y+21	; 0x15
    408a:	7e 89       	ldd	r23, Y+22	; 0x16
    408c:	8f 89       	ldd	r24, Y+23	; 0x17
    408e:	98 8d       	ldd	r25, Y+24	; 0x18
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	9c 8b       	std	Y+20, r25	; 0x14
    409a:	8b 8b       	std	Y+19, r24	; 0x13
    409c:	8b 89       	ldd	r24, Y+19	; 0x13
    409e:	9c 89       	ldd	r25, Y+20	; 0x14
    40a0:	98 8b       	std	Y+16, r25	; 0x10
    40a2:	8f 87       	std	Y+15, r24	; 0x0f
    40a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a6:	98 89       	ldd	r25, Y+16	; 0x10
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	f1 f7       	brne	.-4      	; 0x40a8 <app_start+0xd0a>
    40ac:	98 8b       	std	Y+16, r25	; 0x10
    40ae:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_4bit_clear(&board_lcd);
    40b0:	8c eb       	ldi	r24, 0xBC	; 188
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_4bit_clear>
			}

		}
		/* print the content of str array on the LCD */
		LCD_4bit_sendStringAtPosition(&board_lcd,1 , 1, str);
    40b8:	8c eb       	ldi	r24, 0xBC	; 188
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	2a ec       	ldi	r18, 0xCA	; 202
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	61 e0       	ldi	r22, 0x01	; 1
    40c2:	41 e0       	ldi	r20, 0x01	; 1
    40c4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_4bit_sendStringAtPosition>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	aa e7       	ldi	r26, 0x7A	; 122
    40ce:	b3 e4       	ldi	r27, 0x43	; 67
    40d0:	8b 87       	std	Y+11, r24	; 0x0b
    40d2:	9c 87       	std	Y+12, r25	; 0x0c
    40d4:	ad 87       	std	Y+13, r26	; 0x0d
    40d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40da:	7c 85       	ldd	r23, Y+12	; 0x0c
    40dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40de:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	4a e7       	ldi	r20, 0x7A	; 122
    40e6:	55 e4       	ldi	r21, 0x45	; 69
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	8f 83       	std	Y+7, r24	; 0x07
    40f2:	98 87       	std	Y+8, r25	; 0x08
    40f4:	a9 87       	std	Y+9, r26	; 0x09
    40f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40f8:	6f 81       	ldd	r22, Y+7	; 0x07
    40fa:	78 85       	ldd	r23, Y+8	; 0x08
    40fc:	89 85       	ldd	r24, Y+9	; 0x09
    40fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e8       	ldi	r20, 0x80	; 128
    4106:	5f e3       	ldi	r21, 0x3F	; 63
    4108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410c:	88 23       	and	r24, r24
    410e:	2c f4       	brge	.+10     	; 0x411a <app_start+0xd7c>
		__ticks = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9e 83       	std	Y+6, r25	; 0x06
    4116:	8d 83       	std	Y+5, r24	; 0x05
    4118:	3f c0       	rjmp	.+126    	; 0x4198 <app_start+0xdfa>
	else if (__tmp > 65535)
    411a:	6f 81       	ldd	r22, Y+7	; 0x07
    411c:	78 85       	ldd	r23, Y+8	; 0x08
    411e:	89 85       	ldd	r24, Y+9	; 0x09
    4120:	9a 85       	ldd	r25, Y+10	; 0x0a
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	3f ef       	ldi	r19, 0xFF	; 255
    4126:	4f e7       	ldi	r20, 0x7F	; 127
    4128:	57 e4       	ldi	r21, 0x47	; 71
    412a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    412e:	18 16       	cp	r1, r24
    4130:	4c f5       	brge	.+82     	; 0x4184 <app_start+0xde6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4132:	6b 85       	ldd	r22, Y+11	; 0x0b
    4134:	7c 85       	ldd	r23, Y+12	; 0x0c
    4136:	8d 85       	ldd	r24, Y+13	; 0x0d
    4138:	9e 85       	ldd	r25, Y+14	; 0x0e
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	51 e4       	ldi	r21, 0x41	; 65
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	9e 83       	std	Y+6, r25	; 0x06
    4158:	8d 83       	std	Y+5, r24	; 0x05
    415a:	0f c0       	rjmp	.+30     	; 0x417a <app_start+0xddc>
    415c:	80 e9       	ldi	r24, 0x90	; 144
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	9c 83       	std	Y+4, r25	; 0x04
    4162:	8b 83       	std	Y+3, r24	; 0x03
    4164:	8b 81       	ldd	r24, Y+3	; 0x03
    4166:	9c 81       	ldd	r25, Y+4	; 0x04
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <app_start+0xdca>
    416c:	9c 83       	std	Y+4, r25	; 0x04
    416e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4170:	8d 81       	ldd	r24, Y+5	; 0x05
    4172:	9e 81       	ldd	r25, Y+6	; 0x06
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	9e 83       	std	Y+6, r25	; 0x06
    4178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	9e 81       	ldd	r25, Y+6	; 0x06
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	69 f7       	brne	.-38     	; 0x415c <app_start+0xdbe>
    4182:	14 c0       	rjmp	.+40     	; 0x41ac <app_start+0xe0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4184:	6f 81       	ldd	r22, Y+7	; 0x07
    4186:	78 85       	ldd	r23, Y+8	; 0x08
    4188:	89 85       	ldd	r24, Y+9	; 0x09
    418a:	9a 85       	ldd	r25, Y+10	; 0x0a
    418c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	9e 83       	std	Y+6, r25	; 0x06
    4196:	8d 83       	std	Y+5, r24	; 0x05
    4198:	8d 81       	ldd	r24, Y+5	; 0x05
    419a:	9e 81       	ldd	r25, Y+6	; 0x06
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	89 83       	std	Y+1, r24	; 0x01
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <app_start+0xe06>
    41a8:	9a 83       	std	Y+2, r25	; 0x02
    41aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250); /* delay 250 ms to avoid reading the button multiple times */
	}
}
    41ac:	ce 55       	subi	r28, 0x5E	; 94
    41ae:	df 4f       	sbci	r29, 0xFF	; 255
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	08 95       	ret

000041c8 <main>:
#include <avr/io.h>
#include <stdlib.h>


int main()
{
    41c8:	df 93       	push	r29
    41ca:	cf 93       	push	r28
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
	app_init();
    41d0:	0e 94 c0 19 	call	0x3380	; 0x3380 <app_init>

	while(1)
	{
		app_start();
    41d4:	0e 94 cf 19 	call	0x339e	; 0x339e <app_start>
    41d8:	fd cf       	rjmp	.-6      	; 0x41d4 <main+0xc>

000041da <__mulsi3>:
    41da:	62 9f       	mul	r22, r18
    41dc:	d0 01       	movw	r26, r0
    41de:	73 9f       	mul	r23, r19
    41e0:	f0 01       	movw	r30, r0
    41e2:	82 9f       	mul	r24, r18
    41e4:	e0 0d       	add	r30, r0
    41e6:	f1 1d       	adc	r31, r1
    41e8:	64 9f       	mul	r22, r20
    41ea:	e0 0d       	add	r30, r0
    41ec:	f1 1d       	adc	r31, r1
    41ee:	92 9f       	mul	r25, r18
    41f0:	f0 0d       	add	r31, r0
    41f2:	83 9f       	mul	r24, r19
    41f4:	f0 0d       	add	r31, r0
    41f6:	74 9f       	mul	r23, r20
    41f8:	f0 0d       	add	r31, r0
    41fa:	65 9f       	mul	r22, r21
    41fc:	f0 0d       	add	r31, r0
    41fe:	99 27       	eor	r25, r25
    4200:	72 9f       	mul	r23, r18
    4202:	b0 0d       	add	r27, r0
    4204:	e1 1d       	adc	r30, r1
    4206:	f9 1f       	adc	r31, r25
    4208:	63 9f       	mul	r22, r19
    420a:	b0 0d       	add	r27, r0
    420c:	e1 1d       	adc	r30, r1
    420e:	f9 1f       	adc	r31, r25
    4210:	bd 01       	movw	r22, r26
    4212:	cf 01       	movw	r24, r30
    4214:	11 24       	eor	r1, r1
    4216:	08 95       	ret

00004218 <__udivmodsi4>:
    4218:	a1 e2       	ldi	r26, 0x21	; 33
    421a:	1a 2e       	mov	r1, r26
    421c:	aa 1b       	sub	r26, r26
    421e:	bb 1b       	sub	r27, r27
    4220:	fd 01       	movw	r30, r26
    4222:	0d c0       	rjmp	.+26     	; 0x423e <__udivmodsi4_ep>

00004224 <__udivmodsi4_loop>:
    4224:	aa 1f       	adc	r26, r26
    4226:	bb 1f       	adc	r27, r27
    4228:	ee 1f       	adc	r30, r30
    422a:	ff 1f       	adc	r31, r31
    422c:	a2 17       	cp	r26, r18
    422e:	b3 07       	cpc	r27, r19
    4230:	e4 07       	cpc	r30, r20
    4232:	f5 07       	cpc	r31, r21
    4234:	20 f0       	brcs	.+8      	; 0x423e <__udivmodsi4_ep>
    4236:	a2 1b       	sub	r26, r18
    4238:	b3 0b       	sbc	r27, r19
    423a:	e4 0b       	sbc	r30, r20
    423c:	f5 0b       	sbc	r31, r21

0000423e <__udivmodsi4_ep>:
    423e:	66 1f       	adc	r22, r22
    4240:	77 1f       	adc	r23, r23
    4242:	88 1f       	adc	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	1a 94       	dec	r1
    4248:	69 f7       	brne	.-38     	; 0x4224 <__udivmodsi4_loop>
    424a:	60 95       	com	r22
    424c:	70 95       	com	r23
    424e:	80 95       	com	r24
    4250:	90 95       	com	r25
    4252:	9b 01       	movw	r18, r22
    4254:	ac 01       	movw	r20, r24
    4256:	bd 01       	movw	r22, r26
    4258:	cf 01       	movw	r24, r30
    425a:	08 95       	ret

0000425c <__prologue_saves__>:
    425c:	2f 92       	push	r2
    425e:	3f 92       	push	r3
    4260:	4f 92       	push	r4
    4262:	5f 92       	push	r5
    4264:	6f 92       	push	r6
    4266:	7f 92       	push	r7
    4268:	8f 92       	push	r8
    426a:	9f 92       	push	r9
    426c:	af 92       	push	r10
    426e:	bf 92       	push	r11
    4270:	cf 92       	push	r12
    4272:	df 92       	push	r13
    4274:	ef 92       	push	r14
    4276:	ff 92       	push	r15
    4278:	0f 93       	push	r16
    427a:	1f 93       	push	r17
    427c:	cf 93       	push	r28
    427e:	df 93       	push	r29
    4280:	cd b7       	in	r28, 0x3d	; 61
    4282:	de b7       	in	r29, 0x3e	; 62
    4284:	ca 1b       	sub	r28, r26
    4286:	db 0b       	sbc	r29, r27
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	09 94       	ijmp

00004294 <__epilogue_restores__>:
    4294:	2a 88       	ldd	r2, Y+18	; 0x12
    4296:	39 88       	ldd	r3, Y+17	; 0x11
    4298:	48 88       	ldd	r4, Y+16	; 0x10
    429a:	5f 84       	ldd	r5, Y+15	; 0x0f
    429c:	6e 84       	ldd	r6, Y+14	; 0x0e
    429e:	7d 84       	ldd	r7, Y+13	; 0x0d
    42a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    42a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    42a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    42a6:	b9 84       	ldd	r11, Y+9	; 0x09
    42a8:	c8 84       	ldd	r12, Y+8	; 0x08
    42aa:	df 80       	ldd	r13, Y+7	; 0x07
    42ac:	ee 80       	ldd	r14, Y+6	; 0x06
    42ae:	fd 80       	ldd	r15, Y+5	; 0x05
    42b0:	0c 81       	ldd	r16, Y+4	; 0x04
    42b2:	1b 81       	ldd	r17, Y+3	; 0x03
    42b4:	aa 81       	ldd	r26, Y+2	; 0x02
    42b6:	b9 81       	ldd	r27, Y+1	; 0x01
    42b8:	ce 0f       	add	r28, r30
    42ba:	d1 1d       	adc	r29, r1
    42bc:	0f b6       	in	r0, 0x3f	; 63
    42be:	f8 94       	cli
    42c0:	de bf       	out	0x3e, r29	; 62
    42c2:	0f be       	out	0x3f, r0	; 63
    42c4:	cd bf       	out	0x3d, r28	; 61
    42c6:	ed 01       	movw	r28, r26
    42c8:	08 95       	ret

000042ca <atoi>:
    42ca:	fc 01       	movw	r30, r24
    42cc:	88 27       	eor	r24, r24
    42ce:	99 27       	eor	r25, r25
    42d0:	e8 94       	clt
    42d2:	21 91       	ld	r18, Z+
    42d4:	20 32       	cpi	r18, 0x20	; 32
    42d6:	e9 f3       	breq	.-6      	; 0x42d2 <atoi+0x8>
    42d8:	29 30       	cpi	r18, 0x09	; 9
    42da:	10 f0       	brcs	.+4      	; 0x42e0 <atoi+0x16>
    42dc:	2e 30       	cpi	r18, 0x0E	; 14
    42de:	c8 f3       	brcs	.-14     	; 0x42d2 <atoi+0x8>
    42e0:	2b 32       	cpi	r18, 0x2B	; 43
    42e2:	41 f0       	breq	.+16     	; 0x42f4 <atoi+0x2a>
    42e4:	2d 32       	cpi	r18, 0x2D	; 45
    42e6:	39 f4       	brne	.+14     	; 0x42f6 <atoi+0x2c>
    42e8:	68 94       	set
    42ea:	04 c0       	rjmp	.+8      	; 0x42f4 <atoi+0x2a>
    42ec:	0e 94 83 21 	call	0x4306	; 0x4306 <__mulhi_const_10>
    42f0:	82 0f       	add	r24, r18
    42f2:	91 1d       	adc	r25, r1
    42f4:	21 91       	ld	r18, Z+
    42f6:	20 53       	subi	r18, 0x30	; 48
    42f8:	2a 30       	cpi	r18, 0x0A	; 10
    42fa:	c0 f3       	brcs	.-16     	; 0x42ec <atoi+0x22>
    42fc:	1e f4       	brtc	.+6      	; 0x4304 <atoi+0x3a>
    42fe:	90 95       	com	r25
    4300:	81 95       	neg	r24
    4302:	9f 4f       	sbci	r25, 0xFF	; 255
    4304:	08 95       	ret

00004306 <__mulhi_const_10>:
    4306:	7a e0       	ldi	r23, 0x0A	; 10
    4308:	97 9f       	mul	r25, r23
    430a:	90 2d       	mov	r25, r0
    430c:	87 9f       	mul	r24, r23
    430e:	80 2d       	mov	r24, r0
    4310:	91 0d       	add	r25, r1
    4312:	11 24       	eor	r1, r1
    4314:	08 95       	ret

00004316 <sprintf>:
    4316:	ae e0       	ldi	r26, 0x0E	; 14
    4318:	b0 e0       	ldi	r27, 0x00	; 0
    431a:	e1 e9       	ldi	r30, 0x91	; 145
    431c:	f1 e2       	ldi	r31, 0x21	; 33
    431e:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__prologue_saves__+0x1c>
    4322:	0d 89       	ldd	r16, Y+21	; 0x15
    4324:	1e 89       	ldd	r17, Y+22	; 0x16
    4326:	86 e0       	ldi	r24, 0x06	; 6
    4328:	8c 83       	std	Y+4, r24	; 0x04
    432a:	1a 83       	std	Y+2, r17	; 0x02
    432c:	09 83       	std	Y+1, r16	; 0x01
    432e:	8f ef       	ldi	r24, 0xFF	; 255
    4330:	9f e7       	ldi	r25, 0x7F	; 127
    4332:	9e 83       	std	Y+6, r25	; 0x06
    4334:	8d 83       	std	Y+5, r24	; 0x05
    4336:	9e 01       	movw	r18, r28
    4338:	27 5e       	subi	r18, 0xE7	; 231
    433a:	3f 4f       	sbci	r19, 0xFF	; 255
    433c:	ce 01       	movw	r24, r28
    433e:	01 96       	adiw	r24, 0x01	; 1
    4340:	6f 89       	ldd	r22, Y+23	; 0x17
    4342:	78 8d       	ldd	r23, Y+24	; 0x18
    4344:	a9 01       	movw	r20, r18
    4346:	0e 94 af 21 	call	0x435e	; 0x435e <vfprintf>
    434a:	2f 81       	ldd	r18, Y+7	; 0x07
    434c:	38 85       	ldd	r19, Y+8	; 0x08
    434e:	02 0f       	add	r16, r18
    4350:	13 1f       	adc	r17, r19
    4352:	f8 01       	movw	r30, r16
    4354:	10 82       	st	Z, r1
    4356:	2e 96       	adiw	r28, 0x0e	; 14
    4358:	e4 e0       	ldi	r30, 0x04	; 4
    435a:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__epilogue_restores__+0x1c>

0000435e <vfprintf>:
    435e:	ab e0       	ldi	r26, 0x0B	; 11
    4360:	b0 e0       	ldi	r27, 0x00	; 0
    4362:	e5 eb       	ldi	r30, 0xB5	; 181
    4364:	f1 e2       	ldi	r31, 0x21	; 33
    4366:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__prologue_saves__>
    436a:	3c 01       	movw	r6, r24
    436c:	2b 01       	movw	r4, r22
    436e:	5a 01       	movw	r10, r20
    4370:	fc 01       	movw	r30, r24
    4372:	17 82       	std	Z+7, r1	; 0x07
    4374:	16 82       	std	Z+6, r1	; 0x06
    4376:	83 81       	ldd	r24, Z+3	; 0x03
    4378:	81 fd       	sbrc	r24, 1
    437a:	03 c0       	rjmp	.+6      	; 0x4382 <vfprintf+0x24>
    437c:	6f ef       	ldi	r22, 0xFF	; 255
    437e:	7f ef       	ldi	r23, 0xFF	; 255
    4380:	c6 c1       	rjmp	.+908    	; 0x470e <vfprintf+0x3b0>
    4382:	9a e0       	ldi	r25, 0x0A	; 10
    4384:	89 2e       	mov	r8, r25
    4386:	1e 01       	movw	r2, r28
    4388:	08 94       	sec
    438a:	21 1c       	adc	r2, r1
    438c:	31 1c       	adc	r3, r1
    438e:	f3 01       	movw	r30, r6
    4390:	23 81       	ldd	r18, Z+3	; 0x03
    4392:	f2 01       	movw	r30, r4
    4394:	23 fd       	sbrc	r18, 3
    4396:	85 91       	lpm	r24, Z+
    4398:	23 ff       	sbrs	r18, 3
    439a:	81 91       	ld	r24, Z+
    439c:	2f 01       	movw	r4, r30
    439e:	88 23       	and	r24, r24
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <vfprintf+0x46>
    43a2:	b2 c1       	rjmp	.+868    	; 0x4708 <vfprintf+0x3aa>
    43a4:	85 32       	cpi	r24, 0x25	; 37
    43a6:	39 f4       	brne	.+14     	; 0x43b6 <vfprintf+0x58>
    43a8:	23 fd       	sbrc	r18, 3
    43aa:	85 91       	lpm	r24, Z+
    43ac:	23 ff       	sbrs	r18, 3
    43ae:	81 91       	ld	r24, Z+
    43b0:	2f 01       	movw	r4, r30
    43b2:	85 32       	cpi	r24, 0x25	; 37
    43b4:	29 f4       	brne	.+10     	; 0x43c0 <vfprintf+0x62>
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	b3 01       	movw	r22, r6
    43ba:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    43be:	e7 cf       	rjmp	.-50     	; 0x438e <vfprintf+0x30>
    43c0:	98 2f       	mov	r25, r24
    43c2:	ff 24       	eor	r15, r15
    43c4:	ee 24       	eor	r14, r14
    43c6:	99 24       	eor	r9, r9
    43c8:	ff e1       	ldi	r31, 0x1F	; 31
    43ca:	ff 15       	cp	r31, r15
    43cc:	d0 f0       	brcs	.+52     	; 0x4402 <vfprintf+0xa4>
    43ce:	9b 32       	cpi	r25, 0x2B	; 43
    43d0:	69 f0       	breq	.+26     	; 0x43ec <vfprintf+0x8e>
    43d2:	9c 32       	cpi	r25, 0x2C	; 44
    43d4:	28 f4       	brcc	.+10     	; 0x43e0 <vfprintf+0x82>
    43d6:	90 32       	cpi	r25, 0x20	; 32
    43d8:	59 f0       	breq	.+22     	; 0x43f0 <vfprintf+0x92>
    43da:	93 32       	cpi	r25, 0x23	; 35
    43dc:	91 f4       	brne	.+36     	; 0x4402 <vfprintf+0xa4>
    43de:	0e c0       	rjmp	.+28     	; 0x43fc <vfprintf+0x9e>
    43e0:	9d 32       	cpi	r25, 0x2D	; 45
    43e2:	49 f0       	breq	.+18     	; 0x43f6 <vfprintf+0x98>
    43e4:	90 33       	cpi	r25, 0x30	; 48
    43e6:	69 f4       	brne	.+26     	; 0x4402 <vfprintf+0xa4>
    43e8:	41 e0       	ldi	r20, 0x01	; 1
    43ea:	24 c0       	rjmp	.+72     	; 0x4434 <vfprintf+0xd6>
    43ec:	52 e0       	ldi	r21, 0x02	; 2
    43ee:	f5 2a       	or	r15, r21
    43f0:	84 e0       	ldi	r24, 0x04	; 4
    43f2:	f8 2a       	or	r15, r24
    43f4:	28 c0       	rjmp	.+80     	; 0x4446 <vfprintf+0xe8>
    43f6:	98 e0       	ldi	r25, 0x08	; 8
    43f8:	f9 2a       	or	r15, r25
    43fa:	25 c0       	rjmp	.+74     	; 0x4446 <vfprintf+0xe8>
    43fc:	e0 e1       	ldi	r30, 0x10	; 16
    43fe:	fe 2a       	or	r15, r30
    4400:	22 c0       	rjmp	.+68     	; 0x4446 <vfprintf+0xe8>
    4402:	f7 fc       	sbrc	r15, 7
    4404:	29 c0       	rjmp	.+82     	; 0x4458 <vfprintf+0xfa>
    4406:	89 2f       	mov	r24, r25
    4408:	80 53       	subi	r24, 0x30	; 48
    440a:	8a 30       	cpi	r24, 0x0A	; 10
    440c:	70 f4       	brcc	.+28     	; 0x442a <vfprintf+0xcc>
    440e:	f6 fe       	sbrs	r15, 6
    4410:	05 c0       	rjmp	.+10     	; 0x441c <vfprintf+0xbe>
    4412:	98 9c       	mul	r9, r8
    4414:	90 2c       	mov	r9, r0
    4416:	11 24       	eor	r1, r1
    4418:	98 0e       	add	r9, r24
    441a:	15 c0       	rjmp	.+42     	; 0x4446 <vfprintf+0xe8>
    441c:	e8 9c       	mul	r14, r8
    441e:	e0 2c       	mov	r14, r0
    4420:	11 24       	eor	r1, r1
    4422:	e8 0e       	add	r14, r24
    4424:	f0 e2       	ldi	r31, 0x20	; 32
    4426:	ff 2a       	or	r15, r31
    4428:	0e c0       	rjmp	.+28     	; 0x4446 <vfprintf+0xe8>
    442a:	9e 32       	cpi	r25, 0x2E	; 46
    442c:	29 f4       	brne	.+10     	; 0x4438 <vfprintf+0xda>
    442e:	f6 fc       	sbrc	r15, 6
    4430:	6b c1       	rjmp	.+726    	; 0x4708 <vfprintf+0x3aa>
    4432:	40 e4       	ldi	r20, 0x40	; 64
    4434:	f4 2a       	or	r15, r20
    4436:	07 c0       	rjmp	.+14     	; 0x4446 <vfprintf+0xe8>
    4438:	9c 36       	cpi	r25, 0x6C	; 108
    443a:	19 f4       	brne	.+6      	; 0x4442 <vfprintf+0xe4>
    443c:	50 e8       	ldi	r21, 0x80	; 128
    443e:	f5 2a       	or	r15, r21
    4440:	02 c0       	rjmp	.+4      	; 0x4446 <vfprintf+0xe8>
    4442:	98 36       	cpi	r25, 0x68	; 104
    4444:	49 f4       	brne	.+18     	; 0x4458 <vfprintf+0xfa>
    4446:	f2 01       	movw	r30, r4
    4448:	23 fd       	sbrc	r18, 3
    444a:	95 91       	lpm	r25, Z+
    444c:	23 ff       	sbrs	r18, 3
    444e:	91 91       	ld	r25, Z+
    4450:	2f 01       	movw	r4, r30
    4452:	99 23       	and	r25, r25
    4454:	09 f0       	breq	.+2      	; 0x4458 <vfprintf+0xfa>
    4456:	b8 cf       	rjmp	.-144    	; 0x43c8 <vfprintf+0x6a>
    4458:	89 2f       	mov	r24, r25
    445a:	85 54       	subi	r24, 0x45	; 69
    445c:	83 30       	cpi	r24, 0x03	; 3
    445e:	18 f0       	brcs	.+6      	; 0x4466 <vfprintf+0x108>
    4460:	80 52       	subi	r24, 0x20	; 32
    4462:	83 30       	cpi	r24, 0x03	; 3
    4464:	38 f4       	brcc	.+14     	; 0x4474 <vfprintf+0x116>
    4466:	44 e0       	ldi	r20, 0x04	; 4
    4468:	50 e0       	ldi	r21, 0x00	; 0
    446a:	a4 0e       	add	r10, r20
    446c:	b5 1e       	adc	r11, r21
    446e:	5f e3       	ldi	r21, 0x3F	; 63
    4470:	59 83       	std	Y+1, r21	; 0x01
    4472:	0f c0       	rjmp	.+30     	; 0x4492 <vfprintf+0x134>
    4474:	93 36       	cpi	r25, 0x63	; 99
    4476:	31 f0       	breq	.+12     	; 0x4484 <vfprintf+0x126>
    4478:	93 37       	cpi	r25, 0x73	; 115
    447a:	79 f0       	breq	.+30     	; 0x449a <vfprintf+0x13c>
    447c:	93 35       	cpi	r25, 0x53	; 83
    447e:	09 f0       	breq	.+2      	; 0x4482 <vfprintf+0x124>
    4480:	56 c0       	rjmp	.+172    	; 0x452e <vfprintf+0x1d0>
    4482:	20 c0       	rjmp	.+64     	; 0x44c4 <vfprintf+0x166>
    4484:	f5 01       	movw	r30, r10
    4486:	80 81       	ld	r24, Z
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	42 e0       	ldi	r20, 0x02	; 2
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	a4 0e       	add	r10, r20
    4490:	b5 1e       	adc	r11, r21
    4492:	61 01       	movw	r12, r2
    4494:	01 e0       	ldi	r16, 0x01	; 1
    4496:	10 e0       	ldi	r17, 0x00	; 0
    4498:	12 c0       	rjmp	.+36     	; 0x44be <vfprintf+0x160>
    449a:	f5 01       	movw	r30, r10
    449c:	c0 80       	ld	r12, Z
    449e:	d1 80       	ldd	r13, Z+1	; 0x01
    44a0:	f6 fc       	sbrc	r15, 6
    44a2:	03 c0       	rjmp	.+6      	; 0x44aa <vfprintf+0x14c>
    44a4:	6f ef       	ldi	r22, 0xFF	; 255
    44a6:	7f ef       	ldi	r23, 0xFF	; 255
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <vfprintf+0x150>
    44aa:	69 2d       	mov	r22, r9
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	42 e0       	ldi	r20, 0x02	; 2
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	a4 0e       	add	r10, r20
    44b4:	b5 1e       	adc	r11, r21
    44b6:	c6 01       	movw	r24, r12
    44b8:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    44bc:	8c 01       	movw	r16, r24
    44be:	5f e7       	ldi	r21, 0x7F	; 127
    44c0:	f5 22       	and	r15, r21
    44c2:	14 c0       	rjmp	.+40     	; 0x44ec <vfprintf+0x18e>
    44c4:	f5 01       	movw	r30, r10
    44c6:	c0 80       	ld	r12, Z
    44c8:	d1 80       	ldd	r13, Z+1	; 0x01
    44ca:	f6 fc       	sbrc	r15, 6
    44cc:	03 c0       	rjmp	.+6      	; 0x44d4 <vfprintf+0x176>
    44ce:	6f ef       	ldi	r22, 0xFF	; 255
    44d0:	7f ef       	ldi	r23, 0xFF	; 255
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <vfprintf+0x17a>
    44d4:	69 2d       	mov	r22, r9
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	42 e0       	ldi	r20, 0x02	; 2
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	a4 0e       	add	r10, r20
    44de:	b5 1e       	adc	r11, r21
    44e0:	c6 01       	movw	r24, r12
    44e2:	0e 94 8c 23 	call	0x4718	; 0x4718 <strnlen_P>
    44e6:	8c 01       	movw	r16, r24
    44e8:	50 e8       	ldi	r21, 0x80	; 128
    44ea:	f5 2a       	or	r15, r21
    44ec:	f3 fe       	sbrs	r15, 3
    44ee:	07 c0       	rjmp	.+14     	; 0x44fe <vfprintf+0x1a0>
    44f0:	1a c0       	rjmp	.+52     	; 0x4526 <vfprintf+0x1c8>
    44f2:	80 e2       	ldi	r24, 0x20	; 32
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	b3 01       	movw	r22, r6
    44f8:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    44fc:	ea 94       	dec	r14
    44fe:	8e 2d       	mov	r24, r14
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	08 17       	cp	r16, r24
    4504:	19 07       	cpc	r17, r25
    4506:	a8 f3       	brcs	.-22     	; 0x44f2 <vfprintf+0x194>
    4508:	0e c0       	rjmp	.+28     	; 0x4526 <vfprintf+0x1c8>
    450a:	f6 01       	movw	r30, r12
    450c:	f7 fc       	sbrc	r15, 7
    450e:	85 91       	lpm	r24, Z+
    4510:	f7 fe       	sbrs	r15, 7
    4512:	81 91       	ld	r24, Z+
    4514:	6f 01       	movw	r12, r30
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	b3 01       	movw	r22, r6
    451a:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    451e:	e1 10       	cpse	r14, r1
    4520:	ea 94       	dec	r14
    4522:	01 50       	subi	r16, 0x01	; 1
    4524:	10 40       	sbci	r17, 0x00	; 0
    4526:	01 15       	cp	r16, r1
    4528:	11 05       	cpc	r17, r1
    452a:	79 f7       	brne	.-34     	; 0x450a <vfprintf+0x1ac>
    452c:	ea c0       	rjmp	.+468    	; 0x4702 <vfprintf+0x3a4>
    452e:	94 36       	cpi	r25, 0x64	; 100
    4530:	11 f0       	breq	.+4      	; 0x4536 <vfprintf+0x1d8>
    4532:	99 36       	cpi	r25, 0x69	; 105
    4534:	69 f5       	brne	.+90     	; 0x4590 <vfprintf+0x232>
    4536:	f7 fe       	sbrs	r15, 7
    4538:	08 c0       	rjmp	.+16     	; 0x454a <vfprintf+0x1ec>
    453a:	f5 01       	movw	r30, r10
    453c:	20 81       	ld	r18, Z
    453e:	31 81       	ldd	r19, Z+1	; 0x01
    4540:	42 81       	ldd	r20, Z+2	; 0x02
    4542:	53 81       	ldd	r21, Z+3	; 0x03
    4544:	84 e0       	ldi	r24, 0x04	; 4
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0a c0       	rjmp	.+20     	; 0x455e <vfprintf+0x200>
    454a:	f5 01       	movw	r30, r10
    454c:	80 81       	ld	r24, Z
    454e:	91 81       	ldd	r25, Z+1	; 0x01
    4550:	9c 01       	movw	r18, r24
    4552:	44 27       	eor	r20, r20
    4554:	37 fd       	sbrc	r19, 7
    4556:	40 95       	com	r20
    4558:	54 2f       	mov	r21, r20
    455a:	82 e0       	ldi	r24, 0x02	; 2
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	a8 0e       	add	r10, r24
    4560:	b9 1e       	adc	r11, r25
    4562:	9f e6       	ldi	r25, 0x6F	; 111
    4564:	f9 22       	and	r15, r25
    4566:	57 ff       	sbrs	r21, 7
    4568:	09 c0       	rjmp	.+18     	; 0x457c <vfprintf+0x21e>
    456a:	50 95       	com	r21
    456c:	40 95       	com	r20
    456e:	30 95       	com	r19
    4570:	21 95       	neg	r18
    4572:	3f 4f       	sbci	r19, 0xFF	; 255
    4574:	4f 4f       	sbci	r20, 0xFF	; 255
    4576:	5f 4f       	sbci	r21, 0xFF	; 255
    4578:	e0 e8       	ldi	r30, 0x80	; 128
    457a:	fe 2a       	or	r15, r30
    457c:	ca 01       	movw	r24, r20
    457e:	b9 01       	movw	r22, r18
    4580:	a1 01       	movw	r20, r2
    4582:	2a e0       	ldi	r18, 0x0A	; 10
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	0e 94 ce 23 	call	0x479c	; 0x479c <__ultoa_invert>
    458a:	d8 2e       	mov	r13, r24
    458c:	d2 18       	sub	r13, r2
    458e:	40 c0       	rjmp	.+128    	; 0x4610 <vfprintf+0x2b2>
    4590:	95 37       	cpi	r25, 0x75	; 117
    4592:	29 f4       	brne	.+10     	; 0x459e <vfprintf+0x240>
    4594:	1f 2d       	mov	r17, r15
    4596:	1f 7e       	andi	r17, 0xEF	; 239
    4598:	2a e0       	ldi	r18, 0x0A	; 10
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	1d c0       	rjmp	.+58     	; 0x45d8 <vfprintf+0x27a>
    459e:	1f 2d       	mov	r17, r15
    45a0:	19 7f       	andi	r17, 0xF9	; 249
    45a2:	9f 36       	cpi	r25, 0x6F	; 111
    45a4:	61 f0       	breq	.+24     	; 0x45be <vfprintf+0x260>
    45a6:	90 37       	cpi	r25, 0x70	; 112
    45a8:	20 f4       	brcc	.+8      	; 0x45b2 <vfprintf+0x254>
    45aa:	98 35       	cpi	r25, 0x58	; 88
    45ac:	09 f0       	breq	.+2      	; 0x45b0 <vfprintf+0x252>
    45ae:	ac c0       	rjmp	.+344    	; 0x4708 <vfprintf+0x3aa>
    45b0:	0f c0       	rjmp	.+30     	; 0x45d0 <vfprintf+0x272>
    45b2:	90 37       	cpi	r25, 0x70	; 112
    45b4:	39 f0       	breq	.+14     	; 0x45c4 <vfprintf+0x266>
    45b6:	98 37       	cpi	r25, 0x78	; 120
    45b8:	09 f0       	breq	.+2      	; 0x45bc <vfprintf+0x25e>
    45ba:	a6 c0       	rjmp	.+332    	; 0x4708 <vfprintf+0x3aa>
    45bc:	04 c0       	rjmp	.+8      	; 0x45c6 <vfprintf+0x268>
    45be:	28 e0       	ldi	r18, 0x08	; 8
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	0a c0       	rjmp	.+20     	; 0x45d8 <vfprintf+0x27a>
    45c4:	10 61       	ori	r17, 0x10	; 16
    45c6:	14 fd       	sbrc	r17, 4
    45c8:	14 60       	ori	r17, 0x04	; 4
    45ca:	20 e1       	ldi	r18, 0x10	; 16
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	04 c0       	rjmp	.+8      	; 0x45d8 <vfprintf+0x27a>
    45d0:	14 fd       	sbrc	r17, 4
    45d2:	16 60       	ori	r17, 0x06	; 6
    45d4:	20 e1       	ldi	r18, 0x10	; 16
    45d6:	32 e0       	ldi	r19, 0x02	; 2
    45d8:	17 ff       	sbrs	r17, 7
    45da:	08 c0       	rjmp	.+16     	; 0x45ec <vfprintf+0x28e>
    45dc:	f5 01       	movw	r30, r10
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	44 e0       	ldi	r20, 0x04	; 4
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	08 c0       	rjmp	.+16     	; 0x45fc <vfprintf+0x29e>
    45ec:	f5 01       	movw	r30, r10
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	bc 01       	movw	r22, r24
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	42 e0       	ldi	r20, 0x02	; 2
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	a4 0e       	add	r10, r20
    45fe:	b5 1e       	adc	r11, r21
    4600:	a1 01       	movw	r20, r2
    4602:	0e 94 ce 23 	call	0x479c	; 0x479c <__ultoa_invert>
    4606:	d8 2e       	mov	r13, r24
    4608:	d2 18       	sub	r13, r2
    460a:	8f e7       	ldi	r24, 0x7F	; 127
    460c:	f8 2e       	mov	r15, r24
    460e:	f1 22       	and	r15, r17
    4610:	f6 fe       	sbrs	r15, 6
    4612:	0b c0       	rjmp	.+22     	; 0x462a <vfprintf+0x2cc>
    4614:	5e ef       	ldi	r21, 0xFE	; 254
    4616:	f5 22       	and	r15, r21
    4618:	d9 14       	cp	r13, r9
    461a:	38 f4       	brcc	.+14     	; 0x462a <vfprintf+0x2cc>
    461c:	f4 fe       	sbrs	r15, 4
    461e:	07 c0       	rjmp	.+14     	; 0x462e <vfprintf+0x2d0>
    4620:	f2 fc       	sbrc	r15, 2
    4622:	05 c0       	rjmp	.+10     	; 0x462e <vfprintf+0x2d0>
    4624:	8f ee       	ldi	r24, 0xEF	; 239
    4626:	f8 22       	and	r15, r24
    4628:	02 c0       	rjmp	.+4      	; 0x462e <vfprintf+0x2d0>
    462a:	1d 2d       	mov	r17, r13
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <vfprintf+0x2d2>
    462e:	19 2d       	mov	r17, r9
    4630:	f4 fe       	sbrs	r15, 4
    4632:	0d c0       	rjmp	.+26     	; 0x464e <vfprintf+0x2f0>
    4634:	fe 01       	movw	r30, r28
    4636:	ed 0d       	add	r30, r13
    4638:	f1 1d       	adc	r31, r1
    463a:	80 81       	ld	r24, Z
    463c:	80 33       	cpi	r24, 0x30	; 48
    463e:	19 f4       	brne	.+6      	; 0x4646 <vfprintf+0x2e8>
    4640:	99 ee       	ldi	r25, 0xE9	; 233
    4642:	f9 22       	and	r15, r25
    4644:	08 c0       	rjmp	.+16     	; 0x4656 <vfprintf+0x2f8>
    4646:	1f 5f       	subi	r17, 0xFF	; 255
    4648:	f2 fe       	sbrs	r15, 2
    464a:	05 c0       	rjmp	.+10     	; 0x4656 <vfprintf+0x2f8>
    464c:	03 c0       	rjmp	.+6      	; 0x4654 <vfprintf+0x2f6>
    464e:	8f 2d       	mov	r24, r15
    4650:	86 78       	andi	r24, 0x86	; 134
    4652:	09 f0       	breq	.+2      	; 0x4656 <vfprintf+0x2f8>
    4654:	1f 5f       	subi	r17, 0xFF	; 255
    4656:	0f 2d       	mov	r16, r15
    4658:	f3 fc       	sbrc	r15, 3
    465a:	14 c0       	rjmp	.+40     	; 0x4684 <vfprintf+0x326>
    465c:	f0 fe       	sbrs	r15, 0
    465e:	0f c0       	rjmp	.+30     	; 0x467e <vfprintf+0x320>
    4660:	1e 15       	cp	r17, r14
    4662:	10 f0       	brcs	.+4      	; 0x4668 <vfprintf+0x30a>
    4664:	9d 2c       	mov	r9, r13
    4666:	0b c0       	rjmp	.+22     	; 0x467e <vfprintf+0x320>
    4668:	9d 2c       	mov	r9, r13
    466a:	9e 0c       	add	r9, r14
    466c:	91 1a       	sub	r9, r17
    466e:	1e 2d       	mov	r17, r14
    4670:	06 c0       	rjmp	.+12     	; 0x467e <vfprintf+0x320>
    4672:	80 e2       	ldi	r24, 0x20	; 32
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	b3 01       	movw	r22, r6
    4678:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    467c:	1f 5f       	subi	r17, 0xFF	; 255
    467e:	1e 15       	cp	r17, r14
    4680:	c0 f3       	brcs	.-16     	; 0x4672 <vfprintf+0x314>
    4682:	04 c0       	rjmp	.+8      	; 0x468c <vfprintf+0x32e>
    4684:	1e 15       	cp	r17, r14
    4686:	10 f4       	brcc	.+4      	; 0x468c <vfprintf+0x32e>
    4688:	e1 1a       	sub	r14, r17
    468a:	01 c0       	rjmp	.+2      	; 0x468e <vfprintf+0x330>
    468c:	ee 24       	eor	r14, r14
    468e:	04 ff       	sbrs	r16, 4
    4690:	0f c0       	rjmp	.+30     	; 0x46b0 <vfprintf+0x352>
    4692:	80 e3       	ldi	r24, 0x30	; 48
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	b3 01       	movw	r22, r6
    4698:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    469c:	02 ff       	sbrs	r16, 2
    469e:	1d c0       	rjmp	.+58     	; 0x46da <vfprintf+0x37c>
    46a0:	01 fd       	sbrc	r16, 1
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <vfprintf+0x34c>
    46a4:	88 e7       	ldi	r24, 0x78	; 120
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	0e c0       	rjmp	.+28     	; 0x46c6 <vfprintf+0x368>
    46aa:	88 e5       	ldi	r24, 0x58	; 88
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0b c0       	rjmp	.+22     	; 0x46c6 <vfprintf+0x368>
    46b0:	80 2f       	mov	r24, r16
    46b2:	86 78       	andi	r24, 0x86	; 134
    46b4:	91 f0       	breq	.+36     	; 0x46da <vfprintf+0x37c>
    46b6:	01 ff       	sbrs	r16, 1
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <vfprintf+0x360>
    46ba:	8b e2       	ldi	r24, 0x2B	; 43
    46bc:	01 c0       	rjmp	.+2      	; 0x46c0 <vfprintf+0x362>
    46be:	80 e2       	ldi	r24, 0x20	; 32
    46c0:	f7 fc       	sbrc	r15, 7
    46c2:	8d e2       	ldi	r24, 0x2D	; 45
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	b3 01       	movw	r22, r6
    46c8:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    46cc:	06 c0       	rjmp	.+12     	; 0x46da <vfprintf+0x37c>
    46ce:	80 e3       	ldi	r24, 0x30	; 48
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	b3 01       	movw	r22, r6
    46d4:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    46d8:	9a 94       	dec	r9
    46da:	d9 14       	cp	r13, r9
    46dc:	c0 f3       	brcs	.-16     	; 0x46ce <vfprintf+0x370>
    46de:	da 94       	dec	r13
    46e0:	f1 01       	movw	r30, r2
    46e2:	ed 0d       	add	r30, r13
    46e4:	f1 1d       	adc	r31, r1
    46e6:	80 81       	ld	r24, Z
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	b3 01       	movw	r22, r6
    46ec:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    46f0:	dd 20       	and	r13, r13
    46f2:	a9 f7       	brne	.-22     	; 0x46de <vfprintf+0x380>
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <vfprintf+0x3a4>
    46f6:	80 e2       	ldi	r24, 0x20	; 32
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	b3 01       	movw	r22, r6
    46fc:	0e 94 a2 23 	call	0x4744	; 0x4744 <fputc>
    4700:	ea 94       	dec	r14
    4702:	ee 20       	and	r14, r14
    4704:	c1 f7       	brne	.-16     	; 0x46f6 <vfprintf+0x398>
    4706:	43 ce       	rjmp	.-890    	; 0x438e <vfprintf+0x30>
    4708:	f3 01       	movw	r30, r6
    470a:	66 81       	ldd	r22, Z+6	; 0x06
    470c:	77 81       	ldd	r23, Z+7	; 0x07
    470e:	cb 01       	movw	r24, r22
    4710:	2b 96       	adiw	r28, 0x0b	; 11
    4712:	e2 e1       	ldi	r30, 0x12	; 18
    4714:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__epilogue_restores__>

00004718 <strnlen_P>:
    4718:	fc 01       	movw	r30, r24
    471a:	05 90       	lpm	r0, Z+
    471c:	61 50       	subi	r22, 0x01	; 1
    471e:	70 40       	sbci	r23, 0x00	; 0
    4720:	01 10       	cpse	r0, r1
    4722:	d8 f7       	brcc	.-10     	; 0x471a <strnlen_P+0x2>
    4724:	80 95       	com	r24
    4726:	90 95       	com	r25
    4728:	8e 0f       	add	r24, r30
    472a:	9f 1f       	adc	r25, r31
    472c:	08 95       	ret

0000472e <strnlen>:
    472e:	fc 01       	movw	r30, r24
    4730:	61 50       	subi	r22, 0x01	; 1
    4732:	70 40       	sbci	r23, 0x00	; 0
    4734:	01 90       	ld	r0, Z+
    4736:	01 10       	cpse	r0, r1
    4738:	d8 f7       	brcc	.-10     	; 0x4730 <strnlen+0x2>
    473a:	80 95       	com	r24
    473c:	90 95       	com	r25
    473e:	8e 0f       	add	r24, r30
    4740:	9f 1f       	adc	r25, r31
    4742:	08 95       	ret

00004744 <fputc>:
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	8c 01       	movw	r16, r24
    474e:	eb 01       	movw	r28, r22
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	81 ff       	sbrs	r24, 1
    4754:	1b c0       	rjmp	.+54     	; 0x478c <fputc+0x48>
    4756:	82 ff       	sbrs	r24, 2
    4758:	0d c0       	rjmp	.+26     	; 0x4774 <fputc+0x30>
    475a:	2e 81       	ldd	r18, Y+6	; 0x06
    475c:	3f 81       	ldd	r19, Y+7	; 0x07
    475e:	8c 81       	ldd	r24, Y+4	; 0x04
    4760:	9d 81       	ldd	r25, Y+5	; 0x05
    4762:	28 17       	cp	r18, r24
    4764:	39 07       	cpc	r19, r25
    4766:	64 f4       	brge	.+24     	; 0x4780 <fputc+0x3c>
    4768:	e8 81       	ld	r30, Y
    476a:	f9 81       	ldd	r31, Y+1	; 0x01
    476c:	01 93       	st	Z+, r16
    476e:	f9 83       	std	Y+1, r31	; 0x01
    4770:	e8 83       	st	Y, r30
    4772:	06 c0       	rjmp	.+12     	; 0x4780 <fputc+0x3c>
    4774:	e8 85       	ldd	r30, Y+8	; 0x08
    4776:	f9 85       	ldd	r31, Y+9	; 0x09
    4778:	80 2f       	mov	r24, r16
    477a:	09 95       	icall
    477c:	89 2b       	or	r24, r25
    477e:	31 f4       	brne	.+12     	; 0x478c <fputc+0x48>
    4780:	8e 81       	ldd	r24, Y+6	; 0x06
    4782:	9f 81       	ldd	r25, Y+7	; 0x07
    4784:	01 96       	adiw	r24, 0x01	; 1
    4786:	9f 83       	std	Y+7, r25	; 0x07
    4788:	8e 83       	std	Y+6, r24	; 0x06
    478a:	02 c0       	rjmp	.+4      	; 0x4790 <fputc+0x4c>
    478c:	0f ef       	ldi	r16, 0xFF	; 255
    478e:	1f ef       	ldi	r17, 0xFF	; 255
    4790:	c8 01       	movw	r24, r16
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	1f 91       	pop	r17
    4798:	0f 91       	pop	r16
    479a:	08 95       	ret

0000479c <__ultoa_invert>:
    479c:	fa 01       	movw	r30, r20
    479e:	aa 27       	eor	r26, r26
    47a0:	28 30       	cpi	r18, 0x08	; 8
    47a2:	51 f1       	breq	.+84     	; 0x47f8 <__ultoa_invert+0x5c>
    47a4:	20 31       	cpi	r18, 0x10	; 16
    47a6:	81 f1       	breq	.+96     	; 0x4808 <__ultoa_invert+0x6c>
    47a8:	e8 94       	clt
    47aa:	6f 93       	push	r22
    47ac:	6e 7f       	andi	r22, 0xFE	; 254
    47ae:	6e 5f       	subi	r22, 0xFE	; 254
    47b0:	7f 4f       	sbci	r23, 0xFF	; 255
    47b2:	8f 4f       	sbci	r24, 0xFF	; 255
    47b4:	9f 4f       	sbci	r25, 0xFF	; 255
    47b6:	af 4f       	sbci	r26, 0xFF	; 255
    47b8:	b1 e0       	ldi	r27, 0x01	; 1
    47ba:	3e d0       	rcall	.+124    	; 0x4838 <__ultoa_invert+0x9c>
    47bc:	b4 e0       	ldi	r27, 0x04	; 4
    47be:	3c d0       	rcall	.+120    	; 0x4838 <__ultoa_invert+0x9c>
    47c0:	67 0f       	add	r22, r23
    47c2:	78 1f       	adc	r23, r24
    47c4:	89 1f       	adc	r24, r25
    47c6:	9a 1f       	adc	r25, r26
    47c8:	a1 1d       	adc	r26, r1
    47ca:	68 0f       	add	r22, r24
    47cc:	79 1f       	adc	r23, r25
    47ce:	8a 1f       	adc	r24, r26
    47d0:	91 1d       	adc	r25, r1
    47d2:	a1 1d       	adc	r26, r1
    47d4:	6a 0f       	add	r22, r26
    47d6:	71 1d       	adc	r23, r1
    47d8:	81 1d       	adc	r24, r1
    47da:	91 1d       	adc	r25, r1
    47dc:	a1 1d       	adc	r26, r1
    47de:	20 d0       	rcall	.+64     	; 0x4820 <__ultoa_invert+0x84>
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <__ultoa_invert+0x48>
    47e2:	68 94       	set
    47e4:	3f 91       	pop	r19
    47e6:	2a e0       	ldi	r18, 0x0A	; 10
    47e8:	26 9f       	mul	r18, r22
    47ea:	11 24       	eor	r1, r1
    47ec:	30 19       	sub	r19, r0
    47ee:	30 5d       	subi	r19, 0xD0	; 208
    47f0:	31 93       	st	Z+, r19
    47f2:	de f6       	brtc	.-74     	; 0x47aa <__ultoa_invert+0xe>
    47f4:	cf 01       	movw	r24, r30
    47f6:	08 95       	ret
    47f8:	46 2f       	mov	r20, r22
    47fa:	47 70       	andi	r20, 0x07	; 7
    47fc:	40 5d       	subi	r20, 0xD0	; 208
    47fe:	41 93       	st	Z+, r20
    4800:	b3 e0       	ldi	r27, 0x03	; 3
    4802:	0f d0       	rcall	.+30     	; 0x4822 <__ultoa_invert+0x86>
    4804:	c9 f7       	brne	.-14     	; 0x47f8 <__ultoa_invert+0x5c>
    4806:	f6 cf       	rjmp	.-20     	; 0x47f4 <__ultoa_invert+0x58>
    4808:	46 2f       	mov	r20, r22
    480a:	4f 70       	andi	r20, 0x0F	; 15
    480c:	40 5d       	subi	r20, 0xD0	; 208
    480e:	4a 33       	cpi	r20, 0x3A	; 58
    4810:	18 f0       	brcs	.+6      	; 0x4818 <__ultoa_invert+0x7c>
    4812:	49 5d       	subi	r20, 0xD9	; 217
    4814:	31 fd       	sbrc	r19, 1
    4816:	40 52       	subi	r20, 0x20	; 32
    4818:	41 93       	st	Z+, r20
    481a:	02 d0       	rcall	.+4      	; 0x4820 <__ultoa_invert+0x84>
    481c:	a9 f7       	brne	.-22     	; 0x4808 <__ultoa_invert+0x6c>
    481e:	ea cf       	rjmp	.-44     	; 0x47f4 <__ultoa_invert+0x58>
    4820:	b4 e0       	ldi	r27, 0x04	; 4
    4822:	a6 95       	lsr	r26
    4824:	97 95       	ror	r25
    4826:	87 95       	ror	r24
    4828:	77 95       	ror	r23
    482a:	67 95       	ror	r22
    482c:	ba 95       	dec	r27
    482e:	c9 f7       	brne	.-14     	; 0x4822 <__ultoa_invert+0x86>
    4830:	00 97       	sbiw	r24, 0x00	; 0
    4832:	61 05       	cpc	r22, r1
    4834:	71 05       	cpc	r23, r1
    4836:	08 95       	ret
    4838:	9b 01       	movw	r18, r22
    483a:	ac 01       	movw	r20, r24
    483c:	0a 2e       	mov	r0, r26
    483e:	06 94       	lsr	r0
    4840:	57 95       	ror	r21
    4842:	47 95       	ror	r20
    4844:	37 95       	ror	r19
    4846:	27 95       	ror	r18
    4848:	ba 95       	dec	r27
    484a:	c9 f7       	brne	.-14     	; 0x483e <__ultoa_invert+0xa2>
    484c:	62 0f       	add	r22, r18
    484e:	73 1f       	adc	r23, r19
    4850:	84 1f       	adc	r24, r20
    4852:	95 1f       	adc	r25, r21
    4854:	a0 1d       	adc	r26, r0
    4856:	08 95       	ret

00004858 <_exit>:
    4858:	f8 94       	cli

0000485a <__stop_program>:
    485a:	ff cf       	rjmp	.-2      	; 0x485a <__stop_program>
